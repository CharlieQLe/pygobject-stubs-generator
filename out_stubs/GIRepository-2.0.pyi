from gi.repository import GObject, GLib, GObject

MAJOR_VERSION: int
MICRO_VERSION: int
MINOR_VERSION: int
TYPE_TAG_N_TYPES: int

def arg_info_get_closure(info: ArgInfo) -> int: ...
def arg_info_get_destroy(info: ArgInfo) -> int: ...
def arg_info_get_direction(info: ArgInfo) -> Direction: ...
def arg_info_get_ownership_transfer(info: ArgInfo) -> Transfer: ...
def arg_info_get_scope(info: ArgInfo) -> ScopeType: ...
def arg_info_get_type(info: ArgInfo) -> TypeInfo: ...
def arg_info_is_caller_allocates(info: ArgInfo) -> bool: ...
def arg_info_is_optional(info: ArgInfo) -> bool: ...
def arg_info_is_return_value(info: ArgInfo) -> bool: ...
def arg_info_is_skip(info: ArgInfo) -> bool: ...
def arg_info_load_type(info: ArgInfo, type: TypeInfo) -> None: ...
def arg_info_may_be_null(info: ArgInfo) -> bool: ...
def callable_info_can_throw_gerror(info: CallableInfo) -> bool: ...
def callable_info_get_arg(info: CallableInfo, n: int) -> ArgInfo: ...
def callable_info_get_caller_owns(info: CallableInfo) -> Transfer: ...
def callable_info_get_instance_ownership_transfer(info: CallableInfo) -> Transfer: ...
def callable_info_get_n_args(info: CallableInfo) -> int: ...
def callable_info_get_return_attribute(info: CallableInfo, name: str) -> str: ...
def callable_info_get_return_type(info: CallableInfo) -> TypeInfo: ...
def callable_info_invoke(info: CallableInfo, function: object | None, in_args: list[Argument], n_in_args: int, out_args: list[Argument], n_out_args: int, return_value: Argument, is_method: bool, throws: bool) -> bool: ...
def callable_info_is_method(info: CallableInfo) -> bool: ...
def callable_info_iterate_return_attributes(info: CallableInfo, iterator: AttributeIter, name: str, value: str) -> bool: ...
def callable_info_load_arg(info: CallableInfo, n: int, arg: ArgInfo) -> None: ...
def callable_info_load_return_type(info: CallableInfo, type: TypeInfo) -> None: ...
def callable_info_may_return_null(info: CallableInfo) -> bool: ...
def callable_info_skip_return(info: CallableInfo) -> bool: ...
def cclosure_marshal_generic(closure: GObject.Closure, return_gvalue: GObject.Value, n_param_values: int, param_values: GObject.Value, invocation_hint: object | None, marshal_data: object | None) -> None: ...
def constant_info_free_value(info: ConstantInfo, value: Argument) -> None: ...
def constant_info_get_type(info: ConstantInfo) -> TypeInfo: ...
def constant_info_get_value(info: ConstantInfo, value: Argument) -> int: ...
def enum_info_get_error_domain(info: EnumInfo) -> str: ...
def enum_info_get_method(info: EnumInfo, n: int) -> FunctionInfo: ...
def enum_info_get_n_methods(info: EnumInfo) -> int: ...
def enum_info_get_n_values(info: EnumInfo) -> int: ...
def enum_info_get_storage_type(info: EnumInfo) -> TypeTag: ...
def enum_info_get_value(info: EnumInfo, n: int) -> ValueInfo: ...
def field_info_get_field(field_info: FieldInfo, mem: object | None, value: Argument) -> bool: ...
def field_info_get_flags(info: FieldInfo) -> FieldInfoFlags: ...
def field_info_get_offset(info: FieldInfo) -> int: ...
def field_info_get_size(info: FieldInfo) -> int: ...
def field_info_get_type(info: FieldInfo) -> TypeInfo: ...
def field_info_set_field(field_info: FieldInfo, mem: object | None, value: Argument) -> bool: ...
def function_info_get_flags(info: FunctionInfo) -> FunctionInfoFlags: ...
def function_info_get_property(info: FunctionInfo) -> PropertyInfo: ...
def function_info_get_symbol(info: FunctionInfo) -> str: ...
def function_info_get_vfunc(info: FunctionInfo) -> VFuncInfo: ...
def function_info_invoke(info: FunctionInfo, in_args: list[Argument], n_in_args: int, out_args: list[Argument], n_out_args: int, return_value: Argument) -> bool: ...
def get_major_version() -> int: ...
def get_micro_version() -> int: ...
def get_minor_version() -> int: ...
def info_new(type: InfoType, container: BaseInfo, typelib: Typelib, offset: int) -> BaseInfo: ...
def info_type_to_string(type: InfoType) -> str: ...
def interface_info_find_method(info: InterfaceInfo, name: str) -> FunctionInfo: ...
def interface_info_find_signal(info: InterfaceInfo, name: str) -> SignalInfo: ...
def interface_info_find_vfunc(info: InterfaceInfo, name: str) -> VFuncInfo: ...
def interface_info_get_constant(info: InterfaceInfo, n: int) -> ConstantInfo: ...
def interface_info_get_iface_struct(info: InterfaceInfo) -> StructInfo: ...
def interface_info_get_method(info: InterfaceInfo, n: int) -> FunctionInfo: ...
def interface_info_get_n_constants(info: InterfaceInfo) -> int: ...
def interface_info_get_n_methods(info: InterfaceInfo) -> int: ...
def interface_info_get_n_prerequisites(info: InterfaceInfo) -> int: ...
def interface_info_get_n_properties(info: InterfaceInfo) -> int: ...
def interface_info_get_n_signals(info: InterfaceInfo) -> int: ...
def interface_info_get_n_vfuncs(info: InterfaceInfo) -> int: ...
def interface_info_get_prerequisite(info: InterfaceInfo, n: int) -> BaseInfo: ...
def interface_info_get_property(info: InterfaceInfo, n: int) -> PropertyInfo: ...
def interface_info_get_signal(info: InterfaceInfo, n: int) -> SignalInfo: ...
def interface_info_get_vfunc(info: InterfaceInfo, n: int) -> VFuncInfo: ...
def invoke_error_quark() -> GLib.Quark: ...
def object_info_find_method(info: ObjectInfo, name: str) -> FunctionInfo | None: ...
def object_info_find_method_using_interfaces(info: ObjectInfo, name: str, implementor: ObjectInfo) -> FunctionInfo | None: ...
def object_info_find_signal(info: ObjectInfo, name: str) -> SignalInfo | None: ...
def object_info_find_vfunc(info: ObjectInfo, name: str) -> VFuncInfo | None: ...
def object_info_find_vfunc_using_interfaces(info: ObjectInfo, name: str, implementor: ObjectInfo) -> VFuncInfo | None: ...
def object_info_get_abstract(info: ObjectInfo) -> bool: ...
def object_info_get_class_struct(info: ObjectInfo) -> StructInfo | None: ...
def object_info_get_constant(info: ObjectInfo, n: int) -> ConstantInfo: ...
def object_info_get_field(info: ObjectInfo, n: int) -> FieldInfo: ...
def object_info_get_final(info: ObjectInfo) -> bool: ...
def object_info_get_fundamental(info: ObjectInfo) -> bool: ...
def object_info_get_get_value_function(info: ObjectInfo) -> str | None: ...
def object_info_get_get_value_function_pointer(info: ObjectInfo) -> ObjectInfoGetValueFunction | None: ...
def object_info_get_interface(info: ObjectInfo, n: int) -> InterfaceInfo: ...
def object_info_get_method(info: ObjectInfo, n: int) -> FunctionInfo: ...
def object_info_get_n_constants(info: ObjectInfo) -> int: ...
def object_info_get_n_fields(info: ObjectInfo) -> int: ...
def object_info_get_n_interfaces(info: ObjectInfo) -> int: ...
def object_info_get_n_methods(info: ObjectInfo) -> int: ...
def object_info_get_n_properties(info: ObjectInfo) -> int: ...
def object_info_get_n_signals(info: ObjectInfo) -> int: ...
def object_info_get_n_vfuncs(info: ObjectInfo) -> int: ...
def object_info_get_parent(info: ObjectInfo) -> ObjectInfo | None: ...
def object_info_get_property(info: ObjectInfo, n: int) -> PropertyInfo: ...
def object_info_get_ref_function(info: ObjectInfo) -> str | None: ...
def object_info_get_ref_function_pointer(info: ObjectInfo) -> ObjectInfoRefFunction | None: ...
def object_info_get_set_value_function(info: ObjectInfo) -> str | None: ...
def object_info_get_set_value_function_pointer(info: ObjectInfo) -> ObjectInfoSetValueFunction | None: ...
def object_info_get_signal(info: ObjectInfo, n: int) -> SignalInfo: ...
def object_info_get_type_init(info: ObjectInfo) -> str: ...
def object_info_get_type_name(info: ObjectInfo) -> str: ...
def object_info_get_unref_function(info: ObjectInfo) -> str | None: ...
def object_info_get_unref_function_pointer(info: ObjectInfo) -> ObjectInfoUnrefFunction | None: ...
def object_info_get_vfunc(info: ObjectInfo, n: int) -> VFuncInfo: ...
def property_info_get_flags(info: PropertyInfo) -> GObject.ParamFlags: ...
def property_info_get_getter(info: PropertyInfo) -> FunctionInfo | None: ...
def property_info_get_ownership_transfer(info: PropertyInfo) -> Transfer: ...
def property_info_get_setter(info: PropertyInfo) -> FunctionInfo | None: ...
def property_info_get_type(info: PropertyInfo) -> TypeInfo: ...
def registered_type_info_get_g_type(info: RegisteredTypeInfo) -> GObject.Type: ...
def registered_type_info_get_type_init(info: RegisteredTypeInfo) -> str: ...
def registered_type_info_get_type_name(info: RegisteredTypeInfo) -> str: ...
def signal_info_get_class_closure(info: SignalInfo) -> VFuncInfo: ...
def signal_info_get_flags(info: SignalInfo) -> GObject.SignalFlags: ...
def signal_info_true_stops_emit(info: SignalInfo) -> bool: ...
def struct_info_find_field(info: StructInfo, name: str) -> FieldInfo: ...
def struct_info_find_method(info: StructInfo, name: str) -> FunctionInfo: ...
def struct_info_get_alignment(info: StructInfo) -> gsize: ...
def struct_info_get_field(info: StructInfo, n: int) -> FieldInfo: ...
def struct_info_get_method(info: StructInfo, n: int) -> FunctionInfo: ...
def struct_info_get_n_fields(info: StructInfo) -> int: ...
def struct_info_get_n_methods(info: StructInfo) -> int: ...
def struct_info_get_size(info: StructInfo) -> gsize: ...
def struct_info_is_foreign(info: StructInfo) -> bool: ...
def struct_info_is_gtype_struct(info: StructInfo) -> bool: ...
def type_info_argument_from_hash_pointer(info: TypeInfo, hash_pointer: object | None, arg: Argument) -> None: ...
def type_info_get_array_fixed_size(info: TypeInfo) -> int: ...
def type_info_get_array_length(info: TypeInfo) -> int: ...
def type_info_get_array_type(info: TypeInfo) -> ArrayType: ...
def type_info_get_interface(info: TypeInfo) -> BaseInfo: ...
def type_info_get_param_type(info: TypeInfo, n: int) -> TypeInfo: ...
def type_info_get_storage_type(info: TypeInfo) -> TypeTag: ...
def type_info_get_tag(info: TypeInfo) -> TypeTag: ...
def type_info_hash_pointer_from_argument(info: TypeInfo, arg: Argument) -> object | None: ...
def type_info_is_pointer(info: TypeInfo) -> bool: ...
def type_info_is_zero_terminated(info: TypeInfo) -> bool: ...
def type_tag_argument_from_hash_pointer(storage_type: TypeTag, hash_pointer: object | None, arg: Argument) -> None: ...
def type_tag_hash_pointer_from_argument(storage_type: TypeTag, arg: Argument) -> object | None: ...
def type_tag_to_string(type: TypeTag) -> str: ...
def union_info_find_method(info: UnionInfo, name: str) -> FunctionInfo: ...
def union_info_get_alignment(info: UnionInfo) -> gsize: ...
def union_info_get_discriminator(info: UnionInfo, n: int) -> ConstantInfo: ...
def union_info_get_discriminator_offset(info: UnionInfo) -> int: ...
def union_info_get_discriminator_type(info: UnionInfo) -> TypeInfo: ...
def union_info_get_field(info: UnionInfo, n: int) -> FieldInfo: ...
def union_info_get_method(info: UnionInfo, n: int) -> FunctionInfo: ...
def union_info_get_n_fields(info: UnionInfo) -> int: ...
def union_info_get_n_methods(info: UnionInfo) -> int: ...
def union_info_get_size(info: UnionInfo) -> gsize: ...
def union_info_is_discriminated(info: UnionInfo) -> bool: ...
def value_info_get_value(info: ValueInfo) -> int: ...
def vfunc_info_get_address(info: VFuncInfo, implementor_gtype: GObject.Type) -> object | None: ...
def vfunc_info_get_flags(info: VFuncInfo) -> VFuncInfoFlags: ...
def vfunc_info_get_invoker(info: VFuncInfo) -> FunctionInfo: ...
def vfunc_info_get_offset(info: VFuncInfo) -> int: ...
def vfunc_info_get_signal(info: VFuncInfo) -> SignalInfo: ...
def vfunc_info_invoke(info: VFuncInfo, implementor: GObject.Type, in_args: list[Argument], n_in_args: int, out_args: list[Argument], n_out_args: int, return_value: Argument) -> bool: ...

class Repository(GObject.Object): 
    @classmethod
    def dump(cls, arg: str) -> bool: ...
    @classmethod
    def error_quark(cls) -> GLib.Quark: ...
    @classmethod
    def get_default(cls) -> Repository: ...
    @classmethod
    def get_option_group(cls) -> GLib.OptionGroup: ...
    @classmethod
    def get_search_path(cls) -> GLib.SList: ...
    @classmethod
    def prepend_library_path(cls, directory: str) -> None: ...
    @classmethod
    def prepend_search_path(cls, directory: filename) -> None: ...
    def enumerate_versions(self, namespace_: str) -> GLib.List: ...
    def find_by_error_domain(self, domain: GLib.Quark) -> EnumInfo: ...
    def find_by_gtype(self, gtype: GObject.Type) -> BaseInfo: ...
    def find_by_name(self, namespace_: str, name: str) -> BaseInfo: ...
    def get_c_prefix(self, namespace_: str) -> str: ...
    def get_dependencies(self, namespace_: str) -> list[str]: ...
    def get_immediate_dependencies(self, namespace_: str) -> list[str]: ...
    def get_info(self, namespace_: str, index: int) -> BaseInfo: ...
    def get_loaded_namespaces(self) -> list[str]: ...
    def get_n_infos(self, namespace_: str) -> int: ...
    def get_object_gtype_interfaces(self, gtype: GObject.Type, n_interfaces_out: int, interfaces_out: list[InterfaceInfo]) -> None: ...
    def get_shared_library(self, namespace_: str) -> str | None: ...
    def get_typelib_path(self, namespace_: str) -> str: ...
    def get_version(self, namespace_: str) -> str: ...
    def is_registered(self, namespace_: str, version: str | None) -> bool: ...
    def load_typelib(self, typelib: Typelib, flags: RepositoryLoadFlags) -> str: ...
    def require(self, namespace_: str, version: str | None, flags: RepositoryLoadFlags) -> Typelib: ...
    def require_private(self, typelib_dir: str, namespace_: str, version: str | None, flags: RepositoryLoadFlags) -> Typelib: ...

class FieldInfoFlags(GObject.GFlag): 
    READABLE = ...
    WRITABLE = ...

class FunctionInfoFlags(GObject.GFlag): 
    IS_METHOD = ...
    IS_CONSTRUCTOR = ...
    IS_GETTER = ...
    IS_SETTER = ...
    WRAPS_VFUNC = ...
    THROWS = ...

class RepositoryLoadFlags(GObject.GFlag): 
    IREPOSITORY_LOAD_FLAG_LAZY = ...

class VFuncInfoFlags(GObject.GFlag): 
    MUST_CHAIN_UP = ...
    MUST_OVERRIDE = ...
    MUST_NOT_OVERRIDE = ...
    THROWS = ...

class ArrayType(GObject.GEnum): 
    C = ...
    ARRAY = ...
    PTR_ARRAY = ...
    BYTE_ARRAY = ...

class Direction(GObject.GEnum): 
    IN = ...
    OUT = ...
    INOUT = ...

class InfoType(GObject.GEnum): 
    INVALID = ...
    FUNCTION = ...
    CALLBACK = ...
    STRUCT = ...
    BOXED = ...
    ENUM = ...
    FLAGS = ...
    OBJECT = ...
    INTERFACE = ...
    CONSTANT = ...
    INVALID_0 = ...
    UNION = ...
    VALUE = ...
    SIGNAL = ...
    VFUNC = ...
    PROPERTY = ...
    FIELD = ...
    ARG = ...
    TYPE = ...
    UNRESOLVED = ...

class RepositoryError(GObject.GEnum): 
    TYPELIB_NOT_FOUND = ...
    NAMESPACE_MISMATCH = ...
    NAMESPACE_VERSION_CONFLICT = ...
    LIBRARY_NOT_FOUND = ...

class ScopeType(GObject.GEnum): 
    INVALID = ...
    CALL = ...
    ASYNC = ...
    NOTIFIED = ...
    FOREVER = ...

class Transfer(GObject.GEnum): 
    NOTHING = ...
    CONTAINER = ...
    EVERYTHING = ...

class TypeTag(GObject.GEnum): 
    VOID = ...
    BOOLEAN = ...
    INT8 = ...
    UINT8 = ...
    INT16 = ...
    UINT16 = ...
    INT32 = ...
    UINT32 = ...
    INT64 = ...
    UINT64 = ...
    FLOAT = ...
    DOUBLE = ...
    GTYPE = ...
    UTF8 = ...
    FILENAME = ...
    ARRAY = ...
    INTERFACE = ...
    GLIST = ...
    GSLIST = ...
    GHASH = ...
    ERROR = ...
    UNICHAR = ...

class nvokeError(GObject.GEnum): 
    FAILED = ...
    SYMBOL_NOT_FOUND = ...
    ARGUMENT_MISMATCH = ...

