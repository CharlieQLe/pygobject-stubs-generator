from gi.repository import GObject, Gdk, GLib, cairo, Gio, GdkPixbuf, Pango, Atk, xlib, Atk, Gdk, xlib

BINARY_AGE: int
INPUT_ERROR: int
INTERFACE_AGE: int
LEVEL_BAR_OFFSET_FULL: str
LEVEL_BAR_OFFSET_HIGH: str
LEVEL_BAR_OFFSET_LOW: str
MAJOR_VERSION: int
MAX_COMPOSE_LEN: int
MICRO_VERSION: int
MINOR_VERSION: int
PAPER_NAME_A3: str
PAPER_NAME_A4: str
PAPER_NAME_A5: str
PAPER_NAME_B5: str
PAPER_NAME_EXECUTIVE: str
PAPER_NAME_LEGAL: str
PAPER_NAME_LETTER: str
PATH_PRIO_MASK: int
PRINT_SETTINGS_COLLATE: str
PRINT_SETTINGS_DEFAULT_SOURCE: str
PRINT_SETTINGS_DITHER: str
PRINT_SETTINGS_DUPLEX: str
PRINT_SETTINGS_FINISHINGS: str
PRINT_SETTINGS_MEDIA_TYPE: str
PRINT_SETTINGS_NUMBER_UP: str
PRINT_SETTINGS_NUMBER_UP_LAYOUT: str
PRINT_SETTINGS_N_COPIES: str
PRINT_SETTINGS_ORIENTATION: str
PRINT_SETTINGS_OUTPUT_BASENAME: str
PRINT_SETTINGS_OUTPUT_BIN: str
PRINT_SETTINGS_OUTPUT_DIR: str
PRINT_SETTINGS_OUTPUT_FILE_FORMAT: str
PRINT_SETTINGS_OUTPUT_URI: str
PRINT_SETTINGS_PAGE_RANGES: str
PRINT_SETTINGS_PAGE_SET: str
PRINT_SETTINGS_PAPER_FORMAT: str
PRINT_SETTINGS_PAPER_HEIGHT: str
PRINT_SETTINGS_PAPER_WIDTH: str
PRINT_SETTINGS_PRINTER: str
PRINT_SETTINGS_PRINTER_LPI: str
PRINT_SETTINGS_PRINT_PAGES: str
PRINT_SETTINGS_QUALITY: str
PRINT_SETTINGS_RESOLUTION: str
PRINT_SETTINGS_RESOLUTION_X: str
PRINT_SETTINGS_RESOLUTION_Y: str
PRINT_SETTINGS_REVERSE: str
PRINT_SETTINGS_SCALE: str
PRINT_SETTINGS_USE_COLOR: str
PRINT_SETTINGS_WIN32_DRIVER_EXTRA: str
PRINT_SETTINGS_WIN32_DRIVER_VERSION: str
PRIORITY_RESIZE: int
STOCK_ABOUT: str
STOCK_ADD: str
STOCK_APPLY: str
STOCK_BOLD: str
STOCK_CANCEL: str
STOCK_CAPS_LOCK_WARNING: str
STOCK_CDROM: str
STOCK_CLEAR: str
STOCK_CLOSE: str
STOCK_COLOR_PICKER: str
STOCK_CONNECT: str
STOCK_CONVERT: str
STOCK_COPY: str
STOCK_CUT: str
STOCK_DELETE: str
STOCK_DIALOG_AUTHENTICATION: str
STOCK_DIALOG_ERROR: str
STOCK_DIALOG_INFO: str
STOCK_DIALOG_QUESTION: str
STOCK_DIALOG_WARNING: str
STOCK_DIRECTORY: str
STOCK_DISCARD: str
STOCK_DISCONNECT: str
STOCK_DND: str
STOCK_DND_MULTIPLE: str
STOCK_EDIT: str
STOCK_EXECUTE: str
STOCK_FILE: str
STOCK_FIND: str
STOCK_FIND_AND_REPLACE: str
STOCK_FLOPPY: str
STOCK_FULLSCREEN: str
STOCK_GOTO_BOTTOM: str
STOCK_GOTO_FIRST: str
STOCK_GOTO_LAST: str
STOCK_GOTO_TOP: str
STOCK_GO_BACK: str
STOCK_GO_DOWN: str
STOCK_GO_FORWARD: str
STOCK_GO_UP: str
STOCK_HARDDISK: str
STOCK_HELP: str
STOCK_HOME: str
STOCK_INDENT: str
STOCK_INDEX: str
STOCK_INFO: str
STOCK_ITALIC: str
STOCK_JUMP_TO: str
STOCK_JUSTIFY_CENTER: str
STOCK_JUSTIFY_FILL: str
STOCK_JUSTIFY_LEFT: str
STOCK_JUSTIFY_RIGHT: str
STOCK_LEAVE_FULLSCREEN: str
STOCK_MEDIA_FORWARD: str
STOCK_MEDIA_NEXT: str
STOCK_MEDIA_PAUSE: str
STOCK_MEDIA_PLAY: str
STOCK_MEDIA_PREVIOUS: str
STOCK_MEDIA_RECORD: str
STOCK_MEDIA_REWIND: str
STOCK_MEDIA_STOP: str
STOCK_MISSING_IMAGE: str
STOCK_NETWORK: str
STOCK_NEW: str
STOCK_NO: str
STOCK_OK: str
STOCK_OPEN: str
STOCK_ORIENTATION_LANDSCAPE: str
STOCK_ORIENTATION_PORTRAIT: str
STOCK_ORIENTATION_REVERSE_LANDSCAPE: str
STOCK_ORIENTATION_REVERSE_PORTRAIT: str
STOCK_PAGE_SETUP: str
STOCK_PASTE: str
STOCK_PREFERENCES: str
STOCK_PRINT: str
STOCK_PRINT_ERROR: str
STOCK_PRINT_PAUSED: str
STOCK_PRINT_PREVIEW: str
STOCK_PRINT_REPORT: str
STOCK_PRINT_WARNING: str
STOCK_PROPERTIES: str
STOCK_QUIT: str
STOCK_REDO: str
STOCK_REFRESH: str
STOCK_REMOVE: str
STOCK_REVERT_TO_SAVED: str
STOCK_SAVE: str
STOCK_SAVE_AS: str
STOCK_SELECT_ALL: str
STOCK_SELECT_COLOR: str
STOCK_SELECT_FONT: str
STOCK_SORT_ASCENDING: str
STOCK_SORT_DESCENDING: str
STOCK_SPELL_CHECK: str
STOCK_STOP: str
STOCK_STRIKETHROUGH: str
STOCK_UNDELETE: str
STOCK_UNDERLINE: str
STOCK_UNDO: str
STOCK_UNINDENT: str
STOCK_YES: str
STOCK_ZOOM_100: str
STOCK_ZOOM_FIT: str
STOCK_ZOOM_IN: str
STOCK_ZOOM_OUT: str
STYLE_CLASS_ACCELERATOR: str
STYLE_CLASS_ARROW: str
STYLE_CLASS_BACKGROUND: str
STYLE_CLASS_BOTTOM: str
STYLE_CLASS_BUTTON: str
STYLE_CLASS_CALENDAR: str
STYLE_CLASS_CELL: str
STYLE_CLASS_CHECK: str
STYLE_CLASS_COMBOBOX_ENTRY: str
STYLE_CLASS_CONTEXT_MENU: str
STYLE_CLASS_CSD: str
STYLE_CLASS_CURSOR_HANDLE: str
STYLE_CLASS_DEFAULT: str
STYLE_CLASS_DESTRUCTIVE_ACTION: str
STYLE_CLASS_DIM_LABEL: str
STYLE_CLASS_DND: str
STYLE_CLASS_DOCK: str
STYLE_CLASS_ENTRY: str
STYLE_CLASS_ERROR: str
STYLE_CLASS_EXPANDER: str
STYLE_CLASS_FLAT: str
STYLE_CLASS_FRAME: str
STYLE_CLASS_GRIP: str
STYLE_CLASS_HEADER: str
STYLE_CLASS_HIGHLIGHT: str
STYLE_CLASS_HORIZONTAL: str
STYLE_CLASS_IMAGE: str
STYLE_CLASS_INFO: str
STYLE_CLASS_INLINE_TOOLBAR: str
STYLE_CLASS_INSERTION_CURSOR: str
STYLE_CLASS_LABEL: str
STYLE_CLASS_LEFT: str
STYLE_CLASS_LEVEL_BAR: str
STYLE_CLASS_LINKED: str
STYLE_CLASS_LIST: str
STYLE_CLASS_LIST_ROW: str
STYLE_CLASS_MARK: str
STYLE_CLASS_MENU: str
STYLE_CLASS_MENUBAR: str
STYLE_CLASS_MENUITEM: str
STYLE_CLASS_MESSAGE_DIALOG: str
STYLE_CLASS_MONOSPACE: str
STYLE_CLASS_NEEDS_ATTENTION: str
STYLE_CLASS_NOTEBOOK: str
STYLE_CLASS_OSD: str
STYLE_CLASS_OVERSHOOT: str
STYLE_CLASS_PANE_SEPARATOR: str
STYLE_CLASS_PAPER: str
STYLE_CLASS_POPOVER: str
STYLE_CLASS_POPUP: str
STYLE_CLASS_PRIMARY_TOOLBAR: str
STYLE_CLASS_PROGRESSBAR: str
STYLE_CLASS_PULSE: str
STYLE_CLASS_QUESTION: str
STYLE_CLASS_RADIO: str
STYLE_CLASS_RAISED: str
STYLE_CLASS_READ_ONLY: str
STYLE_CLASS_RIGHT: str
STYLE_CLASS_RUBBERBAND: str
STYLE_CLASS_SCALE: str
STYLE_CLASS_SCALE_HAS_MARKS_ABOVE: str
STYLE_CLASS_SCALE_HAS_MARKS_BELOW: str
STYLE_CLASS_SCROLLBAR: str
STYLE_CLASS_SCROLLBARS_JUNCTION: str
STYLE_CLASS_SEPARATOR: str
STYLE_CLASS_SIDEBAR: str
STYLE_CLASS_SLIDER: str
STYLE_CLASS_SPINBUTTON: str
STYLE_CLASS_SPINNER: str
STYLE_CLASS_STATUSBAR: str
STYLE_CLASS_SUBTITLE: str
STYLE_CLASS_SUGGESTED_ACTION: str
STYLE_CLASS_TITLE: str
STYLE_CLASS_TITLEBAR: str
STYLE_CLASS_TOOLBAR: str
STYLE_CLASS_TOOLTIP: str
STYLE_CLASS_TOP: str
STYLE_CLASS_TOUCH_SELECTION: str
STYLE_CLASS_TROUGH: str
STYLE_CLASS_UNDERSHOOT: str
STYLE_CLASS_VERTICAL: str
STYLE_CLASS_VIEW: str
STYLE_CLASS_WARNING: str
STYLE_CLASS_WIDE: str
STYLE_PROPERTY_BACKGROUND_COLOR: str
STYLE_PROPERTY_BACKGROUND_IMAGE: str
STYLE_PROPERTY_BORDER_COLOR: str
STYLE_PROPERTY_BORDER_RADIUS: str
STYLE_PROPERTY_BORDER_STYLE: str
STYLE_PROPERTY_BORDER_WIDTH: str
STYLE_PROPERTY_COLOR: str
STYLE_PROPERTY_FONT: str
STYLE_PROPERTY_MARGIN: str
STYLE_PROPERTY_PADDING: str
STYLE_PROVIDER_PRIORITY_APPLICATION: int
STYLE_PROVIDER_PRIORITY_FALLBACK: int
STYLE_PROVIDER_PRIORITY_SETTINGS: int
STYLE_PROVIDER_PRIORITY_THEME: int
STYLE_PROVIDER_PRIORITY_USER: int
STYLE_REGION_COLUMN: str
STYLE_REGION_COLUMN_HEADER: str
STYLE_REGION_ROW: str
STYLE_REGION_TAB: str
TEXT_VIEW_PRIORITY_VALIDATE: int
TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID: int
TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID: int

def accel_groups_activate(object: GObject.Object, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
def accel_groups_from_object(object: GObject.Object) -> GLib.SList: ...
def accelerator_get_default_mod_mask() -> Gdk.ModifierType: ...
def accelerator_get_label(accelerator_key: int, accelerator_mods: Gdk.ModifierType) -> str: ...
def accelerator_get_label_with_keycode(display: Gdk.Display, accelerator_key: int, keycode: int, accelerator_mods: Gdk.ModifierType) -> str: ...
def accelerator_name(accelerator_key: int, accelerator_mods: Gdk.ModifierType) -> str: ...
def accelerator_name_with_keycode(display: Gdk.Display, accelerator_key: int, keycode: int, accelerator_mods: Gdk.ModifierType) -> str: ...
def accelerator_parse(accelerator: str, accelerator_key: int, accelerator_mods: Gdk.ModifierType) -> None: ...
def accelerator_parse_with_keycode(accelerator: str, accelerator_key: int, accelerator_codes: list[int], accelerator_mods: Gdk.ModifierType) -> None: ...
def accelerator_set_default_mod_mask(default_mod_mask: Gdk.ModifierType) -> None: ...
def accelerator_valid(keyval: int, modifiers: Gdk.ModifierType) -> bool: ...
def alternative_dialog_button_order(screen: Gdk.Screen) -> bool: ...
def binding_entry_add_signal_from_string(binding_set: BindingSet, signal_desc: str) -> GLib.TokenType: ...
def binding_entry_add_signall(binding_set: BindingSet, keyval: int, modifiers: Gdk.ModifierType, signal_name: str, binding_args: GLib.SList) -> None: ...
def binding_entry_remove(binding_set: BindingSet, keyval: int, modifiers: Gdk.ModifierType) -> None: ...
def binding_entry_skip(binding_set: BindingSet, keyval: int, modifiers: Gdk.ModifierType) -> None: ...
def binding_set_by_class(object_class: object) -> BindingSet: ...
def binding_set_find(set_name: str) -> BindingSet: ...
def binding_set_new(set_name: str) -> BindingSet: ...
def bindings_activate(object: GObject.Object, keyval: int, modifiers: Gdk.ModifierType) -> bool: ...
def bindings_activate_event(object: GObject.Object, event: Gdk.EventKey) -> bool: ...
def builder_error_quark() -> GLib.Quark: ...
def cairo_should_draw_window(cr: cairo.Context, window: Gdk.Window) -> bool: ...
def cairo_transform_to_window(cr: cairo.Context, widget: Widget, window: Gdk.Window) -> None: ...
def check_version(required_major: int, required_minor: int, required_micro: int) -> str: ...
def css_provider_error_quark() -> GLib.Quark: ...
def device_grab_add(widget: Widget, device: Gdk.Device, block_others: bool) -> None: ...
def device_grab_remove(widget: Widget, device: Gdk.Device) -> None: ...
def disable_setlocale() -> None: ...
def distribute_natural_allocation(extra_space: int, n_requested_sizes: int, sizes: RequestedSize) -> int: ...
def drag_cancel(context: Gdk.DragContext) -> None: ...
def drag_finish(context: Gdk.DragContext, success: bool, del: bool, time_: int) -> None: ...
def drag_get_source_widget(context: Gdk.DragContext) -> Widget: ...
def drag_set_icon_default(context: Gdk.DragContext) -> None: ...
def drag_set_icon_gicon(context: Gdk.DragContext, icon: Gio.Icon, hot_x: int, hot_y: int) -> None: ...
def drag_set_icon_name(context: Gdk.DragContext, icon_name: str, hot_x: int, hot_y: int) -> None: ...
def drag_set_icon_pixbuf(context: Gdk.DragContext, pixbuf: GdkPixbuf.Pixbuf, hot_x: int, hot_y: int) -> None: ...
def drag_set_icon_stock(context: Gdk.DragContext, stock_id: str, hot_x: int, hot_y: int) -> None: ...
def drag_set_icon_surface(context: Gdk.DragContext, surface: cairo.Surface) -> None: ...
def drag_set_icon_widget(context: Gdk.DragContext, widget: Widget, hot_x: int, hot_y: int) -> None: ...
def draw_insertion_cursor(widget: Widget, cr: cairo.Context, location: Gdk.Rectangle, is_primary: bool, direction: TextDirection, draw_arrow: bool) -> None: ...
def events_pending() -> bool: ...
def false() -> bool: ...
def file_chooser_error_quark() -> GLib.Quark: ...
def get_binary_age() -> int: ...
def get_current_event() -> Gdk.Event: ...
def get_current_event_device() -> Gdk.Device: ...
def get_current_event_state(state: Gdk.ModifierType) -> bool: ...
def get_current_event_time() -> int: ...
def get_debug_flags() -> int: ...
def get_default_language() -> Pango.Language: ...
def get_event_widget(event: Gdk.Event) -> Widget: ...
def get_interface_age() -> int: ...
def get_locale_direction() -> TextDirection: ...
def get_major_version() -> int: ...
def get_micro_version() -> int: ...
def get_minor_version() -> int: ...
def get_option_group(open_default_display: bool) -> GLib.OptionGroup: ...
def grab_get_current() -> Widget: ...
def icon_size_from_name(name: str) -> int: ...
def icon_size_get_name(size: int) -> str: ...
def icon_size_lookup(size: int, width: int, height: int) -> bool: ...
def icon_size_lookup_for_settings(settings: Settings, size: int, width: int, height: int) -> bool: ...
def icon_size_register(name: str, width: int, height: int) -> int: ...
def icon_size_register_alias(alias: str, target: int) -> None: ...
def icon_theme_error_quark() -> GLib.Quark: ...
def init(argc: int, argv: list[str]) -> None: ...
def init_check(argc: int, argv: list[str]) -> bool: ...
def init_with_args(argc: int, argv: list[str], parameter_string: str, entries: list[GLib.OptionEntry], translation_domain: str) -> bool: ...
def key_snooper_install(snooper: KeySnoopFunc, func_data: object) -> int: ...
def key_snooper_remove(snooper_handler_id: int) -> None: ...
def main() -> None: ...
def main_do_event(event: Gdk.Event) -> None: ...
def main_iteration() -> bool: ...
def main_iteration_do(blocking: bool) -> bool: ...
def main_level() -> int: ...
def main_quit() -> None: ...
def paint_arrow(style: Style, cr: cairo.Context, state_type: StateType, shadow_type: ShadowType, widget: Widget, detail: str, arrow_type: ArrowType, fill: bool, x: int, y: int, width: int, height: int) -> None: ...
def paint_box(style: Style, cr: cairo.Context, state_type: StateType, shadow_type: ShadowType, widget: Widget, detail: str, x: int, y: int, width: int, height: int) -> None: ...
def paint_box_gap(style: Style, cr: cairo.Context, state_type: StateType, shadow_type: ShadowType, widget: Widget, detail: str, x: int, y: int, width: int, height: int, gap_side: PositionType, gap_x: int, gap_width: int) -> None: ...
def paint_check(style: Style, cr: cairo.Context, state_type: StateType, shadow_type: ShadowType, widget: Widget, detail: str, x: int, y: int, width: int, height: int) -> None: ...
def paint_diamond(style: Style, cr: cairo.Context, state_type: StateType, shadow_type: ShadowType, widget: Widget, detail: str, x: int, y: int, width: int, height: int) -> None: ...
def paint_expander(style: Style, cr: cairo.Context, state_type: StateType, widget: Widget, detail: str, x: int, y: int, expander_style: ExpanderStyle) -> None: ...
def paint_extension(style: Style, cr: cairo.Context, state_type: StateType, shadow_type: ShadowType, widget: Widget, detail: str, x: int, y: int, width: int, height: int, gap_side: PositionType) -> None: ...
def paint_flat_box(style: Style, cr: cairo.Context, state_type: StateType, shadow_type: ShadowType, widget: Widget, detail: str, x: int, y: int, width: int, height: int) -> None: ...
def paint_focus(style: Style, cr: cairo.Context, state_type: StateType, widget: Widget, detail: str, x: int, y: int, width: int, height: int) -> None: ...
def paint_handle(style: Style, cr: cairo.Context, state_type: StateType, shadow_type: ShadowType, widget: Widget, detail: str, x: int, y: int, width: int, height: int, orientation: Orientation) -> None: ...
def paint_hline(style: Style, cr: cairo.Context, state_type: StateType, widget: Widget, detail: str, x1: int, x2: int, y: int) -> None: ...
def paint_layout(style: Style, cr: cairo.Context, state_type: StateType, use_text: bool, widget: Widget, detail: str, x: int, y: int, layout: Pango.Layout) -> None: ...
def paint_option(style: Style, cr: cairo.Context, state_type: StateType, shadow_type: ShadowType, widget: Widget, detail: str, x: int, y: int, width: int, height: int) -> None: ...
def paint_resize_grip(style: Style, cr: cairo.Context, state_type: StateType, widget: Widget, detail: str, edge: Gdk.WindowEdge, x: int, y: int, width: int, height: int) -> None: ...
def paint_shadow(style: Style, cr: cairo.Context, state_type: StateType, shadow_type: ShadowType, widget: Widget, detail: str, x: int, y: int, width: int, height: int) -> None: ...
def paint_shadow_gap(style: Style, cr: cairo.Context, state_type: StateType, shadow_type: ShadowType, widget: Widget, detail: str, x: int, y: int, width: int, height: int, gap_side: PositionType, gap_x: int, gap_width: int) -> None: ...
def paint_slider(style: Style, cr: cairo.Context, state_type: StateType, shadow_type: ShadowType, widget: Widget, detail: str, x: int, y: int, width: int, height: int, orientation: Orientation) -> None: ...
def paint_spinner(style: Style, cr: cairo.Context, state_type: StateType, widget: Widget, detail: str, step: int, x: int, y: int, width: int, height: int) -> None: ...
def paint_tab(style: Style, cr: cairo.Context, state_type: StateType, shadow_type: ShadowType, widget: Widget, detail: str, x: int, y: int, width: int, height: int) -> None: ...
def paint_vline(style: Style, cr: cairo.Context, state_type: StateType, widget: Widget, detail: str, y1_: int, y2_: int, x: int) -> None: ...
def paper_size_get_default() -> str: ...
def paper_size_get_paper_sizes(include_custom: bool) -> GLib.List: ...
def parse_args(argc: int, argv: list[str]) -> bool: ...
def print_error_quark() -> GLib.Quark: ...
def print_run_page_setup_dialog(parent: Window, page_setup: PageSetup, settings: PrintSettings) -> PageSetup: ...
def print_run_page_setup_dialog_async(parent: Window, page_setup: PageSetup, settings: PrintSettings, done_cb: PageSetupDoneFunc, data: object) -> None: ...
def propagate_event(widget: Widget, event: Gdk.Event) -> None: ...
def rc_add_default_file(filename: filename) -> None: ...
def rc_find_module_in_path(module_file: str) -> filename: ...
def rc_find_pixmap_in_path(settings: Settings, scanner: GLib.Scanner, pixmap_file: str) -> filename: ...
def rc_get_default_files() -> list[filename]: ...
def rc_get_im_module_file() -> filename: ...
def rc_get_im_module_path() -> filename: ...
def rc_get_module_dir() -> filename: ...
def rc_get_style(widget: Widget) -> Style: ...
def rc_get_style_by_paths(settings: Settings, widget_path: str, class_path: str, type: GObject.Type) -> Style: ...
def rc_get_theme_dir() -> str: ...
def rc_parse(filename: str) -> None: ...
def rc_parse_color(scanner: GLib.Scanner, color: Gdk.Color) -> int: ...
def rc_parse_color_full(scanner: GLib.Scanner, style: RcStyle, color: Gdk.Color) -> int: ...
def rc_parse_priority(scanner: GLib.Scanner, priority: PathPriorityType) -> int: ...
def rc_parse_state(scanner: GLib.Scanner, state: StateType) -> int: ...
def rc_parse_string(rc_string: str) -> None: ...
def rc_property_parse_border(pspec: GObject.ParamSpec, gstring: GLib.String, property_value: GObject.Value) -> bool: ...
def rc_property_parse_color(pspec: GObject.ParamSpec, gstring: GLib.String, property_value: GObject.Value) -> bool: ...
def rc_property_parse_enum(pspec: GObject.ParamSpec, gstring: GLib.String, property_value: GObject.Value) -> bool: ...
def rc_property_parse_flags(pspec: GObject.ParamSpec, gstring: GLib.String, property_value: GObject.Value) -> bool: ...
def rc_property_parse_requisition(pspec: GObject.ParamSpec, gstring: GLib.String, property_value: GObject.Value) -> bool: ...
def rc_reparse_all() -> bool: ...
def rc_reparse_all_for_settings(settings: Settings, force_load: bool) -> bool: ...
def rc_reset_styles(settings: Settings) -> None: ...
def rc_scanner_new() -> GLib.Scanner: ...
def rc_set_default_files(filenames: list[filename]) -> None: ...
def recent_chooser_error_quark() -> GLib.Quark: ...
def recent_manager_error_quark() -> GLib.Quark: ...
def render_activity(context: StyleContext, cr: cairo.Context, x: float, y: float, width: float, height: float) -> None: ...
def render_arrow(context: StyleContext, cr: cairo.Context, angle: float, x: float, y: float, size: float) -> None: ...
def render_background(context: StyleContext, cr: cairo.Context, x: float, y: float, width: float, height: float) -> None: ...
def render_background_get_clip(context: StyleContext, x: float, y: float, width: float, height: float, out_clip: Gdk.Rectangle) -> None: ...
def render_check(context: StyleContext, cr: cairo.Context, x: float, y: float, width: float, height: float) -> None: ...
def render_expander(context: StyleContext, cr: cairo.Context, x: float, y: float, width: float, height: float) -> None: ...
def render_extension(context: StyleContext, cr: cairo.Context, x: float, y: float, width: float, height: float, gap_side: PositionType) -> None: ...
def render_focus(context: StyleContext, cr: cairo.Context, x: float, y: float, width: float, height: float) -> None: ...
def render_frame(context: StyleContext, cr: cairo.Context, x: float, y: float, width: float, height: float) -> None: ...
def render_frame_gap(context: StyleContext, cr: cairo.Context, x: float, y: float, width: float, height: float, gap_side: PositionType, xy0_gap: float, xy1_gap: float) -> None: ...
def render_handle(context: StyleContext, cr: cairo.Context, x: float, y: float, width: float, height: float) -> None: ...
def render_icon(context: StyleContext, cr: cairo.Context, pixbuf: GdkPixbuf.Pixbuf, x: float, y: float) -> None: ...
def render_icon_pixbuf(context: StyleContext, source: IconSource, size: int) -> GdkPixbuf.Pixbuf: ...
def render_icon_surface(context: StyleContext, cr: cairo.Context, surface: cairo.Surface, x: float, y: float) -> None: ...
def render_insertion_cursor(context: StyleContext, cr: cairo.Context, x: float, y: float, layout: Pango.Layout, index: int, direction: Pango.Direction) -> None: ...
def render_layout(context: StyleContext, cr: cairo.Context, x: float, y: float, layout: Pango.Layout) -> None: ...
def render_line(context: StyleContext, cr: cairo.Context, x0: float, y0: float, x1: float, y1: float) -> None: ...
def render_option(context: StyleContext, cr: cairo.Context, x: float, y: float, width: float, height: float) -> None: ...
def render_slider(context: StyleContext, cr: cairo.Context, x: float, y: float, width: float, height: float, orientation: Orientation) -> None: ...
def rgb_to_hsv(r: float, g: float, b: float, h: float, s: float, v: float) -> None: ...
def selection_add_target(widget: Widget, selection: Gdk.Atom, target: Gdk.Atom, info: int) -> None: ...
def selection_add_targets(widget: Widget, selection: Gdk.Atom, targets: list[TargetEntry], ntargets: int) -> None: ...
def selection_clear_targets(widget: Widget, selection: Gdk.Atom) -> None: ...
def selection_convert(widget: Widget, selection: Gdk.Atom, target: Gdk.Atom, time_: int) -> bool: ...
def selection_owner_set(widget: Widget, selection: Gdk.Atom, time_: int) -> bool: ...
def selection_owner_set_for_display(display: Gdk.Display, widget: Widget, selection: Gdk.Atom, time_: int) -> bool: ...
def selection_remove_all(widget: Widget) -> None: ...
def set_debug_flags(flags: int) -> None: ...
def show_about_dialog(parent: Window, first_property_name: str) -> None: ...
def show_uri(screen: Gdk.Screen, uri: str, timestamp: int) -> bool: ...
def show_uri_on_window(parent: Window, uri: str, timestamp: int) -> bool: ...
def stock_add(items: list[StockItem], n_items: int) -> None: ...
def stock_add_static(items: list[StockItem], n_items: int) -> None: ...
def stock_list_ids() -> GLib.SList: ...
def stock_lookup(stock_id: str, item: StockItem) -> bool: ...
def stock_set_translate_func(domain: str, func: TranslateFunc, data: object, notify: GLib.DestroyNotify) -> None: ...
def target_table_free(targets: list[TargetEntry], n_targets: int) -> None: ...
def target_table_new_from_list(list: TargetList, n_targets: int) -> list[TargetEntry]: ...
def targets_include_image(targets: list[Gdk.Atom], n_targets: int, writable: bool) -> bool: ...
def targets_include_rich_text(targets: list[Gdk.Atom], n_targets: int, buffer: TextBuffer) -> bool: ...
def targets_include_text(targets: list[Gdk.Atom], n_targets: int) -> bool: ...
def targets_include_uri(targets: list[Gdk.Atom], n_targets: int) -> bool: ...
def test_create_simple_window(window_title: str, dialog_text: str) -> Widget: ...
def test_create_widget(widget_type: GObject.Type, first_property_name: str) -> Widget: ...
def test_display_button_window(window_title: str, dialog_text: str) -> Widget: ...
def test_find_label(widget: Widget, label_pattern: str) -> Widget: ...
def test_find_sibling(base_widget: Widget, widget_type: GObject.Type) -> Widget: ...
def test_find_widget(widget: Widget, label_pattern: str, widget_type: GObject.Type) -> Widget: ...
def test_init(argcp: int, argvp: list[str]) -> None: ...
def test_list_all_types(n_types: int) -> list[GObject.Type]: ...
def test_register_all_types() -> None: ...
def test_slider_get_value(widget: Widget) -> float: ...
def test_slider_set_perc(widget: Widget, percentage: float) -> None: ...
def test_spin_button_click(spinner: SpinButton, button: int, upwards: bool) -> bool: ...
def test_text_get(widget: Widget) -> str: ...
def test_text_set(widget: Widget, string: str) -> None: ...
def test_widget_click(widget: Widget, button: int, modifiers: Gdk.ModifierType) -> bool: ...
def test_widget_send_key(widget: Widget, keyval: int, modifiers: Gdk.ModifierType) -> bool: ...
def test_widget_wait_for_draw(widget: Widget) -> None: ...
def tree_get_row_drag_data(selection_data: SelectionData, tree_model: TreeModel, path: TreePath) -> bool: ...
def tree_row_reference_deleted(proxy: GObject.Object, path: TreePath) -> None: ...
def tree_row_reference_inserted(proxy: GObject.Object, path: TreePath) -> None: ...
def tree_row_reference_reordered(proxy: GObject.Object, path: TreePath, iter: TreeIter, new_order: list[int]) -> None: ...
def tree_set_row_drag_data(selection_data: SelectionData, tree_model: TreeModel, path: TreePath) -> bool: ...
def true() -> bool: ...

class AboutDialog(Dialog, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls) -> Widget: ...
    def add_credit_section(self, section_name: str, people: list[str]) -> None: ...
    def get_artists(self) -> list[str]: ...
    def get_authors(self) -> list[str]: ...
    def get_comments(self) -> str: ...
    def get_copyright(self) -> str: ...
    def get_documenters(self) -> list[str]: ...
    def get_license(self) -> str: ...
    def get_license_type(self) -> License: ...
    def get_logo(self) -> GdkPixbuf.Pixbuf: ...
    def get_logo_icon_name(self) -> str: ...
    def get_program_name(self) -> str: ...
    def get_translator_credits(self) -> str: ...
    def get_version(self) -> str: ...
    def get_website(self) -> str: ...
    def get_website_label(self) -> str: ...
    def get_wrap_license(self) -> bool: ...
    def set_artists(self, artists: list[str]) -> None: ...
    def set_authors(self, authors: list[str]) -> None: ...
    def set_comments(self, comments: str) -> None: ...
    def set_copyright(self, copyright: str) -> None: ...
    def set_documenters(self, documenters: list[str]) -> None: ...
    def set_license(self, license: str) -> None: ...
    def set_license_type(self, license_type: License) -> None: ...
    def set_logo(self, logo: GdkPixbuf.Pixbuf) -> None: ...
    def set_logo_icon_name(self, icon_name: str) -> None: ...
    def set_program_name(self, name: str) -> None: ...
    def set_translator_credits(self, translator_credits: str) -> None: ...
    def set_version(self, version: str) -> None: ...
    def set_website(self, website: str) -> None: ...
    def set_website_label(self, website_label: str) -> None: ...
    def set_wrap_license(self, wrap_license: bool) -> None: ...

class AccelGroup(GObject.Object): 
    @classmethod
    def new(cls) -> AccelGroup: ...
    @classmethod
    def from_accel_closure(cls, closure: GObject.Closure) -> AccelGroup: ...
    def activate(self, accel_quark: GLib.Quark, acceleratable: GObject.Object, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def connect(self, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: AccelFlags, closure: GObject.Closure) -> None: ...
    def connect_by_path(self, accel_path: str, closure: GObject.Closure) -> None: ...
    def disconnect(self, closure: GObject.Closure) -> bool: ...
    def disconnect_key(self, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def find(self, find_func: AccelGroupFindFunc, data: object) -> AccelKey: ...
    def get_is_locked(self) -> bool: ...
    def get_modifier_mask(self) -> Gdk.ModifierType: ...
    def lock(self) -> None: ...
    def query(self, accel_key: int, accel_mods: Gdk.ModifierType, n_entries: int) -> list[AccelGroupEntry]: ...
    def unlock(self) -> None: ...

class AccelLabel(Label, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls, string: str) -> Widget: ...
    def get_accel(self, accelerator_key: int, accelerator_mods: Gdk.ModifierType) -> None: ...
    def get_accel_widget(self) -> Widget: ...
    def get_accel_width(self) -> int: ...
    def refetch(self) -> bool: ...
    def set_accel(self, accelerator_key: int, accelerator_mods: Gdk.ModifierType) -> None: ...
    def set_accel_closure(self, accel_closure: GObject.Closure) -> None: ...
    def set_accel_widget(self, accel_widget: Widget) -> None: ...

class AccelMap(GObject.Object): 
    @classmethod
    def add_entry(cls, accel_path: str, accel_key: int, accel_mods: Gdk.ModifierType) -> None: ...
    @classmethod
    def add_filter(cls, filter_pattern: str) -> None: ...
    @classmethod
    def change_entry(cls, accel_path: str, accel_key: int, accel_mods: Gdk.ModifierType, replace: bool) -> bool: ...
    @classmethod
    def foreach(cls, data: object, foreach_func: AccelMapForeach) -> None: ...
    @classmethod
    def foreach_unfiltered(cls, data: object, foreach_func: AccelMapForeach) -> None: ...
    @classmethod
    def get(cls) -> AccelMap: ...
    @classmethod
    def load(cls, file_name: filename) -> None: ...
    @classmethod
    def load_fd(cls, fd: int) -> None: ...
    @classmethod
    def load_scanner(cls, scanner: GLib.Scanner) -> None: ...
    @classmethod
    def lock_path(cls, accel_path: str) -> None: ...
    @classmethod
    def lookup_entry(cls, accel_path: str, key: AccelKey) -> bool: ...
    @classmethod
    def save(cls, file_name: filename) -> None: ...
    @classmethod
    def save_fd(cls, fd: int) -> None: ...
    @classmethod
    def unlock_path(cls, accel_path: str) -> None: ...

class Accessible(Atk.Object): 
    def connect_widget_destroyed(self) -> None: ...
    def get_widget(self) -> Widget: ...
    def set_widget(self, widget: Widget) -> None: ...

class Action(GObject.Object, Buildable): 
    @classmethod
    def new(cls, name: str, label: str, tooltip: str, stock_id: str) -> Action: ...
    def activate(self) -> None: ...
    def block_activate(self) -> None: ...
    def connect_accelerator(self) -> None: ...
    def create_icon(self, icon_size: int) -> Widget: ...
    def create_menu(self) -> Widget: ...
    def create_menu_item(self) -> Widget: ...
    def create_tool_item(self) -> Widget: ...
    def disconnect_accelerator(self) -> None: ...
    def get_accel_closure(self) -> GObject.Closure: ...
    def get_accel_path(self) -> str: ...
    def get_always_show_image(self) -> bool: ...
    def get_gicon(self) -> Gio.Icon: ...
    def get_icon_name(self) -> str: ...
    def get_is_important(self) -> bool: ...
    def get_label(self) -> str: ...
    def get_name(self) -> str: ...
    def get_proxies(self) -> GLib.SList: ...
    def get_sensitive(self) -> bool: ...
    def get_short_label(self) -> str: ...
    def get_stock_id(self) -> str: ...
    def get_tooltip(self) -> str: ...
    def get_visible(self) -> bool: ...
    def get_visible_horizontal(self) -> bool: ...
    def get_visible_vertical(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def set_accel_group(self, accel_group: AccelGroup) -> None: ...
    def set_accel_path(self, accel_path: str) -> None: ...
    def set_always_show_image(self, always_show: bool) -> None: ...
    def set_gicon(self, icon: Gio.Icon) -> None: ...
    def set_icon_name(self, icon_name: str) -> None: ...
    def set_is_important(self, is_important: bool) -> None: ...
    def set_label(self, label: str) -> None: ...
    def set_sensitive(self, sensitive: bool) -> None: ...
    def set_short_label(self, short_label: str) -> None: ...
    def set_stock_id(self, stock_id: str) -> None: ...
    def set_tooltip(self, tooltip: str) -> None: ...
    def set_visible(self, visible: bool) -> None: ...
    def set_visible_horizontal(self, visible_horizontal: bool) -> None: ...
    def set_visible_vertical(self, visible_vertical: bool) -> None: ...
    def unblock_activate(self) -> None: ...

class ActionBar(Bin, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_center_widget(self) -> Widget: ...
    def pack_end(self, child: Widget) -> None: ...
    def pack_start(self, child: Widget) -> None: ...
    def set_center_widget(self, center_widget: Widget) -> None: ...

class ActionGroup(GObject.Object, Buildable): 
    @classmethod
    def new(cls, name: str) -> ActionGroup: ...
    def add_action(self, action: Action) -> None: ...
    def add_action_with_accel(self, action: Action, accelerator: str) -> None: ...
    def add_actions(self, entries: list[ActionEntry], n_entries: int, user_data: object) -> None: ...
    def add_actions_full(self, entries: list[ActionEntry], n_entries: int, user_data: object, destroy: GLib.DestroyNotify) -> None: ...
    def add_radio_actions(self, entries: list[RadioActionEntry], n_entries: int, value: int, on_change: GObject.Callback, user_data: object) -> None: ...
    def add_radio_actions_full(self, entries: list[RadioActionEntry], n_entries: int, value: int, on_change: GObject.Callback, user_data: object, destroy: GLib.DestroyNotify) -> None: ...
    def add_toggle_actions(self, entries: list[ToggleActionEntry], n_entries: int, user_data: object) -> None: ...
    def add_toggle_actions_full(self, entries: list[ToggleActionEntry], n_entries: int, user_data: object, destroy: GLib.DestroyNotify) -> None: ...
    def get_accel_group(self) -> AccelGroup: ...
    def get_action(self, action_name: str) -> Action: ...
    def get_name(self) -> str: ...
    def get_sensitive(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def list_actions(self) -> GLib.List: ...
    def remove_action(self, action: Action) -> None: ...
    def set_accel_group(self, accel_group: AccelGroup) -> None: ...
    def set_sensitive(self, sensitive: bool) -> None: ...
    def set_translate_func(self, func: TranslateFunc, data: object, notify: GLib.DestroyNotify) -> None: ...
    def set_translation_domain(self, domain: str) -> None: ...
    def set_visible(self, visible: bool) -> None: ...
    def translate_string(self, string: str) -> str: ...

class Adjustment(GObject.InitiallyUnowned): 
    @classmethod
    def new(cls, value: float, lower: float, upper: float, step_increment: float, page_increment: float, page_size: float) -> Adjustment: ...
    def changed(self) -> None: ...
    def clamp_page(self, lower: float, upper: float) -> None: ...
    def configure(self, value: float, lower: float, upper: float, step_increment: float, page_increment: float, page_size: float) -> None: ...
    def get_lower(self) -> float: ...
    def get_minimum_increment(self) -> float: ...
    def get_page_increment(self) -> float: ...
    def get_page_size(self) -> float: ...
    def get_step_increment(self) -> float: ...
    def get_upper(self) -> float: ...
    def get_value(self) -> float: ...
    def set_lower(self, lower: float) -> None: ...
    def set_page_increment(self, page_increment: float) -> None: ...
    def set_page_size(self, page_size: float) -> None: ...
    def set_step_increment(self, step_increment: float) -> None: ...
    def set_upper(self, upper: float) -> None: ...
    def set_value(self, value: float) -> None: ...
    def value_changed(self) -> None: ...

class Alignment(Bin, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls, xalign: float, yalign: float, xscale: float, yscale: float) -> Widget: ...
    def get_padding(self, padding_top: int, padding_bottom: int, padding_left: int, padding_right: int) -> None: ...
    def set(self, xalign: float, yalign: float, xscale: float, yscale: float) -> None: ...
    def set_padding(self, padding_top: int, padding_bottom: int, padding_left: int, padding_right: int) -> None: ...

class AppChooserButton(ComboBox, Atk.ImplementorIface, AppChooser, Buildable, CellEditable, CellLayout): 
    @classmethod
    def new(cls, content_type: str) -> Widget: ...
    def append_custom_item(self, name: str, label: str, icon: Gio.Icon) -> None: ...
    def append_separator(self) -> None: ...
    def get_heading(self) -> str: ...
    def get_show_default_item(self) -> bool: ...
    def get_show_dialog_item(self) -> bool: ...
    def set_active_custom_item(self, name: str) -> None: ...
    def set_heading(self, heading: str) -> None: ...
    def set_show_default_item(self, setting: bool) -> None: ...
    def set_show_dialog_item(self, setting: bool) -> None: ...

class AppChooserDialog(Dialog, Atk.ImplementorIface, AppChooser, Buildable): 
    @classmethod
    def new(cls, parent: Window, flags: DialogFlags, file: Gio.File) -> Widget: ...
    def get_heading(self) -> str: ...
    def get_widget(self) -> Widget: ...
    def set_heading(self, heading: str) -> None: ...

class AppChooserWidget(Box, Atk.ImplementorIface, AppChooser, Buildable, Orientable): 
    @classmethod
    def new(cls, content_type: str) -> Widget: ...
    def get_default_text(self) -> str: ...
    def get_show_all(self) -> bool: ...
    def get_show_default(self) -> bool: ...
    def get_show_fallback(self) -> bool: ...
    def get_show_other(self) -> bool: ...
    def get_show_recommended(self) -> bool: ...
    def set_default_text(self, text: str) -> None: ...
    def set_show_all(self, setting: bool) -> None: ...
    def set_show_default(self, setting: bool) -> None: ...
    def set_show_fallback(self, setting: bool) -> None: ...
    def set_show_other(self, setting: bool) -> None: ...
    def set_show_recommended(self, setting: bool) -> None: ...

class Application(Gio.Application, Gio.ActionGroup, Gio.ActionMap): 
    @classmethod
    def new(cls, application_id: str, flags: Gio.ApplicationFlags) -> Application: ...
    def add_accelerator(self, accelerator: str, action_name: str, parameter: GLib.Variant) -> None: ...
    def add_window(self, window: Window) -> None: ...
    def get_accels_for_action(self, detailed_action_name: str) -> list[str]: ...
    def get_actions_for_accel(self, accel: str) -> list[str]: ...
    def get_active_window(self) -> Window: ...
    def get_app_menu(self) -> Gio.MenuModel: ...
    def get_menu_by_id(self, id: str) -> Gio.Menu: ...
    def get_menubar(self) -> Gio.MenuModel: ...
    def get_window_by_id(self, id: int) -> Window: ...
    def get_windows(self) -> GLib.List: ...
    def inhibit(self, window: Window, flags: ApplicationInhibitFlags, reason: str) -> int: ...
    def is_inhibited(self, flags: ApplicationInhibitFlags) -> bool: ...
    def list_action_descriptions(self) -> list[str]: ...
    def prefers_app_menu(self) -> bool: ...
    def remove_accelerator(self, action_name: str, parameter: GLib.Variant) -> None: ...
    def remove_window(self, window: Window) -> None: ...
    def set_accels_for_action(self, detailed_action_name: str, accels: list[str]) -> None: ...
    def set_app_menu(self, app_menu: Gio.MenuModel) -> None: ...
    def set_menubar(self, menubar: Gio.MenuModel) -> None: ...
    def uninhibit(self, cookie: int) -> None: ...

class ApplicationWindow(Window, Atk.ImplementorIface, Gio.ActionGroup, Gio.ActionMap, Buildable): 
    @classmethod
    def new(cls, application: Application) -> Widget: ...
    def get_help_overlay(self) -> ShortcutsWindow: ...
    def get_id(self) -> int: ...
    def get_show_menubar(self) -> bool: ...
    def set_help_overlay(self, help_overlay: ShortcutsWindow) -> None: ...
    def set_show_menubar(self, show_menubar: bool) -> None: ...

class Arrow(Misc, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls, arrow_type: ArrowType, shadow_type: ShadowType) -> Widget: ...
    def set(self, arrow_type: ArrowType, shadow_type: ShadowType) -> None: ...

class ArrowAccessible(WidgetAccessible, Atk.Component, Atk.Image): ...

class AspectFrame(Frame, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls, label: str, xalign: float, yalign: float, ratio: float, obey_child: bool) -> Widget: ...
    def set(self, xalign: float, yalign: float, ratio: float, obey_child: bool) -> None: ...

class Assistant(Window, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls) -> Widget: ...
    def add_action_widget(self, child: Widget) -> None: ...
    def append_page(self, page: Widget) -> int: ...
    def commit(self) -> None: ...
    def get_current_page(self) -> int: ...
    def get_n_pages(self) -> int: ...
    def get_nth_page(self, page_num: int) -> Widget: ...
    def get_page_complete(self, page: Widget) -> bool: ...
    def get_page_has_padding(self, page: Widget) -> bool: ...
    def get_page_header_image(self, page: Widget) -> GdkPixbuf.Pixbuf: ...
    def get_page_side_image(self, page: Widget) -> GdkPixbuf.Pixbuf: ...
    def get_page_title(self, page: Widget) -> str: ...
    def get_page_type(self, page: Widget) -> AssistantPageType: ...
    def insert_page(self, page: Widget, position: int) -> int: ...
    def next_page(self) -> None: ...
    def prepend_page(self, page: Widget) -> int: ...
    def previous_page(self) -> None: ...
    def remove_action_widget(self, child: Widget) -> None: ...
    def remove_page(self, page_num: int) -> None: ...
    def set_current_page(self, page_num: int) -> None: ...
    def set_forward_page_func(self, page_func: AssistantPageFunc, data: object, destroy: GLib.DestroyNotify) -> None: ...
    def set_page_complete(self, page: Widget, complete: bool) -> None: ...
    def set_page_has_padding(self, page: Widget, has_padding: bool) -> None: ...
    def set_page_header_image(self, page: Widget, pixbuf: GdkPixbuf.Pixbuf) -> None: ...
    def set_page_side_image(self, page: Widget, pixbuf: GdkPixbuf.Pixbuf) -> None: ...
    def set_page_title(self, page: Widget, title: str) -> None: ...
    def set_page_type(self, page: Widget, type: AssistantPageType) -> None: ...
    def update_buttons_state(self) -> None: ...

class Bin(Container, Atk.ImplementorIface, Buildable): 
    def get_child(self) -> Widget: ...

class BooleanCellAccessible(RendererCellAccessible, Atk.Action, Atk.Component, Atk.TableCell): ...

class Box(Container, Atk.ImplementorIface, Buildable, Orientable): 
    @classmethod
    def new(cls, orientation: Orientation, spacing: int) -> Widget: ...
    def get_baseline_position(self) -> BaselinePosition: ...
    def get_center_widget(self) -> Widget: ...
    def get_homogeneous(self) -> bool: ...
    def get_spacing(self) -> int: ...
    def pack_end(self, child: Widget, expand: bool, fill: bool, padding: int) -> None: ...
    def pack_start(self, child: Widget, expand: bool, fill: bool, padding: int) -> None: ...
    def query_child_packing(self, child: Widget, expand: bool, fill: bool, padding: int, pack_type: PackType) -> None: ...
    def reorder_child(self, child: Widget, position: int) -> None: ...
    def set_baseline_position(self, position: BaselinePosition) -> None: ...
    def set_center_widget(self, widget: Widget) -> None: ...
    def set_child_packing(self, child: Widget, expand: bool, fill: bool, padding: int, pack_type: PackType) -> None: ...
    def set_homogeneous(self, homogeneous: bool) -> None: ...
    def set_spacing(self, spacing: int) -> None: ...

class Builder(GObject.Object): 
    @classmethod
    def new(cls) -> Builder: ...
    def add_callback_symbol(self, callback_name: str, callback_symbol: GObject.Callback) -> None: ...
    def add_callback_symbols(self, first_callback_name: str, first_callback_symbol: GObject.Callback) -> None: ...
    def add_from_file(self, filename: str) -> int: ...
    def add_from_resource(self, resource_path: str) -> int: ...
    def add_from_string(self, buffer: str, length: gsize) -> int: ...
    def add_objects_from_file(self, filename: str, object_ids: list[str]) -> int: ...
    def add_objects_from_resource(self, resource_path: str, object_ids: list[str]) -> int: ...
    def add_objects_from_string(self, buffer: str, length: gsize, object_ids: list[str]) -> int: ...
    def connect_signals(self, user_data: object) -> None: ...
    def connect_signals_full(self, func: BuilderConnectFunc, user_data: object) -> None: ...
    def expose_object(self, name: str, object: GObject.Object) -> None: ...
    def extend_with_template(self, widget: Widget, template_type: GObject.Type, buffer: str, length: gsize) -> int: ...
    def get_application(self) -> Application: ...
    def get_object(self, name: str) -> GObject.Object: ...
    def get_objects(self) -> GLib.SList: ...
    def get_translation_domain(self) -> str: ...
    def get_type_from_name(self, type_name: str) -> GObject.Type: ...
    def lookup_callback_symbol(self, callback_name: str) -> GObject.Callback: ...
    def set_application(self, application: Application) -> None: ...
    def set_translation_domain(self, domain: str) -> None: ...
    def value_from_string(self, pspec: GObject.ParamSpec, string: str, value: GObject.Value) -> bool: ...
    def value_from_string_type(self, type: GObject.Type, string: str, value: GObject.Value) -> bool: ...

class Button(Bin, Atk.ImplementorIface, Actionable, Activatable, Buildable): 
    @classmethod
    def new(cls) -> Widget: ...
    def clicked(self) -> None: ...
    def enter(self) -> None: ...
    def get_alignment(self, xalign: float, yalign: float) -> None: ...
    def get_always_show_image(self) -> bool: ...
    def get_event_window(self) -> Gdk.Window: ...
    def get_focus_on_click(self) -> bool: ...
    def get_image(self) -> Widget: ...
    def get_image_position(self) -> PositionType: ...
    def get_label(self) -> str: ...
    def get_relief(self) -> ReliefStyle: ...
    def get_use_stock(self) -> bool: ...
    def get_use_underline(self) -> bool: ...
    def leave(self) -> None: ...
    def pressed(self) -> None: ...
    def released(self) -> None: ...
    def set_alignment(self, xalign: float, yalign: float) -> None: ...
    def set_always_show_image(self, always_show: bool) -> None: ...
    def set_focus_on_click(self, focus_on_click: bool) -> None: ...
    def set_image(self, image: Widget) -> None: ...
    def set_image_position(self, position: PositionType) -> None: ...
    def set_label(self, label: str) -> None: ...
    def set_relief(self, relief: ReliefStyle) -> None: ...
    def set_use_stock(self, use_stock: bool) -> None: ...
    def set_use_underline(self, use_underline: bool) -> None: ...

class ButtonAccessible(ContainerAccessible, Atk.Action, Atk.Component, Atk.Image): ...

class ButtonBox(Box, Atk.ImplementorIface, Buildable, Orientable): 
    @classmethod
    def new(cls, orientation: Orientation) -> Widget: ...
    def get_child_non_homogeneous(self, child: Widget) -> bool: ...
    def get_child_secondary(self, child: Widget) -> bool: ...
    def get_layout(self) -> ButtonBoxStyle: ...
    def set_child_non_homogeneous(self, child: Widget, non_homogeneous: bool) -> None: ...
    def set_child_secondary(self, child: Widget, is_secondary: bool) -> None: ...
    def set_layout(self, layout_style: ButtonBoxStyle) -> None: ...

class Calendar(Widget, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls) -> Widget: ...
    def clear_marks(self) -> None: ...
    def get_date(self, year: int, month: int, day: int) -> None: ...
    def get_day_is_marked(self, day: int) -> bool: ...
    def get_detail_height_rows(self) -> int: ...
    def get_detail_width_chars(self) -> int: ...
    def get_display_options(self) -> CalendarDisplayOptions: ...
    def mark_day(self, day: int) -> None: ...
    def select_day(self, day: int) -> None: ...
    def select_month(self, month: int, year: int) -> None: ...
    def set_detail_func(self, func: CalendarDetailFunc, data: object, destroy: GLib.DestroyNotify) -> None: ...
    def set_detail_height_rows(self, rows: int) -> None: ...
    def set_detail_width_chars(self, chars: int) -> None: ...
    def set_display_options(self, flags: CalendarDisplayOptions) -> None: ...
    def unmark_day(self, day: int) -> None: ...

class CellAccessible(Accessible, Atk.Action, Atk.Component, Atk.TableCell): ...

class CellArea(GObject.InitiallyUnowned, Buildable, CellLayout): 
    def activate(self, context: CellAreaContext, widget: Widget, cell_area: Gdk.Rectangle, flags: CellRendererState, edit_only: bool) -> bool: ...
    def activate_cell(self, widget: Widget, renderer: CellRenderer, event: Gdk.Event, cell_area: Gdk.Rectangle, flags: CellRendererState) -> bool: ...
    def add(self, renderer: CellRenderer) -> None: ...
    def add_focus_sibling(self, renderer: CellRenderer, sibling: CellRenderer) -> None: ...
    def add_with_properties(self, renderer: CellRenderer, first_prop_name: str) -> None: ...
    def apply_attributes(self, tree_model: TreeModel, iter: TreeIter, is_expander: bool, is_expanded: bool) -> None: ...
    def attribute_connect(self, renderer: CellRenderer, attribute: str, column: int) -> None: ...
    def attribute_disconnect(self, renderer: CellRenderer, attribute: str) -> None: ...
    def attribute_get_column(self, renderer: CellRenderer, attribute: str) -> int: ...
    def cell_get(self, renderer: CellRenderer, first_prop_name: str) -> None: ...
    def cell_get_property(self, renderer: CellRenderer, property_name: str, value: GObject.Value) -> None: ...
    def cell_get_valist(self, renderer: CellRenderer, first_property_name: str, var_args: va_list) -> None: ...
    def cell_set(self, renderer: CellRenderer, first_prop_name: str) -> None: ...
    def cell_set_property(self, renderer: CellRenderer, property_name: str, value: GObject.Value) -> None: ...
    def cell_set_valist(self, renderer: CellRenderer, first_property_name: str, var_args: va_list) -> None: ...
    def copy_context(self, context: CellAreaContext) -> CellAreaContext: ...
    def create_context(self) -> CellAreaContext: ...
    def event(self, context: CellAreaContext, widget: Widget, event: Gdk.Event, cell_area: Gdk.Rectangle, flags: CellRendererState) -> int: ...
    def focus(self, direction: DirectionType) -> bool: ...
    def foreach(self, callback: CellCallback, callback_data: object) -> None: ...
    def foreach_alloc(self, context: CellAreaContext, widget: Widget, cell_area: Gdk.Rectangle, background_area: Gdk.Rectangle, callback: CellAllocCallback, callback_data: object) -> None: ...
    def get_cell_allocation(self, context: CellAreaContext, widget: Widget, renderer: CellRenderer, cell_area: Gdk.Rectangle, allocation: Gdk.Rectangle) -> None: ...
    def get_cell_at_position(self, context: CellAreaContext, widget: Widget, cell_area: Gdk.Rectangle, x: int, y: int, alloc_area: Gdk.Rectangle) -> CellRenderer: ...
    def get_current_path_string(self) -> str: ...
    def get_edit_widget(self) -> CellEditable: ...
    def get_edited_cell(self) -> CellRenderer: ...
    def get_focus_cell(self) -> CellRenderer: ...
    def get_focus_from_sibling(self, renderer: CellRenderer) -> CellRenderer: ...
    def get_focus_siblings(self, renderer: CellRenderer) -> GLib.List: ...
    def get_preferred_height(self, context: CellAreaContext, widget: Widget, minimum_height: int, natural_height: int) -> None: ...
    def get_preferred_height_for_width(self, context: CellAreaContext, widget: Widget, width: int, minimum_height: int, natural_height: int) -> None: ...
    def get_preferred_width(self, context: CellAreaContext, widget: Widget, minimum_width: int, natural_width: int) -> None: ...
    def get_preferred_width_for_height(self, context: CellAreaContext, widget: Widget, height: int, minimum_width: int, natural_width: int) -> None: ...
    def get_request_mode(self) -> SizeRequestMode: ...
    def has_renderer(self, renderer: CellRenderer) -> bool: ...
    def inner_cell_area(self, widget: Widget, cell_area: Gdk.Rectangle, inner_area: Gdk.Rectangle) -> None: ...
    def is_activatable(self) -> bool: ...
    def is_focus_sibling(self, renderer: CellRenderer, sibling: CellRenderer) -> bool: ...
    def remove(self, renderer: CellRenderer) -> None: ...
    def remove_focus_sibling(self, renderer: CellRenderer, sibling: CellRenderer) -> None: ...
    def render(self, context: CellAreaContext, widget: Widget, cr: cairo.Context, background_area: Gdk.Rectangle, cell_area: Gdk.Rectangle, flags: CellRendererState, paint_focus: bool) -> None: ...
    def request_renderer(self, renderer: CellRenderer, orientation: Orientation, widget: Widget, for_size: int, minimum_size: int, natural_size: int) -> None: ...
    def set_focus_cell(self, renderer: CellRenderer) -> None: ...
    def stop_editing(self, canceled: bool) -> None: ...

class CellAreaBox(CellArea, Buildable, CellLayout, Orientable): 
    @classmethod
    def new(cls) -> CellArea: ...
    def get_spacing(self) -> int: ...
    def pack_end(self, renderer: CellRenderer, expand: bool, align: bool, fixed: bool) -> None: ...
    def pack_start(self, renderer: CellRenderer, expand: bool, align: bool, fixed: bool) -> None: ...
    def set_spacing(self, spacing: int) -> None: ...

class CellAreaContext(GObject.Object): 
    def allocate(self, width: int, height: int) -> None: ...
    def get_allocation(self, width: int, height: int) -> None: ...
    def get_area(self) -> CellArea: ...
    def get_preferred_height(self, minimum_height: int, natural_height: int) -> None: ...
    def get_preferred_height_for_width(self, width: int, minimum_height: int, natural_height: int) -> None: ...
    def get_preferred_width(self, minimum_width: int, natural_width: int) -> None: ...
    def get_preferred_width_for_height(self, height: int, minimum_width: int, natural_width: int) -> None: ...
    def push_preferred_height(self, minimum_height: int, natural_height: int) -> None: ...
    def push_preferred_width(self, minimum_width: int, natural_width: int) -> None: ...
    def reset(self) -> None: ...

class CellRenderer(GObject.InitiallyUnowned): 
    def activate(self, event: Gdk.Event, widget: Widget, path: str, background_area: Gdk.Rectangle, cell_area: Gdk.Rectangle, flags: CellRendererState) -> bool: ...
    def get_aligned_area(self, widget: Widget, flags: CellRendererState, cell_area: Gdk.Rectangle, aligned_area: Gdk.Rectangle) -> None: ...
    def get_alignment(self, xalign: float, yalign: float) -> None: ...
    def get_fixed_size(self, width: int, height: int) -> None: ...
    def get_padding(self, xpad: int, ypad: int) -> None: ...
    def get_preferred_height(self, widget: Widget, minimum_size: int, natural_size: int) -> None: ...
    def get_preferred_height_for_width(self, widget: Widget, width: int, minimum_height: int, natural_height: int) -> None: ...
    def get_preferred_size(self, widget: Widget, minimum_size: Requisition, natural_size: Requisition) -> None: ...
    def get_preferred_width(self, widget: Widget, minimum_size: int, natural_size: int) -> None: ...
    def get_preferred_width_for_height(self, widget: Widget, height: int, minimum_width: int, natural_width: int) -> None: ...
    def get_request_mode(self) -> SizeRequestMode: ...
    def get_sensitive(self) -> bool: ...
    def get_size(self, widget: Widget, cell_area: Gdk.Rectangle, x_offset: int, y_offset: int, width: int, height: int) -> None: ...
    def get_state(self, widget: Widget, cell_state: CellRendererState) -> StateFlags: ...
    def get_visible(self) -> bool: ...
    def is_activatable(self) -> bool: ...
    def render(self, cr: cairo.Context, widget: Widget, background_area: Gdk.Rectangle, cell_area: Gdk.Rectangle, flags: CellRendererState) -> None: ...
    def set_alignment(self, xalign: float, yalign: float) -> None: ...
    def set_fixed_size(self, width: int, height: int) -> None: ...
    def set_padding(self, xpad: int, ypad: int) -> None: ...
    def set_sensitive(self, sensitive: bool) -> None: ...
    def set_visible(self, visible: bool) -> None: ...
    def start_editing(self, event: Gdk.Event, widget: Widget, path: str, background_area: Gdk.Rectangle, cell_area: Gdk.Rectangle, flags: CellRendererState) -> CellEditable: ...
    def stop_editing(self, canceled: bool) -> None: ...

class CellRendererAccel(CellRendererText): 
    @classmethod
    def new(cls) -> CellRenderer: ...

class CellRendererCombo(CellRendererText): 
    @classmethod
    def new(cls) -> CellRenderer: ...

class CellRendererPixbuf(CellRenderer): 
    @classmethod
    def new(cls) -> CellRenderer: ...

class CellRendererProgress(CellRenderer, Orientable): 
    @classmethod
    def new(cls) -> CellRenderer: ...

class CellRendererSpin(CellRendererText): 
    @classmethod
    def new(cls) -> CellRenderer: ...

class CellRendererSpinner(CellRenderer): 
    @classmethod
    def new(cls) -> CellRenderer: ...

class CellRendererText(CellRenderer): 
    @classmethod
    def new(cls) -> CellRenderer: ...
    def set_fixed_height_from_font(self, number_of_rows: int) -> None: ...

class CellRendererToggle(CellRenderer): 
    @classmethod
    def new(cls) -> CellRenderer: ...
    def get_activatable(self) -> bool: ...
    def get_active(self) -> bool: ...
    def get_radio(self) -> bool: ...
    def set_activatable(self, setting: bool) -> None: ...
    def set_active(self, setting: bool) -> None: ...
    def set_radio(self, radio: bool) -> None: ...

class CellView(Widget, Atk.ImplementorIface, Buildable, CellLayout, Orientable): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_displayed_row(self) -> TreePath: ...
    def get_draw_sensitive(self) -> bool: ...
    def get_fit_model(self) -> bool: ...
    def get_model(self) -> TreeModel: ...
    def get_size_of_row(self, path: TreePath, requisition: Requisition) -> bool: ...
    def set_background_color(self, color: Gdk.Color) -> None: ...
    def set_background_rgba(self, rgba: Gdk.RGBA) -> None: ...
    def set_displayed_row(self, path: TreePath) -> None: ...
    def set_draw_sensitive(self, draw_sensitive: bool) -> None: ...
    def set_fit_model(self, fit_model: bool) -> None: ...
    def set_model(self, model: TreeModel) -> None: ...

class CheckButton(ToggleButton, Atk.ImplementorIface, Actionable, Activatable, Buildable): 
    @classmethod
    def new(cls) -> Widget: ...

class CheckMenuItem(MenuItem, Atk.ImplementorIface, Actionable, Activatable, Buildable): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_active(self) -> bool: ...
    def get_draw_as_radio(self) -> bool: ...
    def get_inconsistent(self) -> bool: ...
    def set_active(self, is_active: bool) -> None: ...
    def set_draw_as_radio(self, draw_as_radio: bool) -> None: ...
    def set_inconsistent(self, setting: bool) -> None: ...
    def toggled(self) -> None: ...

class CheckMenuItemAccessible(MenuItemAccessible, Atk.Action, Atk.Component, Atk.Selection): ...

class Clipboard(GObject.Object): 
    @classmethod
    def get(cls, selection: Gdk.Atom) -> Clipboard: ...
    @classmethod
    def get_default(cls, display: Gdk.Display) -> Clipboard: ...
    @classmethod
    def get_for_display(cls, display: Gdk.Display, selection: Gdk.Atom) -> Clipboard: ...
    def clear(self) -> None: ...
    def get_display(self) -> Gdk.Display: ...
    def get_owner(self) -> GObject.Object: ...
    def get_selection(self) -> Gdk.Atom: ...
    def request_contents(self, target: Gdk.Atom, callback: ClipboardReceivedFunc, user_data: object) -> None: ...
    def request_image(self, callback: ClipboardImageReceivedFunc, user_data: object) -> None: ...
    def request_rich_text(self, buffer: TextBuffer, callback: ClipboardRichTextReceivedFunc, user_data: object) -> None: ...
    def request_targets(self, callback: ClipboardTargetsReceivedFunc, user_data: object) -> None: ...
    def request_text(self, callback: ClipboardTextReceivedFunc, user_data: object) -> None: ...
    def request_uris(self, callback: ClipboardURIReceivedFunc, user_data: object) -> None: ...
    def set_can_store(self, targets: list[TargetEntry], n_targets: int) -> None: ...
    def set_image(self, pixbuf: GdkPixbuf.Pixbuf) -> None: ...
    def set_text(self, text: str, len: int) -> None: ...
    def set_with_data(self, targets: list[TargetEntry], n_targets: int, get_func: ClipboardGetFunc, clear_func: ClipboardClearFunc, user_data: object) -> bool: ...
    def set_with_owner(self, targets: list[TargetEntry], n_targets: int, get_func: ClipboardGetFunc, clear_func: ClipboardClearFunc, owner: GObject.Object) -> bool: ...
    def store(self) -> None: ...
    def wait_for_contents(self, target: Gdk.Atom) -> SelectionData: ...
    def wait_for_image(self) -> GdkPixbuf.Pixbuf: ...
    def wait_for_rich_text(self, buffer: TextBuffer, format: Gdk.Atom, length: gsize) -> list[int]: ...
    def wait_for_targets(self, targets: list[Gdk.Atom], n_targets: int) -> bool: ...
    def wait_for_text(self) -> str: ...
    def wait_for_uris(self) -> list[str]: ...
    def wait_is_image_available(self) -> bool: ...
    def wait_is_rich_text_available(self, buffer: TextBuffer) -> bool: ...
    def wait_is_target_available(self, target: Gdk.Atom) -> bool: ...
    def wait_is_text_available(self) -> bool: ...
    def wait_is_uris_available(self) -> bool: ...

class ColorButton(Button, Atk.ImplementorIface, Actionable, Activatable, Buildable, ColorChooser): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_alpha(self) -> int: ...
    def get_color(self, color: Gdk.Color) -> None: ...
    def get_rgba(self, rgba: Gdk.RGBA) -> None: ...
    def get_title(self) -> str: ...
    def get_use_alpha(self) -> bool: ...
    def set_alpha(self, alpha: int) -> None: ...
    def set_color(self, color: Gdk.Color) -> None: ...
    def set_rgba(self, rgba: Gdk.RGBA) -> None: ...
    def set_title(self, title: str) -> None: ...
    def set_use_alpha(self, use_alpha: bool) -> None: ...

class ColorChooserDialog(Dialog, Atk.ImplementorIface, Buildable, ColorChooser): 
    @classmethod
    def new(cls, title: str, parent: Window) -> Widget: ...

class ColorChooserWidget(Box, Atk.ImplementorIface, Buildable, ColorChooser, Orientable): 
    @classmethod
    def new(cls) -> Widget: ...

class ColorSelection(Box, Atk.ImplementorIface, Buildable, Orientable): 
    @classmethod
    def new(cls) -> Widget: ...
    @classmethod
    def palette_from_string(cls, str: str, colors: list[Gdk.Color], n_colors: int) -> bool: ...
    @classmethod
    def palette_to_string(cls, colors: list[Gdk.Color], n_colors: int) -> str: ...
    @classmethod
    def set_change_palette_with_screen_hook(cls, func: ColorSelectionChangePaletteWithScreenFunc) -> ColorSelectionChangePaletteWithScreenFunc: ...
    def get_current_alpha(self) -> int: ...
    def get_current_color(self, color: Gdk.Color) -> None: ...
    def get_current_rgba(self, rgba: Gdk.RGBA) -> None: ...
    def get_has_opacity_control(self) -> bool: ...
    def get_has_palette(self) -> bool: ...
    def get_previous_alpha(self) -> int: ...
    def get_previous_color(self, color: Gdk.Color) -> None: ...
    def get_previous_rgba(self, rgba: Gdk.RGBA) -> None: ...
    def is_adjusting(self) -> bool: ...
    def set_current_alpha(self, alpha: int) -> None: ...
    def set_current_color(self, color: Gdk.Color) -> None: ...
    def set_current_rgba(self, rgba: Gdk.RGBA) -> None: ...
    def set_has_opacity_control(self, has_opacity: bool) -> None: ...
    def set_has_palette(self, has_palette: bool) -> None: ...
    def set_previous_alpha(self, alpha: int) -> None: ...
    def set_previous_color(self, color: Gdk.Color) -> None: ...
    def set_previous_rgba(self, rgba: Gdk.RGBA) -> None: ...

class ColorSelectionDialog(Dialog, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls, title: str) -> Widget: ...
    def get_color_selection(self) -> Widget: ...

class ComboBox(Bin, Atk.ImplementorIface, Buildable, CellEditable, CellLayout): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_active(self) -> int: ...
    def get_active_id(self) -> str: ...
    def get_active_iter(self, iter: TreeIter) -> bool: ...
    def get_add_tearoffs(self) -> bool: ...
    def get_button_sensitivity(self) -> SensitivityType: ...
    def get_column_span_column(self) -> int: ...
    def get_entry_text_column(self) -> int: ...
    def get_focus_on_click(self) -> bool: ...
    def get_has_entry(self) -> bool: ...
    def get_id_column(self) -> int: ...
    def get_model(self) -> TreeModel: ...
    def get_popup_accessible(self) -> Atk.Object: ...
    def get_popup_fixed_width(self) -> bool: ...
    def get_row_separator_func(self) -> TreeViewRowSeparatorFunc: ...
    def get_row_span_column(self) -> int: ...
    def get_title(self) -> str: ...
    def get_wrap_width(self) -> int: ...
    def popdown(self) -> None: ...
    def popup(self) -> None: ...
    def popup_for_device(self, device: Gdk.Device) -> None: ...
    def set_active(self, index_: int) -> None: ...
    def set_active_id(self, active_id: str) -> bool: ...
    def set_active_iter(self, iter: TreeIter) -> None: ...
    def set_add_tearoffs(self, add_tearoffs: bool) -> None: ...
    def set_button_sensitivity(self, sensitivity: SensitivityType) -> None: ...
    def set_column_span_column(self, column_span: int) -> None: ...
    def set_entry_text_column(self, text_column: int) -> None: ...
    def set_focus_on_click(self, focus_on_click: bool) -> None: ...
    def set_id_column(self, id_column: int) -> None: ...
    def set_model(self, model: TreeModel) -> None: ...
    def set_popup_fixed_width(self, fixed: bool) -> None: ...
    def set_row_separator_func(self, func: TreeViewRowSeparatorFunc, data: object, destroy: GLib.DestroyNotify) -> None: ...
    def set_row_span_column(self, row_span: int) -> None: ...
    def set_title(self, title: str) -> None: ...
    def set_wrap_width(self, width: int) -> None: ...

class ComboBoxAccessible(ContainerAccessible, Atk.Action, Atk.Component, Atk.Selection): ...

class ComboBoxText(ComboBox, Atk.ImplementorIface, Buildable, CellEditable, CellLayout): 
    @classmethod
    def new(cls) -> Widget: ...
    def append(self, id: str, text: str) -> None: ...
    def append_text(self, text: str) -> None: ...
    def get_active_text(self) -> str: ...
    def insert(self, position: int, id: str, text: str) -> None: ...
    def insert_text(self, position: int, text: str) -> None: ...
    def prepend(self, id: str, text: str) -> None: ...
    def prepend_text(self, text: str) -> None: ...
    def remove(self, position: int) -> None: ...
    def remove_all(self) -> None: ...

class Container(Widget, Atk.ImplementorIface, Buildable): 
    def add(self, widget: Widget) -> None: ...
    def add_with_properties(self, widget: Widget, first_prop_name: str) -> None: ...
    def check_resize(self) -> None: ...
    def child_get(self, child: Widget, first_prop_name: str) -> None: ...
    def child_get_property(self, child: Widget, property_name: str, value: GObject.Value) -> None: ...
    def child_get_valist(self, child: Widget, first_property_name: str, var_args: va_list) -> None: ...
    def child_notify(self, child: Widget, child_property: str) -> None: ...
    def child_notify_by_pspec(self, child: Widget, pspec: GObject.ParamSpec) -> None: ...
    def child_set(self, child: Widget, first_prop_name: str) -> None: ...
    def child_set_property(self, child: Widget, property_name: str, value: GObject.Value) -> None: ...
    def child_set_valist(self, child: Widget, first_property_name: str, var_args: va_list) -> None: ...
    def child_type(self) -> GObject.Type: ...
    def forall(self, callback: Callback, callback_data: object) -> None: ...
    def foreach(self, callback: Callback, callback_data: object) -> None: ...
    def get_border_width(self) -> int: ...
    def get_children(self) -> GLib.List: ...
    def get_focus_chain(self, focusable_widgets: GLib.List) -> bool: ...
    def get_focus_child(self) -> Widget: ...
    def get_focus_hadjustment(self) -> Adjustment: ...
    def get_focus_vadjustment(self) -> Adjustment: ...
    def get_path_for_child(self, child: Widget) -> WidgetPath: ...
    def get_resize_mode(self) -> ResizeMode: ...
    def propagate_draw(self, child: Widget, cr: cairo.Context) -> None: ...
    def remove(self, widget: Widget) -> None: ...
    def resize_children(self) -> None: ...
    def set_border_width(self, border_width: int) -> None: ...
    def set_focus_chain(self, focusable_widgets: GLib.List) -> None: ...
    def set_focus_child(self, child: Widget) -> None: ...
    def set_focus_hadjustment(self, adjustment: Adjustment) -> None: ...
    def set_focus_vadjustment(self, adjustment: Adjustment) -> None: ...
    def set_reallocate_redraws(self, needs_redraws: bool) -> None: ...
    def set_resize_mode(self, resize_mode: ResizeMode) -> None: ...
    def unset_focus_chain(self) -> None: ...

class ContainerAccessible(WidgetAccessible, Atk.Component): ...

class ContainerCellAccessible(CellAccessible, Atk.Action, Atk.Component, Atk.TableCell): 
    @classmethod
    def new(cls) -> ContainerCellAccessible: ...
    def add_child(self, child: CellAccessible) -> None: ...
    def get_children(self) -> GLib.List: ...
    def remove_child(self, child: CellAccessible) -> None: ...

class CssProvider(GObject.Object, StyleProvider): 
    @classmethod
    def new(cls) -> CssProvider: ...
    @classmethod
    def get_default(cls) -> CssProvider: ...
    @classmethod
    def get_named(cls, name: str, variant: str) -> CssProvider: ...
    def load_from_data(self, data: list[int], length: gssize) -> bool: ...
    def load_from_file(self, file: Gio.File) -> bool: ...
    def load_from_path(self, path: str) -> bool: ...
    def load_from_resource(self, resource_path: str) -> None: ...
    def to_string(self) -> str: ...

class Dialog(Window, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls) -> Widget: ...
    def add_action_widget(self, child: Widget, response_id: int) -> None: ...
    def add_button(self, button_text: str, response_id: int) -> Widget: ...
    def add_buttons(self, first_button_text: str) -> None: ...
    def get_action_area(self) -> Box: ...
    def get_content_area(self) -> Box: ...
    def get_header_bar(self) -> HeaderBar: ...
    def get_response_for_widget(self, widget: Widget) -> int: ...
    def get_widget_for_response(self, response_id: int) -> Widget: ...
    def response(self, response_id: int) -> None: ...
    def run(self) -> int: ...
    def set_alternative_button_order(self, first_response_id: int) -> None: ...
    def set_alternative_button_order_from_array(self, n_params: int, new_order: list[int]) -> None: ...
    def set_default_response(self, response_id: int) -> None: ...
    def set_response_sensitive(self, response_id: int, setting: bool) -> None: ...

class DrawingArea(Widget, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls) -> Widget: ...

class Entry(Widget, Atk.ImplementorIface, Buildable, CellEditable, Editable): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_activates_default(self) -> bool: ...
    def get_alignment(self) -> float: ...
    def get_attributes(self) -> Pango.AttrList: ...
    def get_buffer(self) -> EntryBuffer: ...
    def get_completion(self) -> EntryCompletion: ...
    def get_current_icon_drag_source(self) -> int: ...
    def get_cursor_hadjustment(self) -> Adjustment: ...
    def get_has_frame(self) -> bool: ...
    def get_icon_activatable(self, icon_pos: EntryIconPosition) -> bool: ...
    def get_icon_area(self, icon_pos: EntryIconPosition, icon_area: Gdk.Rectangle) -> None: ...
    def get_icon_at_pos(self, x: int, y: int) -> int: ...
    def get_icon_gicon(self, icon_pos: EntryIconPosition) -> Gio.Icon: ...
    def get_icon_name(self, icon_pos: EntryIconPosition) -> str: ...
    def get_icon_pixbuf(self, icon_pos: EntryIconPosition) -> GdkPixbuf.Pixbuf: ...
    def get_icon_sensitive(self, icon_pos: EntryIconPosition) -> bool: ...
    def get_icon_stock(self, icon_pos: EntryIconPosition) -> str: ...
    def get_icon_storage_type(self, icon_pos: EntryIconPosition) -> ImageType: ...
    def get_icon_tooltip_markup(self, icon_pos: EntryIconPosition) -> str: ...
    def get_icon_tooltip_text(self, icon_pos: EntryIconPosition) -> str: ...
    def get_inner_border(self) -> Border: ...
    def get_input_hints(self) -> InputHints: ...
    def get_input_purpose(self) -> InputPurpose: ...
    def get_invisible_char(self) -> gunichar: ...
    def get_layout(self) -> Pango.Layout: ...
    def get_layout_offsets(self, x: int, y: int) -> None: ...
    def get_max_length(self) -> int: ...
    def get_max_width_chars(self) -> int: ...
    def get_overwrite_mode(self) -> bool: ...
    def get_placeholder_text(self) -> str: ...
    def get_progress_fraction(self) -> float: ...
    def get_progress_pulse_step(self) -> float: ...
    def get_tabs(self) -> Pango.TabArray: ...
    def get_text(self) -> str: ...
    def get_text_area(self, text_area: Gdk.Rectangle) -> None: ...
    def get_text_length(self) -> int: ...
    def get_visibility(self) -> bool: ...
    def get_width_chars(self) -> int: ...
    def grab_focus_without_selecting(self) -> None: ...
    def im_context_filter_keypress(self, event: Gdk.EventKey) -> bool: ...
    def layout_index_to_text_index(self, layout_index: int) -> int: ...
    def progress_pulse(self) -> None: ...
    def reset_im_context(self) -> None: ...
    def set_activates_default(self, setting: bool) -> None: ...
    def set_alignment(self, xalign: float) -> None: ...
    def set_attributes(self, attrs: Pango.AttrList) -> None: ...
    def set_buffer(self, buffer: EntryBuffer) -> None: ...
    def set_completion(self, completion: EntryCompletion) -> None: ...
    def set_cursor_hadjustment(self, adjustment: Adjustment) -> None: ...
    def set_has_frame(self, setting: bool) -> None: ...
    def set_icon_activatable(self, icon_pos: EntryIconPosition, activatable: bool) -> None: ...
    def set_icon_drag_source(self, icon_pos: EntryIconPosition, target_list: TargetList, actions: Gdk.DragAction) -> None: ...
    def set_icon_from_gicon(self, icon_pos: EntryIconPosition, icon: Gio.Icon) -> None: ...
    def set_icon_from_icon_name(self, icon_pos: EntryIconPosition, icon_name: str) -> None: ...
    def set_icon_from_pixbuf(self, icon_pos: EntryIconPosition, pixbuf: GdkPixbuf.Pixbuf) -> None: ...
    def set_icon_from_stock(self, icon_pos: EntryIconPosition, stock_id: str) -> None: ...
    def set_icon_sensitive(self, icon_pos: EntryIconPosition, sensitive: bool) -> None: ...
    def set_icon_tooltip_markup(self, icon_pos: EntryIconPosition, tooltip: str) -> None: ...
    def set_icon_tooltip_text(self, icon_pos: EntryIconPosition, tooltip: str) -> None: ...
    def set_inner_border(self, border: Border) -> None: ...
    def set_input_hints(self, hints: InputHints) -> None: ...
    def set_input_purpose(self, purpose: InputPurpose) -> None: ...
    def set_invisible_char(self, ch: gunichar) -> None: ...
    def set_max_length(self, max: int) -> None: ...
    def set_max_width_chars(self, n_chars: int) -> None: ...
    def set_overwrite_mode(self, overwrite: bool) -> None: ...
    def set_placeholder_text(self, text: str) -> None: ...
    def set_progress_fraction(self, fraction: float) -> None: ...
    def set_progress_pulse_step(self, fraction: float) -> None: ...
    def set_tabs(self, tabs: Pango.TabArray) -> None: ...
    def set_text(self, text: str) -> None: ...
    def set_visibility(self, visible: bool) -> None: ...
    def set_width_chars(self, n_chars: int) -> None: ...
    def text_index_to_layout_index(self, text_index: int) -> int: ...
    def unset_invisible_char(self) -> None: ...

class EntryAccessible(WidgetAccessible, Atk.Action, Atk.Component, Atk.EditableText, Atk.Text): ...

class EntryBuffer(GObject.Object): 
    @classmethod
    def new(cls, initial_chars: str, n_initial_chars: int) -> EntryBuffer: ...
    def delete_text(self, position: int, n_chars: int) -> int: ...
    def emit_deleted_text(self, position: int, n_chars: int) -> None: ...
    def emit_inserted_text(self, position: int, chars: str, n_chars: int) -> None: ...
    def get_bytes(self) -> gsize: ...
    def get_length(self) -> int: ...
    def get_max_length(self) -> int: ...
    def get_text(self) -> str: ...
    def insert_text(self, position: int, chars: str, n_chars: int) -> int: ...
    def set_max_length(self, max_length: int) -> None: ...
    def set_text(self, chars: str, n_chars: int) -> None: ...

class EntryCompletion(GObject.Object, Buildable, CellLayout): 
    @classmethod
    def new(cls) -> EntryCompletion: ...
    def complete(self) -> None: ...
    def compute_prefix(self, key: str) -> str: ...
    def delete_action(self, index_: int) -> None: ...
    def get_completion_prefix(self) -> str: ...
    def get_entry(self) -> Widget: ...
    def get_inline_completion(self) -> bool: ...
    def get_inline_selection(self) -> bool: ...
    def get_minimum_key_length(self) -> int: ...
    def get_model(self) -> TreeModel: ...
    def get_popup_completion(self) -> bool: ...
    def get_popup_set_width(self) -> bool: ...
    def get_popup_single_match(self) -> bool: ...
    def get_text_column(self) -> int: ...
    def insert_action_markup(self, index_: int, markup: str) -> None: ...
    def insert_action_text(self, index_: int, text: str) -> None: ...
    def insert_prefix(self) -> None: ...
    def set_inline_completion(self, inline_completion: bool) -> None: ...
    def set_inline_selection(self, inline_selection: bool) -> None: ...
    def set_match_func(self, func: EntryCompletionMatchFunc, func_data: object, func_notify: GLib.DestroyNotify) -> None: ...
    def set_minimum_key_length(self, length: int) -> None: ...
    def set_model(self, model: TreeModel) -> None: ...
    def set_popup_completion(self, popup_completion: bool) -> None: ...
    def set_popup_set_width(self, popup_set_width: bool) -> None: ...
    def set_popup_single_match(self, popup_single_match: bool) -> None: ...
    def set_text_column(self, column: int) -> None: ...

class EntryIconAccessible(Atk.Object, Atk.Action, Atk.Component): ...

class EventBox(Bin, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_above_child(self) -> bool: ...
    def get_visible_window(self) -> bool: ...
    def set_above_child(self, above_child: bool) -> None: ...
    def set_visible_window(self, visible_window: bool) -> None: ...

class EventController(GObject.Object): 
    def get_propagation_phase(self) -> PropagationPhase: ...
    def get_widget(self) -> Widget: ...
    def handle_event(self, event: Gdk.Event) -> bool: ...
    def reset(self) -> None: ...
    def set_propagation_phase(self, phase: PropagationPhase) -> None: ...

class EventControllerKey(EventController): 
    @classmethod
    def new(cls, widget: Widget) -> EventController: ...
    def forward(self, widget: Widget) -> bool: ...
    def get_group(self) -> int: ...
    def get_im_context(self) -> IMContext: ...
    def set_im_context(self, im_context: IMContext) -> None: ...

class EventControllerMotion(EventController): 
    @classmethod
    def new(cls, widget: Widget) -> EventController: ...

class EventControllerScroll(EventController): 
    @classmethod
    def new(cls, widget: Widget, flags: EventControllerScrollFlags) -> EventController: ...
    def get_flags(self) -> EventControllerScrollFlags: ...
    def set_flags(self, flags: EventControllerScrollFlags) -> None: ...

class Expander(Bin, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls, label: str) -> Widget: ...
    def get_expanded(self) -> bool: ...
    def get_label(self) -> str: ...
    def get_label_fill(self) -> bool: ...
    def get_label_widget(self) -> Widget: ...
    def get_resize_toplevel(self) -> bool: ...
    def get_spacing(self) -> int: ...
    def get_use_markup(self) -> bool: ...
    def get_use_underline(self) -> bool: ...
    def set_expanded(self, expanded: bool) -> None: ...
    def set_label(self, label: str) -> None: ...
    def set_label_fill(self, label_fill: bool) -> None: ...
    def set_label_widget(self, label_widget: Widget) -> None: ...
    def set_resize_toplevel(self, resize_toplevel: bool) -> None: ...
    def set_spacing(self, spacing: int) -> None: ...
    def set_use_markup(self, use_markup: bool) -> None: ...
    def set_use_underline(self, use_underline: bool) -> None: ...

class ExpanderAccessible(ContainerAccessible, Atk.Action, Atk.Component): ...

class FileChooserButton(Box, Atk.ImplementorIface, Buildable, FileChooser, Orientable): 
    @classmethod
    def new(cls, title: str, action: FileChooserAction) -> Widget: ...
    def get_focus_on_click(self) -> bool: ...
    def get_title(self) -> str: ...
    def get_width_chars(self) -> int: ...
    def set_focus_on_click(self, focus_on_click: bool) -> None: ...
    def set_title(self, title: str) -> None: ...
    def set_width_chars(self, n_chars: int) -> None: ...

class FileChooserDialog(Dialog, Atk.ImplementorIface, Buildable, FileChooser): 
    @classmethod
    def new(cls, title: str, parent: Window, action: FileChooserAction, first_button_text: str) -> Widget: ...

class FileChooserNative(NativeDialog, FileChooser): 
    @classmethod
    def new(cls, title: str, parent: Window, action: FileChooserAction, accept_label: str, cancel_label: str) -> FileChooserNative: ...
    def get_accept_label(self) -> str: ...
    def get_cancel_label(self) -> str: ...
    def set_accept_label(self, accept_label: str) -> None: ...
    def set_cancel_label(self, cancel_label: str) -> None: ...

class FileChooserWidget(Box, Atk.ImplementorIface, Buildable, FileChooser, Orientable): 
    @classmethod
    def new(cls, action: FileChooserAction) -> Widget: ...

class FileChooserWidgetAccessible(ContainerAccessible, Atk.Action, Atk.Component): ...

class FileFilter(GObject.InitiallyUnowned, Buildable): 
    @classmethod
    def new(cls) -> FileFilter: ...
    def add_custom(self, needed: FileFilterFlags, func: FileFilterFunc, data: object, notify: GLib.DestroyNotify) -> None: ...
    def add_mime_type(self, mime_type: str) -> None: ...
    def add_pattern(self, pattern: str) -> None: ...
    def add_pixbuf_formats(self) -> None: ...
    def filter(self, filter_info: FileFilterInfo) -> bool: ...
    def get_name(self) -> str: ...
    def get_needed(self) -> FileFilterFlags: ...
    def set_name(self, name: str) -> None: ...
    def to_gvariant(self) -> GLib.Variant: ...

class Fixed(Container, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls) -> Widget: ...
    def move(self, widget: Widget, x: int, y: int) -> None: ...
    def put(self, widget: Widget, x: int, y: int) -> None: ...

class FlowBox(Container, Atk.ImplementorIface, Buildable, Orientable): 
    @classmethod
    def new(cls) -> Widget: ...
    def bind_model(self, model: Gio.ListModel, create_widget_func: FlowBoxCreateWidgetFunc, user_data: object, user_data_free_func: GLib.DestroyNotify) -> None: ...
    def get_activate_on_single_click(self) -> bool: ...
    def get_child_at_index(self, idx: int) -> FlowBoxChild: ...
    def get_child_at_pos(self, x: int, y: int) -> FlowBoxChild: ...
    def get_column_spacing(self) -> int: ...
    def get_homogeneous(self) -> bool: ...
    def get_max_children_per_line(self) -> int: ...
    def get_min_children_per_line(self) -> int: ...
    def get_row_spacing(self) -> int: ...
    def get_selected_children(self) -> GLib.List: ...
    def get_selection_mode(self) -> SelectionMode: ...
    def insert(self, widget: Widget, position: int) -> None: ...
    def invalidate_filter(self) -> None: ...
    def invalidate_sort(self) -> None: ...
    def select_all(self) -> None: ...
    def select_child(self, child: FlowBoxChild) -> None: ...
    def selected_foreach(self, func: FlowBoxForeachFunc, data: object) -> None: ...
    def set_activate_on_single_click(self, single: bool) -> None: ...
    def set_column_spacing(self, spacing: int) -> None: ...
    def set_filter_func(self, filter_func: FlowBoxFilterFunc, user_data: object, destroy: GLib.DestroyNotify) -> None: ...
    def set_hadjustment(self, adjustment: Adjustment) -> None: ...
    def set_homogeneous(self, homogeneous: bool) -> None: ...
    def set_max_children_per_line(self, n_children: int) -> None: ...
    def set_min_children_per_line(self, n_children: int) -> None: ...
    def set_row_spacing(self, spacing: int) -> None: ...
    def set_selection_mode(self, mode: SelectionMode) -> None: ...
    def set_sort_func(self, sort_func: FlowBoxSortFunc, user_data: object, destroy: GLib.DestroyNotify) -> None: ...
    def set_vadjustment(self, adjustment: Adjustment) -> None: ...
    def unselect_all(self) -> None: ...
    def unselect_child(self, child: FlowBoxChild) -> None: ...

class FlowBoxAccessible(ContainerAccessible, Atk.Component, Atk.Selection): ...

class FlowBoxChild(Bin, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls) -> Widget: ...
    def changed(self) -> None: ...
    def get_index(self) -> int: ...
    def is_selected(self) -> bool: ...

class FlowBoxChildAccessible(ContainerAccessible, Atk.Component): ...

class FontButton(Button, Atk.ImplementorIface, Actionable, Activatable, Buildable, FontChooser): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_font_name(self) -> str: ...
    def get_show_size(self) -> bool: ...
    def get_show_style(self) -> bool: ...
    def get_title(self) -> str: ...
    def get_use_font(self) -> bool: ...
    def get_use_size(self) -> bool: ...
    def set_font_name(self, fontname: str) -> bool: ...
    def set_show_size(self, show_size: bool) -> None: ...
    def set_show_style(self, show_style: bool) -> None: ...
    def set_title(self, title: str) -> None: ...
    def set_use_font(self, use_font: bool) -> None: ...
    def set_use_size(self, use_size: bool) -> None: ...

class FontChooserDialog(Dialog, Atk.ImplementorIface, Buildable, FontChooser): 
    @classmethod
    def new(cls, title: str, parent: Window) -> Widget: ...

class FontChooserWidget(Box, Atk.ImplementorIface, Buildable, FontChooser, Orientable): 
    @classmethod
    def new(cls) -> Widget: ...

class FontSelection(Box, Atk.ImplementorIface, Buildable, Orientable): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_face(self) -> Pango.FontFace: ...
    def get_face_list(self) -> Widget: ...
    def get_family(self) -> Pango.FontFamily: ...
    def get_family_list(self) -> Widget: ...
    def get_font_name(self) -> str: ...
    def get_preview_entry(self) -> Widget: ...
    def get_preview_text(self) -> str: ...
    def get_size(self) -> int: ...
    def get_size_entry(self) -> Widget: ...
    def get_size_list(self) -> Widget: ...
    def set_font_name(self, fontname: str) -> bool: ...
    def set_preview_text(self, text: str) -> None: ...

class FontSelectionDialog(Dialog, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls, title: str) -> Widget: ...
    def get_cancel_button(self) -> Widget: ...
    def get_font_name(self) -> str: ...
    def get_font_selection(self) -> Widget: ...
    def get_ok_button(self) -> Widget: ...
    def get_preview_text(self) -> str: ...
    def set_font_name(self, fontname: str) -> bool: ...
    def set_preview_text(self, text: str) -> None: ...

class Frame(Bin, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls, label: str) -> Widget: ...
    def get_label(self) -> str: ...
    def get_label_align(self, xalign: float, yalign: float) -> None: ...
    def get_label_widget(self) -> Widget: ...
    def get_shadow_type(self) -> ShadowType: ...
    def set_label(self, label: str) -> None: ...
    def set_label_align(self, xalign: float, yalign: float) -> None: ...
    def set_label_widget(self, label_widget: Widget) -> None: ...
    def set_shadow_type(self, type: ShadowType) -> None: ...

class FrameAccessible(ContainerAccessible, Atk.Component): ...

class GLArea(Widget, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls) -> Widget: ...
    def attach_buffers(self) -> None: ...
    def get_auto_render(self) -> bool: ...
    def get_context(self) -> Gdk.GLContext: ...
    def get_error(self) -> GLib.Error: ...
    def get_has_alpha(self) -> bool: ...
    def get_has_depth_buffer(self) -> bool: ...
    def get_has_stencil_buffer(self) -> bool: ...
    def get_required_version(self, major: int, minor: int) -> None: ...
    def get_use_es(self) -> bool: ...
    def make_current(self) -> None: ...
    def queue_render(self) -> None: ...
    def set_auto_render(self, auto_render: bool) -> None: ...
    def set_error(self, error: GLib.Error) -> None: ...
    def set_has_alpha(self, has_alpha: bool) -> None: ...
    def set_has_depth_buffer(self, has_depth_buffer: bool) -> None: ...
    def set_has_stencil_buffer(self, has_stencil_buffer: bool) -> None: ...
    def set_required_version(self, major: int, minor: int) -> None: ...
    def set_use_es(self, use_es: bool) -> None: ...

class Gesture(EventController): 
    def get_bounding_box(self, rect: Gdk.Rectangle) -> bool: ...
    def get_bounding_box_center(self, x: float, y: float) -> bool: ...
    def get_device(self) -> Gdk.Device: ...
    def get_group(self) -> GLib.List: ...
    def get_last_event(self, sequence: Gdk.EventSequence) -> Gdk.Event: ...
    def get_last_updated_sequence(self) -> Gdk.EventSequence: ...
    def get_point(self, sequence: Gdk.EventSequence, x: float, y: float) -> bool: ...
    def get_sequence_state(self, sequence: Gdk.EventSequence) -> EventSequenceState: ...
    def get_sequences(self) -> GLib.List: ...
    def get_window(self) -> Gdk.Window: ...
    def group(self, gesture: Gesture) -> None: ...
    def handles_sequence(self, sequence: Gdk.EventSequence) -> bool: ...
    def is_active(self) -> bool: ...
    def is_grouped_with(self, other: Gesture) -> bool: ...
    def is_recognized(self) -> bool: ...
    def set_sequence_state(self, sequence: Gdk.EventSequence, state: EventSequenceState) -> bool: ...
    def set_state(self, state: EventSequenceState) -> bool: ...
    def set_window(self, window: Gdk.Window) -> None: ...
    def ungroup(self) -> None: ...

class GestureDrag(GestureSingle): 
    @classmethod
    def new(cls, widget: Widget) -> Gesture: ...
    def get_offset(self, x: float, y: float) -> bool: ...
    def get_start_point(self, x: float, y: float) -> bool: ...

class GestureLongPress(GestureSingle): 
    @classmethod
    def new(cls, widget: Widget) -> Gesture: ...

class GestureMultiPress(GestureSingle): 
    @classmethod
    def new(cls, widget: Widget) -> Gesture: ...
    def get_area(self, rect: Gdk.Rectangle) -> bool: ...
    def set_area(self, rect: Gdk.Rectangle) -> None: ...

class GesturePan(GestureDrag): 
    @classmethod
    def new(cls, widget: Widget, orientation: Orientation) -> Gesture: ...
    def get_orientation(self) -> Orientation: ...
    def set_orientation(self, orientation: Orientation) -> None: ...

class GestureRotate(Gesture): 
    @classmethod
    def new(cls, widget: Widget) -> Gesture: ...
    def get_angle_delta(self) -> float: ...

class GestureSingle(Gesture): 
    def get_button(self) -> int: ...
    def get_current_button(self) -> int: ...
    def get_current_sequence(self) -> Gdk.EventSequence: ...
    def get_exclusive(self) -> bool: ...
    def get_touch_only(self) -> bool: ...
    def set_button(self, button: int) -> None: ...
    def set_exclusive(self, exclusive: bool) -> None: ...
    def set_touch_only(self, touch_only: bool) -> None: ...

class GestureStylus(GestureSingle): 
    @classmethod
    def new(cls, widget: Widget) -> Gesture: ...
    def get_axes(self, axes: list[Gdk.AxisUse], values: list[float]) -> bool: ...
    def get_axis(self, axis: Gdk.AxisUse, value: float) -> bool: ...
    def get_device_tool(self) -> Gdk.DeviceTool: ...

class GestureSwipe(GestureSingle): 
    @classmethod
    def new(cls, widget: Widget) -> Gesture: ...
    def get_velocity(self, velocity_x: float, velocity_y: float) -> bool: ...

class GestureZoom(Gesture): 
    @classmethod
    def new(cls, widget: Widget) -> Gesture: ...
    def get_scale_delta(self) -> float: ...

class Grid(Container, Atk.ImplementorIface, Buildable, Orientable): 
    @classmethod
    def new(cls) -> Widget: ...
    def attach(self, child: Widget, left: int, top: int, width: int, height: int) -> None: ...
    def attach_next_to(self, child: Widget, sibling: Widget, side: PositionType, width: int, height: int) -> None: ...
    def get_baseline_row(self) -> int: ...
    def get_child_at(self, left: int, top: int) -> Widget: ...
    def get_column_homogeneous(self) -> bool: ...
    def get_column_spacing(self) -> int: ...
    def get_row_baseline_position(self, row: int) -> BaselinePosition: ...
    def get_row_homogeneous(self) -> bool: ...
    def get_row_spacing(self) -> int: ...
    def insert_column(self, position: int) -> None: ...
    def insert_next_to(self, sibling: Widget, side: PositionType) -> None: ...
    def insert_row(self, position: int) -> None: ...
    def remove_column(self, position: int) -> None: ...
    def remove_row(self, position: int) -> None: ...
    def set_baseline_row(self, row: int) -> None: ...
    def set_column_homogeneous(self, homogeneous: bool) -> None: ...
    def set_column_spacing(self, spacing: int) -> None: ...
    def set_row_baseline_position(self, row: int, pos: BaselinePosition) -> None: ...
    def set_row_homogeneous(self, homogeneous: bool) -> None: ...
    def set_row_spacing(self, spacing: int) -> None: ...

class HBox(Box, Atk.ImplementorIface, Buildable, Orientable): 
    @classmethod
    def new(cls, homogeneous: bool, spacing: int) -> Widget: ...

class HButtonBox(ButtonBox, Atk.ImplementorIface, Buildable, Orientable): 
    @classmethod
    def new(cls) -> Widget: ...

class HPaned(Paned, Atk.ImplementorIface, Buildable, Orientable): 
    @classmethod
    def new(cls) -> Widget: ...

class HSV(Widget, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls) -> Widget: ...
    @classmethod
    def to_rgb(cls, h: float, s: float, v: float, r: float, g: float, b: float) -> None: ...
    def get_color(self, h: float, s: float, v: float) -> None: ...
    def get_metrics(self, size: int, ring_width: int) -> None: ...
    def is_adjusting(self) -> bool: ...
    def set_color(self, h: float, s: float, v: float) -> None: ...
    def set_metrics(self, size: int, ring_width: int) -> None: ...

class HScale(Scale, Atk.ImplementorIface, Buildable, Orientable): 
    @classmethod
    def new(cls, adjustment: Adjustment) -> Widget: ...

class HScrollbar(Scrollbar, Atk.ImplementorIface, Buildable, Orientable): 
    @classmethod
    def new(cls, adjustment: Adjustment) -> Widget: ...

class HSeparator(Separator, Atk.ImplementorIface, Buildable, Orientable): 
    @classmethod
    def new(cls) -> Widget: ...

class HandleBox(Bin, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_child_detached(self) -> bool: ...
    def get_handle_position(self) -> PositionType: ...
    def get_shadow_type(self) -> ShadowType: ...
    def get_snap_edge(self) -> PositionType: ...
    def set_handle_position(self, position: PositionType) -> None: ...
    def set_shadow_type(self, type: ShadowType) -> None: ...
    def set_snap_edge(self, edge: PositionType) -> None: ...

class HeaderBar(Container, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_custom_title(self) -> Widget: ...
    def get_decoration_layout(self) -> str: ...
    def get_has_subtitle(self) -> bool: ...
    def get_show_close_button(self) -> bool: ...
    def get_subtitle(self) -> str: ...
    def get_title(self) -> str: ...
    def pack_end(self, child: Widget) -> None: ...
    def pack_start(self, child: Widget) -> None: ...
    def set_custom_title(self, title_widget: Widget) -> None: ...
    def set_decoration_layout(self, layout: str) -> None: ...
    def set_has_subtitle(self, setting: bool) -> None: ...
    def set_show_close_button(self, setting: bool) -> None: ...
    def set_subtitle(self, subtitle: str) -> None: ...
    def set_title(self, title: str) -> None: ...

class HeaderBarAccessible(ContainerAccessible, Atk.Component): ...

class IMContext(GObject.Object): 
    def delete_surrounding(self, offset: int, n_chars: int) -> bool: ...
    def filter_keypress(self, event: Gdk.EventKey) -> bool: ...
    def focus_in(self) -> None: ...
    def focus_out(self) -> None: ...
    def get_preedit_string(self, str: str, attrs: Pango.AttrList, cursor_pos: int) -> None: ...
    def get_surrounding(self, text: str, cursor_index: int) -> bool: ...
    def reset(self) -> None: ...
    def set_client_window(self, window: Gdk.Window) -> None: ...
    def set_cursor_location(self, area: Gdk.Rectangle) -> None: ...
    def set_surrounding(self, text: str, len: int, cursor_index: int) -> None: ...
    def set_use_preedit(self, use_preedit: bool) -> None: ...

class IMContextSimple(IMContext): 
    @classmethod
    def new(cls) -> IMContext: ...
    def add_compose_file(self, compose_file: str) -> None: ...
    def add_table(self, data: list[int], max_seq_len: int, n_seqs: int) -> None: ...

class IMMulticontext(IMContext): 
    @classmethod
    def new(cls) -> IMContext: ...
    def append_menuitems(self, menushell: MenuShell) -> None: ...
    def get_context_id(self) -> str: ...
    def set_context_id(self, context_id: str) -> None: ...

class IconFactory(GObject.Object, Buildable): 
    @classmethod
    def new(cls) -> IconFactory: ...
    @classmethod
    def lookup_default(cls, stock_id: str) -> IconSet: ...
    def add(self, stock_id: str, icon_set: IconSet) -> None: ...
    def add_default(self) -> None: ...
    def lookup(self, stock_id: str) -> IconSet: ...
    def remove_default(self) -> None: ...

class IconInfo(GObject.Object): 
    @classmethod
    def new_for_pixbuf(cls, icon_theme: IconTheme, pixbuf: GdkPixbuf.Pixbuf) -> IconInfo: ...
    def copy(self) -> IconInfo: ...
    def free(self) -> None: ...
    def get_attach_points(self, points: list[Gdk.Point], n_points: int) -> bool: ...
    def get_base_scale(self) -> int: ...
    def get_base_size(self) -> int: ...
    def get_builtin_pixbuf(self) -> GdkPixbuf.Pixbuf: ...
    def get_display_name(self) -> str: ...
    def get_embedded_rect(self, rectangle: Gdk.Rectangle) -> bool: ...
    def get_filename(self) -> filename: ...
    def is_symbolic(self) -> bool: ...
    def load_icon(self) -> GdkPixbuf.Pixbuf: ...
    def load_icon_async(self, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: object) -> None: ...
    def load_icon_finish(self, res: Gio.AsyncResult) -> GdkPixbuf.Pixbuf: ...
    def load_surface(self, for_window: Gdk.Window) -> cairo.Surface: ...
    def load_symbolic(self, fg: Gdk.RGBA, success_color: Gdk.RGBA, warning_color: Gdk.RGBA, error_color: Gdk.RGBA, was_symbolic: bool) -> GdkPixbuf.Pixbuf: ...
    def load_symbolic_async(self, fg: Gdk.RGBA, success_color: Gdk.RGBA, warning_color: Gdk.RGBA, error_color: Gdk.RGBA, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: object) -> None: ...
    def load_symbolic_finish(self, res: Gio.AsyncResult, was_symbolic: bool) -> GdkPixbuf.Pixbuf: ...
    def load_symbolic_for_context(self, context: StyleContext, was_symbolic: bool) -> GdkPixbuf.Pixbuf: ...
    def load_symbolic_for_context_async(self, context: StyleContext, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: object) -> None: ...
    def load_symbolic_for_context_finish(self, res: Gio.AsyncResult, was_symbolic: bool) -> GdkPixbuf.Pixbuf: ...
    def load_symbolic_for_style(self, style: Style, state: StateType, was_symbolic: bool) -> GdkPixbuf.Pixbuf: ...
    def set_raw_coordinates(self, raw_coordinates: bool) -> None: ...

class IconTheme(GObject.Object): 
    @classmethod
    def new(cls) -> IconTheme: ...
    @classmethod
    def add_builtin_icon(cls, icon_name: str, size: int, pixbuf: GdkPixbuf.Pixbuf) -> None: ...
    @classmethod
    def get_default(cls) -> IconTheme: ...
    @classmethod
    def get_for_screen(cls, screen: Gdk.Screen) -> IconTheme: ...
    def add_resource_path(self, path: str) -> None: ...
    def append_search_path(self, path: filename) -> None: ...
    def choose_icon(self, icon_names: list[str], size: int, flags: IconLookupFlags) -> IconInfo: ...
    def choose_icon_for_scale(self, icon_names: list[str], size: int, scale: int, flags: IconLookupFlags) -> IconInfo: ...
    def get_example_icon_name(self) -> str: ...
    def get_icon_sizes(self, icon_name: str) -> list[int]: ...
    def get_search_path(self, path: list[filename], n_elements: int) -> None: ...
    def has_icon(self, icon_name: str) -> bool: ...
    def list_contexts(self) -> GLib.List: ...
    def list_icons(self, context: str) -> GLib.List: ...
    def load_icon(self, icon_name: str, size: int, flags: IconLookupFlags) -> GdkPixbuf.Pixbuf: ...
    def load_icon_for_scale(self, icon_name: str, size: int, scale: int, flags: IconLookupFlags) -> GdkPixbuf.Pixbuf: ...
    def load_surface(self, icon_name: str, size: int, scale: int, for_window: Gdk.Window, flags: IconLookupFlags) -> cairo.Surface: ...
    def lookup_by_gicon(self, icon: Gio.Icon, size: int, flags: IconLookupFlags) -> IconInfo: ...
    def lookup_by_gicon_for_scale(self, icon: Gio.Icon, size: int, scale: int, flags: IconLookupFlags) -> IconInfo: ...
    def lookup_icon(self, icon_name: str, size: int, flags: IconLookupFlags) -> IconInfo: ...
    def lookup_icon_for_scale(self, icon_name: str, size: int, scale: int, flags: IconLookupFlags) -> IconInfo: ...
    def prepend_search_path(self, path: filename) -> None: ...
    def rescan_if_needed(self) -> bool: ...
    def set_custom_theme(self, theme_name: str) -> None: ...
    def set_screen(self, screen: Gdk.Screen) -> None: ...
    def set_search_path(self, path: list[filename], n_elements: int) -> None: ...

class IconView(Container, Atk.ImplementorIface, Buildable, CellLayout, Scrollable): 
    @classmethod
    def new(cls) -> Widget: ...
    def convert_widget_to_bin_window_coords(self, wx: int, wy: int, bx: int, by: int) -> None: ...
    def create_drag_icon(self, path: TreePath) -> cairo.Surface: ...
    def enable_model_drag_dest(self, targets: list[TargetEntry], n_targets: int, actions: Gdk.DragAction) -> None: ...
    def enable_model_drag_source(self, start_button_mask: Gdk.ModifierType, targets: list[TargetEntry], n_targets: int, actions: Gdk.DragAction) -> None: ...
    def get_activate_on_single_click(self) -> bool: ...
    def get_cell_rect(self, path: TreePath, cell: CellRenderer, rect: Gdk.Rectangle) -> bool: ...
    def get_column_spacing(self) -> int: ...
    def get_columns(self) -> int: ...
    def get_cursor(self, path: TreePath, cell: CellRenderer) -> bool: ...
    def get_dest_item_at_pos(self, drag_x: int, drag_y: int, path: TreePath, pos: IconViewDropPosition) -> bool: ...
    def get_drag_dest_item(self, path: TreePath, pos: IconViewDropPosition) -> None: ...
    def get_item_at_pos(self, x: int, y: int, path: TreePath, cell: CellRenderer) -> bool: ...
    def get_item_column(self, path: TreePath) -> int: ...
    def get_item_orientation(self) -> Orientation: ...
    def get_item_padding(self) -> int: ...
    def get_item_row(self, path: TreePath) -> int: ...
    def get_item_width(self) -> int: ...
    def get_margin(self) -> int: ...
    def get_markup_column(self) -> int: ...
    def get_model(self) -> TreeModel: ...
    def get_path_at_pos(self, x: int, y: int) -> TreePath: ...
    def get_pixbuf_column(self) -> int: ...
    def get_reorderable(self) -> bool: ...
    def get_row_spacing(self) -> int: ...
    def get_selected_items(self) -> GLib.List: ...
    def get_selection_mode(self) -> SelectionMode: ...
    def get_spacing(self) -> int: ...
    def get_text_column(self) -> int: ...
    def get_tooltip_column(self) -> int: ...
    def get_tooltip_context(self, x: int, y: int, keyboard_tip: bool, model: TreeModel, path: TreePath, iter: TreeIter) -> bool: ...
    def get_visible_range(self, start_path: TreePath, end_path: TreePath) -> bool: ...
    def item_activated(self, path: TreePath) -> None: ...
    def path_is_selected(self, path: TreePath) -> bool: ...
    def scroll_to_path(self, path: TreePath, use_align: bool, row_align: float, col_align: float) -> None: ...
    def select_all(self) -> None: ...
    def select_path(self, path: TreePath) -> None: ...
    def selected_foreach(self, func: IconViewForeachFunc, data: object) -> None: ...
    def set_activate_on_single_click(self, single: bool) -> None: ...
    def set_column_spacing(self, column_spacing: int) -> None: ...
    def set_columns(self, columns: int) -> None: ...
    def set_cursor(self, path: TreePath, cell: CellRenderer, start_editing: bool) -> None: ...
    def set_drag_dest_item(self, path: TreePath, pos: IconViewDropPosition) -> None: ...
    def set_item_orientation(self, orientation: Orientation) -> None: ...
    def set_item_padding(self, item_padding: int) -> None: ...
    def set_item_width(self, item_width: int) -> None: ...
    def set_margin(self, margin: int) -> None: ...
    def set_markup_column(self, column: int) -> None: ...
    def set_model(self, model: TreeModel) -> None: ...
    def set_pixbuf_column(self, column: int) -> None: ...
    def set_reorderable(self, reorderable: bool) -> None: ...
    def set_row_spacing(self, row_spacing: int) -> None: ...
    def set_selection_mode(self, mode: SelectionMode) -> None: ...
    def set_spacing(self, spacing: int) -> None: ...
    def set_text_column(self, column: int) -> None: ...
    def set_tooltip_cell(self, tooltip: Tooltip, path: TreePath, cell: CellRenderer) -> None: ...
    def set_tooltip_column(self, column: int) -> None: ...
    def set_tooltip_item(self, tooltip: Tooltip, path: TreePath) -> None: ...
    def unselect_all(self) -> None: ...
    def unselect_path(self, path: TreePath) -> None: ...
    def unset_model_drag_dest(self) -> None: ...
    def unset_model_drag_source(self) -> None: ...

class IconViewAccessible(ContainerAccessible, Atk.Component, Atk.Selection): ...

class Image(Misc, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls) -> Widget: ...
    def clear(self) -> None: ...
    def get_animation(self) -> GdkPixbuf.PixbufAnimation: ...
    def get_gicon(self, gicon: Gio.Icon, size: int) -> None: ...
    def get_icon_name(self, icon_name: str, size: int) -> None: ...
    def get_icon_set(self, icon_set: IconSet, size: int) -> None: ...
    def get_pixbuf(self) -> GdkPixbuf.Pixbuf: ...
    def get_pixel_size(self) -> int: ...
    def get_stock(self, stock_id: str, size: int) -> None: ...
    def get_storage_type(self) -> ImageType: ...
    def set_from_animation(self, animation: GdkPixbuf.PixbufAnimation) -> None: ...
    def set_from_file(self, filename: filename) -> None: ...
    def set_from_gicon(self, icon: Gio.Icon, size: int) -> None: ...
    def set_from_icon_name(self, icon_name: str, size: int) -> None: ...
    def set_from_icon_set(self, icon_set: IconSet, size: int) -> None: ...
    def set_from_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf) -> None: ...
    def set_from_resource(self, resource_path: str) -> None: ...
    def set_from_stock(self, stock_id: str, size: int) -> None: ...
    def set_from_surface(self, surface: cairo.Surface) -> None: ...
    def set_pixel_size(self, pixel_size: int) -> None: ...

class ImageAccessible(WidgetAccessible, Atk.Component, Atk.Image): ...

class ImageCellAccessible(RendererCellAccessible, Atk.Action, Atk.Component, Atk.Image, Atk.TableCell): ...

class ImageMenuItem(MenuItem, Atk.ImplementorIface, Actionable, Activatable, Buildable): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_always_show_image(self) -> bool: ...
    def get_image(self) -> Widget: ...
    def get_use_stock(self) -> bool: ...
    def set_accel_group(self, accel_group: AccelGroup) -> None: ...
    def set_always_show_image(self, always_show: bool) -> None: ...
    def set_image(self, image: Widget) -> None: ...
    def set_use_stock(self, use_stock: bool) -> None: ...

class InfoBar(Box, Atk.ImplementorIface, Buildable, Orientable): 
    @classmethod
    def new(cls) -> Widget: ...
    def add_action_widget(self, child: Widget, response_id: int) -> None: ...
    def add_button(self, button_text: str, response_id: int) -> Button: ...
    def add_buttons(self, first_button_text: str) -> None: ...
    def get_action_area(self) -> Box: ...
    def get_content_area(self) -> Box: ...
    def get_message_type(self) -> MessageType: ...
    def get_revealed(self) -> bool: ...
    def get_show_close_button(self) -> bool: ...
    def response(self, response_id: int) -> None: ...
    def set_default_response(self, response_id: int) -> None: ...
    def set_message_type(self, message_type: MessageType) -> None: ...
    def set_response_sensitive(self, response_id: int, setting: bool) -> None: ...
    def set_revealed(self, revealed: bool) -> None: ...
    def set_show_close_button(self, setting: bool) -> None: ...

class Invisible(Widget, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_screen(self) -> Gdk.Screen: ...
    def set_screen(self, screen: Gdk.Screen) -> None: ...

class Label(Misc, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls, str: str) -> Widget: ...
    def get_angle(self) -> float: ...
    def get_attributes(self) -> Pango.AttrList: ...
    def get_current_uri(self) -> str: ...
    def get_ellipsize(self) -> Pango.EllipsizeMode: ...
    def get_justify(self) -> Justification: ...
    def get_label(self) -> str: ...
    def get_layout(self) -> Pango.Layout: ...
    def get_layout_offsets(self, x: int, y: int) -> None: ...
    def get_line_wrap(self) -> bool: ...
    def get_line_wrap_mode(self) -> Pango.WrapMode: ...
    def get_lines(self) -> int: ...
    def get_max_width_chars(self) -> int: ...
    def get_mnemonic_keyval(self) -> int: ...
    def get_mnemonic_widget(self) -> Widget: ...
    def get_selectable(self) -> bool: ...
    def get_selection_bounds(self, start: int, end: int) -> bool: ...
    def get_single_line_mode(self) -> bool: ...
    def get_text(self) -> str: ...
    def get_track_visited_links(self) -> bool: ...
    def get_use_markup(self) -> bool: ...
    def get_use_underline(self) -> bool: ...
    def get_width_chars(self) -> int: ...
    def get_xalign(self) -> float: ...
    def get_yalign(self) -> float: ...
    def select_region(self, start_offset: int, end_offset: int) -> None: ...
    def set_angle(self, angle: float) -> None: ...
    def set_attributes(self, attrs: Pango.AttrList) -> None: ...
    def set_ellipsize(self, mode: Pango.EllipsizeMode) -> None: ...
    def set_justify(self, jtype: Justification) -> None: ...
    def set_label(self, str: str) -> None: ...
    def set_line_wrap(self, wrap: bool) -> None: ...
    def set_line_wrap_mode(self, wrap_mode: Pango.WrapMode) -> None: ...
    def set_lines(self, lines: int) -> None: ...
    def set_markup(self, str: str) -> None: ...
    def set_markup_with_mnemonic(self, str: str) -> None: ...
    def set_max_width_chars(self, n_chars: int) -> None: ...
    def set_mnemonic_widget(self, widget: Widget) -> None: ...
    def set_pattern(self, pattern: str) -> None: ...
    def set_selectable(self, setting: bool) -> None: ...
    def set_single_line_mode(self, single_line_mode: bool) -> None: ...
    def set_text(self, str: str) -> None: ...
    def set_text_with_mnemonic(self, str: str) -> None: ...
    def set_track_visited_links(self, track_links: bool) -> None: ...
    def set_use_markup(self, setting: bool) -> None: ...
    def set_use_underline(self, setting: bool) -> None: ...
    def set_width_chars(self, n_chars: int) -> None: ...
    def set_xalign(self, xalign: float) -> None: ...
    def set_yalign(self, yalign: float) -> None: ...

class LabelAccessible(WidgetAccessible, Atk.Component, Atk.Hypertext, Atk.Text): ...

class Layout(Container, Atk.ImplementorIface, Buildable, Scrollable): 
    @classmethod
    def new(cls, hadjustment: Adjustment, vadjustment: Adjustment) -> Widget: ...
    def get_bin_window(self) -> Gdk.Window: ...
    def get_hadjustment(self) -> Adjustment: ...
    def get_size(self, width: int, height: int) -> None: ...
    def get_vadjustment(self) -> Adjustment: ...
    def move(self, child_widget: Widget, x: int, y: int) -> None: ...
    def put(self, child_widget: Widget, x: int, y: int) -> None: ...
    def set_hadjustment(self, adjustment: Adjustment) -> None: ...
    def set_size(self, width: int, height: int) -> None: ...
    def set_vadjustment(self, adjustment: Adjustment) -> None: ...

class LevelBar(Widget, Atk.ImplementorIface, Buildable, Orientable): 
    @classmethod
    def new(cls) -> Widget: ...
    def add_offset_value(self, name: str, value: float) -> None: ...
    def get_inverted(self) -> bool: ...
    def get_max_value(self) -> float: ...
    def get_min_value(self) -> float: ...
    def get_mode(self) -> LevelBarMode: ...
    def get_offset_value(self, name: str, value: float) -> bool: ...
    def get_value(self) -> float: ...
    def remove_offset_value(self, name: str) -> None: ...
    def set_inverted(self, inverted: bool) -> None: ...
    def set_max_value(self, value: float) -> None: ...
    def set_min_value(self, value: float) -> None: ...
    def set_mode(self, mode: LevelBarMode) -> None: ...
    def set_value(self, value: float) -> None: ...

class LevelBarAccessible(WidgetAccessible, Atk.Component, Atk.Value): ...

class LinkButton(Button, Atk.ImplementorIface, Actionable, Activatable, Buildable): 
    @classmethod
    def new(cls, uri: str) -> Widget: ...
    def get_uri(self) -> str: ...
    def get_visited(self) -> bool: ...
    def set_uri(self, uri: str) -> None: ...
    def set_visited(self, visited: bool) -> None: ...

class LinkButtonAccessible(ButtonAccessible, Atk.Action, Atk.Component, Atk.HyperlinkImpl, Atk.Image): ...

class ListBox(Container, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls) -> Widget: ...
    def bind_model(self, model: Gio.ListModel, create_widget_func: ListBoxCreateWidgetFunc, user_data: object, user_data_free_func: GLib.DestroyNotify) -> None: ...
    def drag_highlight_row(self, row: ListBoxRow) -> None: ...
    def drag_unhighlight_row(self) -> None: ...
    def get_activate_on_single_click(self) -> bool: ...
    def get_adjustment(self) -> Adjustment: ...
    def get_row_at_index(self, index_: int) -> ListBoxRow: ...
    def get_row_at_y(self, y: int) -> ListBoxRow: ...
    def get_selected_row(self) -> ListBoxRow: ...
    def get_selected_rows(self) -> GLib.List: ...
    def get_selection_mode(self) -> SelectionMode: ...
    def insert(self, child: Widget, position: int) -> None: ...
    def invalidate_filter(self) -> None: ...
    def invalidate_headers(self) -> None: ...
    def invalidate_sort(self) -> None: ...
    def prepend(self, child: Widget) -> None: ...
    def select_all(self) -> None: ...
    def select_row(self, row: ListBoxRow) -> None: ...
    def selected_foreach(self, func: ListBoxForeachFunc, data: object) -> None: ...
    def set_activate_on_single_click(self, single: bool) -> None: ...
    def set_adjustment(self, adjustment: Adjustment) -> None: ...
    def set_filter_func(self, filter_func: ListBoxFilterFunc, user_data: object, destroy: GLib.DestroyNotify) -> None: ...
    def set_header_func(self, update_header: ListBoxUpdateHeaderFunc, user_data: object, destroy: GLib.DestroyNotify) -> None: ...
    def set_placeholder(self, placeholder: Widget) -> None: ...
    def set_selection_mode(self, mode: SelectionMode) -> None: ...
    def set_sort_func(self, sort_func: ListBoxSortFunc, user_data: object, destroy: GLib.DestroyNotify) -> None: ...
    def unselect_all(self) -> None: ...
    def unselect_row(self, row: ListBoxRow) -> None: ...

class ListBoxAccessible(ContainerAccessible, Atk.Component, Atk.Selection): ...

class ListBoxRow(Bin, Atk.ImplementorIface, Actionable, Buildable): 
    @classmethod
    def new(cls) -> Widget: ...
    def changed(self) -> None: ...
    def get_activatable(self) -> bool: ...
    def get_header(self) -> Widget: ...
    def get_index(self) -> int: ...
    def get_selectable(self) -> bool: ...
    def is_selected(self) -> bool: ...
    def set_activatable(self, activatable: bool) -> None: ...
    def set_header(self, header: Widget) -> None: ...
    def set_selectable(self, selectable: bool) -> None: ...

class ListBoxRowAccessible(ContainerAccessible, Atk.Component): ...

class ListStore(GObject.Object, Buildable, TreeDragDest, TreeDragSource, TreeModel, TreeSortable): 
    @classmethod
    def new(cls, n_columns: int) -> ListStore: ...
    def append(self, iter: TreeIter) -> None: ...
    def clear(self) -> None: ...
    def insert(self, iter: TreeIter, position: int) -> None: ...
    def insert_after(self, iter: TreeIter, sibling: TreeIter) -> None: ...
    def insert_before(self, iter: TreeIter, sibling: TreeIter) -> None: ...
    def insert_with_values(self, iter: TreeIter, position: int) -> None: ...
    def insert_with_valuesv(self, iter: TreeIter, position: int, columns: list[int], values: list[GObject.Value], n_values: int) -> None: ...
    def iter_is_valid(self, iter: TreeIter) -> bool: ...
    def move_after(self, iter: TreeIter, position: TreeIter) -> None: ...
    def move_before(self, iter: TreeIter, position: TreeIter) -> None: ...
    def prepend(self, iter: TreeIter) -> None: ...
    def remove(self, iter: TreeIter) -> bool: ...
    def reorder(self, new_order: list[int]) -> None: ...
    def set(self, iter: TreeIter) -> None: ...
    def set_column_types(self, n_columns: int, types: list[GObject.Type]) -> None: ...
    def set_valist(self, iter: TreeIter, var_args: va_list) -> None: ...
    def set_value(self, iter: TreeIter, column: int, value: GObject.Value) -> None: ...
    def set_valuesv(self, iter: TreeIter, columns: list[int], values: list[GObject.Value], n_values: int) -> None: ...
    def swap(self, a: TreeIter, b: TreeIter) -> None: ...

class LockButton(Button, Atk.ImplementorIface, Actionable, Activatable, Buildable): 
    @classmethod
    def new(cls, permission: Gio.Permission) -> Widget: ...
    def get_permission(self) -> Gio.Permission: ...
    def set_permission(self, permission: Gio.Permission) -> None: ...

class LockButtonAccessible(ButtonAccessible, Atk.Action, Atk.Component, Atk.Image): ...

class Menu(MenuShell, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls) -> Widget: ...
    @classmethod
    def get_for_attach_widget(cls, widget: Widget) -> GLib.List: ...
    def attach(self, child: Widget, left_attach: int, right_attach: int, top_attach: int, bottom_attach: int) -> None: ...
    def attach_to_widget(self, attach_widget: Widget, detacher: MenuDetachFunc) -> None: ...
    def detach(self) -> None: ...
    def get_accel_group(self) -> AccelGroup: ...
    def get_accel_path(self) -> str: ...
    def get_active(self) -> Widget: ...
    def get_attach_widget(self) -> Widget: ...
    def get_monitor(self) -> int: ...
    def get_reserve_toggle_size(self) -> bool: ...
    def get_tearoff_state(self) -> bool: ...
    def get_title(self) -> str: ...
    def place_on_monitor(self, monitor: Gdk.Monitor) -> None: ...
    def popdown(self) -> None: ...
    def popup(self, parent_menu_shell: Widget, parent_menu_item: Widget, func: MenuPositionFunc, data: object, button: int, activate_time: int) -> None: ...
    def popup_at_pointer(self, trigger_event: Gdk.Event) -> None: ...
    def popup_at_rect(self, rect_window: Gdk.Window, rect: Gdk.Rectangle, rect_anchor: Gdk.Gravity, menu_anchor: Gdk.Gravity, trigger_event: Gdk.Event) -> None: ...
    def popup_at_widget(self, widget: Widget, widget_anchor: Gdk.Gravity, menu_anchor: Gdk.Gravity, trigger_event: Gdk.Event) -> None: ...
    def popup_for_device(self, device: Gdk.Device, parent_menu_shell: Widget, parent_menu_item: Widget, func: MenuPositionFunc, data: object, destroy: GLib.DestroyNotify, button: int, activate_time: int) -> None: ...
    def reorder_child(self, child: Widget, position: int) -> None: ...
    def reposition(self) -> None: ...
    def set_accel_group(self, accel_group: AccelGroup) -> None: ...
    def set_accel_path(self, accel_path: str) -> None: ...
    def set_active(self, index: int) -> None: ...
    def set_monitor(self, monitor_num: int) -> None: ...
    def set_reserve_toggle_size(self, reserve_toggle_size: bool) -> None: ...
    def set_screen(self, screen: Gdk.Screen) -> None: ...
    def set_tearoff_state(self, torn_off: bool) -> None: ...
    def set_title(self, title: str) -> None: ...

class MenuAccessible(MenuShellAccessible, Atk.Component, Atk.Selection): ...

class MenuBar(MenuShell, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_child_pack_direction(self) -> PackDirection: ...
    def get_pack_direction(self) -> PackDirection: ...
    def set_child_pack_direction(self, child_pack_dir: PackDirection) -> None: ...
    def set_pack_direction(self, pack_dir: PackDirection) -> None: ...

class MenuButton(ToggleButton, Atk.ImplementorIface, Actionable, Activatable, Buildable): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_align_widget(self) -> Widget: ...
    def get_direction(self) -> ArrowType: ...
    def get_menu_model(self) -> Gio.MenuModel: ...
    def get_popover(self) -> Popover: ...
    def get_popup(self) -> Menu: ...
    def get_use_popover(self) -> bool: ...
    def set_align_widget(self, align_widget: Widget) -> None: ...
    def set_direction(self, direction: ArrowType) -> None: ...
    def set_menu_model(self, menu_model: Gio.MenuModel) -> None: ...
    def set_popover(self, popover: Widget) -> None: ...
    def set_popup(self, menu: Widget) -> None: ...
    def set_use_popover(self, use_popover: bool) -> None: ...

class MenuButtonAccessible(ToggleButtonAccessible, Atk.Action, Atk.Component, Atk.Image): ...

class MenuItem(Bin, Atk.ImplementorIface, Actionable, Activatable, Buildable): 
    @classmethod
    def new(cls) -> Widget: ...
    def activate(self) -> None: ...
    def deselect(self) -> None: ...
    def get_accel_path(self) -> str: ...
    def get_label(self) -> str: ...
    def get_reserve_indicator(self) -> bool: ...
    def get_right_justified(self) -> bool: ...
    def get_submenu(self) -> Widget: ...
    def get_use_underline(self) -> bool: ...
    def select(self) -> None: ...
    def set_accel_path(self, accel_path: str) -> None: ...
    def set_label(self, label: str) -> None: ...
    def set_reserve_indicator(self, reserve: bool) -> None: ...
    def set_right_justified(self, right_justified: bool) -> None: ...
    def set_submenu(self, submenu: Menu) -> None: ...
    def set_use_underline(self, setting: bool) -> None: ...
    def toggle_size_allocate(self, allocation: int) -> None: ...
    def toggle_size_request(self, requisition: int) -> None: ...

class MenuItemAccessible(ContainerAccessible, Atk.Action, Atk.Component, Atk.Selection): ...

class MenuShell(Container, Atk.ImplementorIface, Buildable): 
    def activate_item(self, menu_item: Widget, force_deactivate: bool) -> None: ...
    def append(self, child: MenuItem) -> None: ...
    def bind_model(self, model: Gio.MenuModel, action_namespace: str, with_separators: bool) -> None: ...
    def cancel(self) -> None: ...
    def deactivate(self) -> None: ...
    def deselect(self) -> None: ...
    def get_parent_shell(self) -> Widget: ...
    def get_selected_item(self) -> Widget: ...
    def get_take_focus(self) -> bool: ...
    def insert(self, child: Widget, position: int) -> None: ...
    def prepend(self, child: Widget) -> None: ...
    def select_first(self, search_sensitive: bool) -> None: ...
    def select_item(self, menu_item: Widget) -> None: ...
    def set_take_focus(self, take_focus: bool) -> None: ...

class MenuShellAccessible(ContainerAccessible, Atk.Component, Atk.Selection): ...

class MenuToolButton(ToolButton, Atk.ImplementorIface, Actionable, Activatable, Buildable): 
    @classmethod
    def new(cls, icon_widget: Widget, label: str) -> ToolItem: ...
    def get_menu(self) -> Widget: ...
    def set_arrow_tooltip_markup(self, markup: str) -> None: ...
    def set_arrow_tooltip_text(self, text: str) -> None: ...
    def set_menu(self, menu: Widget) -> None: ...

class MessageDialog(Dialog, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls, parent: Window, flags: DialogFlags, type: MessageType, buttons: ButtonsType, message_format: str) -> Widget: ...
    def format_secondary_markup(self, message_format: str) -> None: ...
    def format_secondary_text(self, message_format: str) -> None: ...
    def get_image(self) -> Widget: ...
    def get_message_area(self) -> Widget: ...
    def set_image(self, image: Widget) -> None: ...
    def set_markup(self, str: str) -> None: ...

class Misc(Widget, Atk.ImplementorIface, Buildable): 
    def get_alignment(self, xalign: float, yalign: float) -> None: ...
    def get_padding(self, xpad: int, ypad: int) -> None: ...
    def set_alignment(self, xalign: float, yalign: float) -> None: ...
    def set_padding(self, xpad: int, ypad: int) -> None: ...

class ModelButton(Button, Atk.ImplementorIface, Actionable, Activatable, Buildable): 
    @classmethod
    def new(cls) -> Widget: ...

class MountOperation(Gio.MountOperation): 
    @classmethod
    def new(cls, parent: Window) -> Gio.MountOperation: ...
    def get_parent(self) -> Window: ...
    def get_screen(self) -> Gdk.Screen: ...
    def is_showing(self) -> bool: ...
    def set_parent(self, parent: Window) -> None: ...
    def set_screen(self, screen: Gdk.Screen) -> None: ...

class NativeDialog(GObject.Object): 
    def destroy(self) -> None: ...
    def get_modal(self) -> bool: ...
    def get_title(self) -> str: ...
    def get_transient_for(self) -> Window: ...
    def get_visible(self) -> bool: ...
    def hide(self) -> None: ...
    def run(self) -> int: ...
    def set_modal(self, modal: bool) -> None: ...
    def set_title(self, title: str) -> None: ...
    def set_transient_for(self, parent: Window) -> None: ...
    def show(self) -> None: ...

class Notebook(Container, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls) -> Widget: ...
    def append_page(self, child: Widget, tab_label: Widget) -> int: ...
    def append_page_menu(self, child: Widget, tab_label: Widget, menu_label: Widget) -> int: ...
    def detach_tab(self, child: Widget) -> None: ...
    def get_action_widget(self, pack_type: PackType) -> Widget: ...
    def get_current_page(self) -> int: ...
    def get_group_name(self) -> str: ...
    def get_menu_label(self, child: Widget) -> Widget: ...
    def get_menu_label_text(self, child: Widget) -> str: ...
    def get_n_pages(self) -> int: ...
    def get_nth_page(self, page_num: int) -> Widget: ...
    def get_scrollable(self) -> bool: ...
    def get_show_border(self) -> bool: ...
    def get_show_tabs(self) -> bool: ...
    def get_tab_detachable(self, child: Widget) -> bool: ...
    def get_tab_hborder(self) -> int: ...
    def get_tab_label(self, child: Widget) -> Widget: ...
    def get_tab_label_text(self, child: Widget) -> str: ...
    def get_tab_pos(self) -> PositionType: ...
    def get_tab_reorderable(self, child: Widget) -> bool: ...
    def get_tab_vborder(self) -> int: ...
    def insert_page(self, child: Widget, tab_label: Widget, position: int) -> int: ...
    def insert_page_menu(self, child: Widget, tab_label: Widget, menu_label: Widget, position: int) -> int: ...
    def next_page(self) -> None: ...
    def page_num(self, child: Widget) -> int: ...
    def popup_disable(self) -> None: ...
    def popup_enable(self) -> None: ...
    def prepend_page(self, child: Widget, tab_label: Widget) -> int: ...
    def prepend_page_menu(self, child: Widget, tab_label: Widget, menu_label: Widget) -> int: ...
    def prev_page(self) -> None: ...
    def remove_page(self, page_num: int) -> None: ...
    def reorder_child(self, child: Widget, position: int) -> None: ...
    def set_action_widget(self, widget: Widget, pack_type: PackType) -> None: ...
    def set_current_page(self, page_num: int) -> None: ...
    def set_group_name(self, group_name: str) -> None: ...
    def set_menu_label(self, child: Widget, menu_label: Widget) -> None: ...
    def set_menu_label_text(self, child: Widget, menu_text: str) -> None: ...
    def set_scrollable(self, scrollable: bool) -> None: ...
    def set_show_border(self, show_border: bool) -> None: ...
    def set_show_tabs(self, show_tabs: bool) -> None: ...
    def set_tab_detachable(self, child: Widget, detachable: bool) -> None: ...
    def set_tab_label(self, child: Widget, tab_label: Widget) -> None: ...
    def set_tab_label_text(self, child: Widget, tab_text: str) -> None: ...
    def set_tab_pos(self, pos: PositionType) -> None: ...
    def set_tab_reorderable(self, child: Widget, reorderable: bool) -> None: ...

class NotebookAccessible(ContainerAccessible, Atk.Component, Atk.Selection): ...

class NotebookPageAccessible(Atk.Object, Atk.Component): 
    @classmethod
    def new(cls, notebook: NotebookAccessible, child: Widget) -> Atk.Object: ...
    def invalidate(self) -> None: ...

class NumerableIcon(Gio.EmblemedIcon, Gio.Icon): 
    @classmethod
    def new(cls, base_icon: Gio.Icon) -> Gio.Icon: ...
    @classmethod
    def new_with_style_context(cls, base_icon: Gio.Icon, context: StyleContext) -> Gio.Icon: ...
    def get_background_gicon(self) -> Gio.Icon: ...
    def get_background_icon_name(self) -> str: ...
    def get_count(self) -> int: ...
    def get_label(self) -> str: ...
    def get_style_context(self) -> StyleContext: ...
    def set_background_gicon(self, icon: Gio.Icon) -> None: ...
    def set_background_icon_name(self, icon_name: str) -> None: ...
    def set_count(self, count: int) -> None: ...
    def set_label(self, label: str) -> None: ...
    def set_style_context(self, style: StyleContext) -> None: ...

class OffscreenWindow(Window, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_pixbuf(self) -> GdkPixbuf.Pixbuf: ...
    def get_surface(self) -> cairo.Surface: ...

class Overlay(Bin, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls) -> Widget: ...
    def add_overlay(self, widget: Widget) -> None: ...
    def get_overlay_pass_through(self, widget: Widget) -> bool: ...
    def reorder_overlay(self, child: Widget, index_: int) -> None: ...
    def set_overlay_pass_through(self, widget: Widget, pass_through: bool) -> None: ...

class PadController(EventController): 
    @classmethod
    def new(cls, window: Window, group: Gio.ActionGroup, pad: Gdk.Device) -> PadController: ...
    def set_action(self, type: PadActionType, index: int, mode: int, label: str, action_name: str) -> None: ...
    def set_action_entries(self, entries: list[PadActionEntry], n_entries: int) -> None: ...

class PageSetup(GObject.Object): 
    @classmethod
    def new(cls) -> PageSetup: ...
    def copy(self) -> PageSetup: ...
    def get_bottom_margin(self, unit: Unit) -> float: ...
    def get_left_margin(self, unit: Unit) -> float: ...
    def get_orientation(self) -> PageOrientation: ...
    def get_page_height(self, unit: Unit) -> float: ...
    def get_page_width(self, unit: Unit) -> float: ...
    def get_paper_height(self, unit: Unit) -> float: ...
    def get_paper_size(self) -> PaperSize: ...
    def get_paper_width(self, unit: Unit) -> float: ...
    def get_right_margin(self, unit: Unit) -> float: ...
    def get_top_margin(self, unit: Unit) -> float: ...
    def load_file(self, file_name: filename) -> bool: ...
    def load_key_file(self, key_file: GLib.KeyFile, group_name: str) -> bool: ...
    def set_bottom_margin(self, margin: float, unit: Unit) -> None: ...
    def set_left_margin(self, margin: float, unit: Unit) -> None: ...
    def set_orientation(self, orientation: PageOrientation) -> None: ...
    def set_paper_size(self, size: PaperSize) -> None: ...
    def set_paper_size_and_default_margins(self, size: PaperSize) -> None: ...
    def set_right_margin(self, margin: float, unit: Unit) -> None: ...
    def set_top_margin(self, margin: float, unit: Unit) -> None: ...
    def to_file(self, file_name: filename) -> bool: ...
    def to_gvariant(self) -> GLib.Variant: ...
    def to_key_file(self, key_file: GLib.KeyFile, group_name: str) -> None: ...

class Paned(Container, Atk.ImplementorIface, Buildable, Orientable): 
    @classmethod
    def new(cls, orientation: Orientation) -> Widget: ...
    def add1(self, child: Widget) -> None: ...
    def add2(self, child: Widget) -> None: ...
    def get_child1(self) -> Widget: ...
    def get_child2(self) -> Widget: ...
    def get_handle_window(self) -> Gdk.Window: ...
    def get_position(self) -> int: ...
    def get_wide_handle(self) -> bool: ...
    def pack1(self, child: Widget, resize: bool, shrink: bool) -> None: ...
    def pack2(self, child: Widget, resize: bool, shrink: bool) -> None: ...
    def set_position(self, position: int) -> None: ...
    def set_wide_handle(self, wide: bool) -> None: ...

class PanedAccessible(ContainerAccessible, Atk.Component, Atk.Value): ...

class PlacesSidebar(ScrolledWindow, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls) -> Widget: ...
    def add_shortcut(self, location: Gio.File) -> None: ...
    def get_local_only(self) -> bool: ...
    def get_location(self) -> Gio.File: ...
    def get_nth_bookmark(self, n: int) -> Gio.File: ...
    def get_open_flags(self) -> PlacesOpenFlags: ...
    def get_show_connect_to_server(self) -> bool: ...
    def get_show_desktop(self) -> bool: ...
    def get_show_enter_location(self) -> bool: ...
    def get_show_other_locations(self) -> bool: ...
    def get_show_recent(self) -> bool: ...
    def get_show_starred_location(self) -> bool: ...
    def get_show_trash(self) -> bool: ...
    def list_shortcuts(self) -> GLib.SList: ...
    def remove_shortcut(self, location: Gio.File) -> None: ...
    def set_drop_targets_visible(self, visible: bool, context: Gdk.DragContext) -> None: ...
    def set_local_only(self, local_only: bool) -> None: ...
    def set_location(self, location: Gio.File) -> None: ...
    def set_open_flags(self, flags: PlacesOpenFlags) -> None: ...
    def set_show_connect_to_server(self, show_connect_to_server: bool) -> None: ...
    def set_show_desktop(self, show_desktop: bool) -> None: ...
    def set_show_enter_location(self, show_enter_location: bool) -> None: ...
    def set_show_other_locations(self, show_other_locations: bool) -> None: ...
    def set_show_recent(self, show_recent: bool) -> None: ...
    def set_show_starred_location(self, show_starred_location: bool) -> None: ...
    def set_show_trash(self, show_trash: bool) -> None: ...

class Plug(Window, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls, socket_id: xlib.Window) -> Widget: ...
    def construct(self, socket_id: xlib.Window) -> None: ...
    def construct_for_display(self, display: Gdk.Display, socket_id: xlib.Window) -> None: ...
    def get_embedded(self) -> bool: ...
    def get_id(self) -> xlib.Window: ...
    def get_socket_window(self) -> Gdk.Window: ...

class PlugAccessible(WindowAccessible, Atk.Component, Atk.Window): 
    def get_id(self) -> str: ...

class Popover(Bin, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls, relative_to: Widget) -> Widget: ...
    def bind_model(self, model: Gio.MenuModel, action_namespace: str) -> None: ...
    def get_constrain_to(self) -> PopoverConstraint: ...
    def get_default_widget(self) -> Widget: ...
    def get_modal(self) -> bool: ...
    def get_pointing_to(self, rect: Gdk.Rectangle) -> bool: ...
    def get_position(self) -> PositionType: ...
    def get_relative_to(self) -> Widget: ...
    def get_transitions_enabled(self) -> bool: ...
    def popdown(self) -> None: ...
    def popup(self) -> None: ...
    def set_constrain_to(self, constraint: PopoverConstraint) -> None: ...
    def set_default_widget(self, widget: Widget) -> None: ...
    def set_modal(self, modal: bool) -> None: ...
    def set_pointing_to(self, rect: Gdk.Rectangle) -> None: ...
    def set_position(self, position: PositionType) -> None: ...
    def set_relative_to(self, relative_to: Widget) -> None: ...
    def set_transitions_enabled(self, transitions_enabled: bool) -> None: ...

class PopoverAccessible(ContainerAccessible, Atk.Component): ...

class PopoverMenu(Popover, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls) -> Widget: ...
    def open_submenu(self, name: str) -> None: ...

class PrintContext(GObject.Object): 
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self) -> Pango.Layout: ...
    def get_cairo_context(self) -> cairo.Context: ...
    def get_dpi_x(self) -> float: ...
    def get_dpi_y(self) -> float: ...
    def get_hard_margins(self, top: float, bottom: float, left: float, right: float) -> bool: ...
    def get_height(self) -> float: ...
    def get_page_setup(self) -> PageSetup: ...
    def get_pango_fontmap(self) -> Pango.FontMap: ...
    def get_width(self) -> float: ...
    def set_cairo_context(self, cr: cairo.Context, dpi_x: float, dpi_y: float) -> None: ...

class PrintOperation(GObject.Object, PrintOperationPreview): 
    @classmethod
    def new(cls) -> PrintOperation: ...
    def cancel(self) -> None: ...
    def draw_page_finish(self) -> None: ...
    def get_default_page_setup(self) -> PageSetup: ...
    def get_embed_page_setup(self) -> bool: ...
    def get_error(self) -> None: ...
    def get_has_selection(self) -> bool: ...
    def get_n_pages_to_print(self) -> int: ...
    def get_print_settings(self) -> PrintSettings: ...
    def get_status(self) -> PrintStatus: ...
    def get_status_string(self) -> str: ...
    def get_support_selection(self) -> bool: ...
    def is_finished(self) -> bool: ...
    def run(self, action: PrintOperationAction, parent: Window) -> PrintOperationResult: ...
    def set_allow_async(self, allow_async: bool) -> None: ...
    def set_current_page(self, current_page: int) -> None: ...
    def set_custom_tab_label(self, label: str) -> None: ...
    def set_default_page_setup(self, default_page_setup: PageSetup) -> None: ...
    def set_defer_drawing(self) -> None: ...
    def set_embed_page_setup(self, embed: bool) -> None: ...
    def set_export_filename(self, filename: filename) -> None: ...
    def set_has_selection(self, has_selection: bool) -> None: ...
    def set_job_name(self, job_name: str) -> None: ...
    def set_n_pages(self, n_pages: int) -> None: ...
    def set_print_settings(self, print_settings: PrintSettings) -> None: ...
    def set_show_progress(self, show_progress: bool) -> None: ...
    def set_support_selection(self, support_selection: bool) -> None: ...
    def set_track_print_status(self, track_status: bool) -> None: ...
    def set_unit(self, unit: Unit) -> None: ...
    def set_use_full_page(self, full_page: bool) -> None: ...

class PrintSettings(GObject.Object): 
    @classmethod
    def new(cls) -> PrintSettings: ...
    def copy(self) -> PrintSettings: ...
    def foreach(self, func: PrintSettingsFunc, user_data: object) -> None: ...
    def get(self, key: str) -> str: ...
    def get_bool(self, key: str) -> bool: ...
    def get_collate(self) -> bool: ...
    def get_default_source(self) -> str: ...
    def get_dither(self) -> str: ...
    def get_double(self, key: str) -> float: ...
    def get_double_with_default(self, key: str, def: float) -> float: ...
    def get_duplex(self) -> PrintDuplex: ...
    def get_finishings(self) -> str: ...
    def get_int(self, key: str) -> int: ...
    def get_int_with_default(self, key: str, def: int) -> int: ...
    def get_length(self, key: str, unit: Unit) -> float: ...
    def get_media_type(self) -> str: ...
    def get_n_copies(self) -> int: ...
    def get_number_up(self) -> int: ...
    def get_number_up_layout(self) -> NumberUpLayout: ...
    def get_orientation(self) -> PageOrientation: ...
    def get_output_bin(self) -> str: ...
    def get_page_ranges(self, num_ranges: int) -> list[PageRange]: ...
    def get_page_set(self) -> PageSet: ...
    def get_paper_height(self, unit: Unit) -> float: ...
    def get_paper_size(self) -> PaperSize: ...
    def get_paper_width(self, unit: Unit) -> float: ...
    def get_print_pages(self) -> PrintPages: ...
    def get_printer(self) -> str: ...
    def get_printer_lpi(self) -> float: ...
    def get_quality(self) -> PrintQuality: ...
    def get_resolution(self) -> int: ...
    def get_resolution_x(self) -> int: ...
    def get_resolution_y(self) -> int: ...
    def get_reverse(self) -> bool: ...
    def get_scale(self) -> float: ...
    def get_use_color(self) -> bool: ...
    def has_key(self, key: str) -> bool: ...
    def load_file(self, file_name: filename) -> bool: ...
    def load_key_file(self, key_file: GLib.KeyFile, group_name: str) -> bool: ...
    def set(self, key: str, value: str) -> None: ...
    def set_bool(self, key: str, value: bool) -> None: ...
    def set_collate(self, collate: bool) -> None: ...
    def set_default_source(self, default_source: str) -> None: ...
    def set_dither(self, dither: str) -> None: ...
    def set_double(self, key: str, value: float) -> None: ...
    def set_duplex(self, duplex: PrintDuplex) -> None: ...
    def set_finishings(self, finishings: str) -> None: ...
    def set_int(self, key: str, value: int) -> None: ...
    def set_length(self, key: str, value: float, unit: Unit) -> None: ...
    def set_media_type(self, media_type: str) -> None: ...
    def set_n_copies(self, num_copies: int) -> None: ...
    def set_number_up(self, number_up: int) -> None: ...
    def set_number_up_layout(self, number_up_layout: NumberUpLayout) -> None: ...
    def set_orientation(self, orientation: PageOrientation) -> None: ...
    def set_output_bin(self, output_bin: str) -> None: ...
    def set_page_ranges(self, page_ranges: list[PageRange], num_ranges: int) -> None: ...
    def set_page_set(self, page_set: PageSet) -> None: ...
    def set_paper_height(self, height: float, unit: Unit) -> None: ...
    def set_paper_size(self, paper_size: PaperSize) -> None: ...
    def set_paper_width(self, width: float, unit: Unit) -> None: ...
    def set_print_pages(self, pages: PrintPages) -> None: ...
    def set_printer(self, printer: str) -> None: ...
    def set_printer_lpi(self, lpi: float) -> None: ...
    def set_quality(self, quality: PrintQuality) -> None: ...
    def set_resolution(self, resolution: int) -> None: ...
    def set_resolution_xy(self, resolution_x: int, resolution_y: int) -> None: ...
    def set_reverse(self, reverse: bool) -> None: ...
    def set_scale(self, scale: float) -> None: ...
    def set_use_color(self, use_color: bool) -> None: ...
    def to_file(self, file_name: filename) -> bool: ...
    def to_gvariant(self) -> GLib.Variant: ...
    def to_key_file(self, key_file: GLib.KeyFile, group_name: str) -> None: ...
    def unset(self, key: str) -> None: ...

class ProgressBar(Widget, Atk.ImplementorIface, Buildable, Orientable): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_ellipsize(self) -> Pango.EllipsizeMode: ...
    def get_fraction(self) -> float: ...
    def get_inverted(self) -> bool: ...
    def get_pulse_step(self) -> float: ...
    def get_show_text(self) -> bool: ...
    def get_text(self) -> str: ...
    def pulse(self) -> None: ...
    def set_ellipsize(self, mode: Pango.EllipsizeMode) -> None: ...
    def set_fraction(self, fraction: float) -> None: ...
    def set_inverted(self, inverted: bool) -> None: ...
    def set_pulse_step(self, fraction: float) -> None: ...
    def set_show_text(self, show_text: bool) -> None: ...
    def set_text(self, text: str) -> None: ...

class ProgressBarAccessible(WidgetAccessible, Atk.Component, Atk.Value): ...

class RadioAction(ToggleAction, Buildable): 
    @classmethod
    def new(cls, name: str, label: str, tooltip: str, stock_id: str, value: int) -> RadioAction: ...
    def get_current_value(self) -> int: ...
    def get_group(self) -> GLib.SList: ...
    def join_group(self, group_source: RadioAction) -> None: ...
    def set_current_value(self, current_value: int) -> None: ...
    def set_group(self, group: GLib.SList) -> None: ...

class RadioButton(CheckButton, Atk.ImplementorIface, Actionable, Activatable, Buildable): 
    @classmethod
    def new(cls, group: GLib.SList) -> Widget: ...
    def get_group(self) -> GLib.SList: ...
    def join_group(self, group_source: RadioButton) -> None: ...
    def set_group(self, group: GLib.SList) -> None: ...

class RadioButtonAccessible(ToggleButtonAccessible, Atk.Action, Atk.Component, Atk.Image): ...

class RadioMenuItem(CheckMenuItem, Atk.ImplementorIface, Actionable, Activatable, Buildable): 
    @classmethod
    def new(cls, group: GLib.SList) -> Widget: ...
    def get_group(self) -> GLib.SList: ...
    def join_group(self, group_source: RadioMenuItem) -> None: ...
    def set_group(self, group: GLib.SList) -> None: ...

class RadioMenuItemAccessible(CheckMenuItemAccessible, Atk.Action, Atk.Component, Atk.Selection): ...

class RadioToolButton(ToggleToolButton, Atk.ImplementorIface, Actionable, Activatable, Buildable): 
    @classmethod
    def new(cls, group: GLib.SList) -> ToolItem: ...
    def get_group(self) -> GLib.SList: ...
    def set_group(self, group: GLib.SList) -> None: ...

class Range(Widget, Atk.ImplementorIface, Buildable, Orientable): 
    def get_adjustment(self) -> Adjustment: ...
    def get_fill_level(self) -> float: ...
    def get_flippable(self) -> bool: ...
    def get_inverted(self) -> bool: ...
    def get_lower_stepper_sensitivity(self) -> SensitivityType: ...
    def get_min_slider_size(self) -> int: ...
    def get_range_rect(self, range_rect: Gdk.Rectangle) -> None: ...
    def get_restrict_to_fill_level(self) -> bool: ...
    def get_round_digits(self) -> int: ...
    def get_show_fill_level(self) -> bool: ...
    def get_slider_range(self, slider_start: int, slider_end: int) -> None: ...
    def get_slider_size_fixed(self) -> bool: ...
    def get_upper_stepper_sensitivity(self) -> SensitivityType: ...
    def get_value(self) -> float: ...
    def set_adjustment(self, adjustment: Adjustment) -> None: ...
    def set_fill_level(self, fill_level: float) -> None: ...
    def set_flippable(self, flippable: bool) -> None: ...
    def set_increments(self, step: float, page: float) -> None: ...
    def set_inverted(self, setting: bool) -> None: ...
    def set_lower_stepper_sensitivity(self, sensitivity: SensitivityType) -> None: ...
    def set_min_slider_size(self, min_size: int) -> None: ...
    def set_range(self, min: float, max: float) -> None: ...
    def set_restrict_to_fill_level(self, restrict_to_fill_level: bool) -> None: ...
    def set_round_digits(self, round_digits: int) -> None: ...
    def set_show_fill_level(self, show_fill_level: bool) -> None: ...
    def set_slider_size_fixed(self, size_fixed: bool) -> None: ...
    def set_upper_stepper_sensitivity(self, sensitivity: SensitivityType) -> None: ...
    def set_value(self, value: float) -> None: ...

class RangeAccessible(WidgetAccessible, Atk.Component, Atk.Value): ...

class RcStyle(GObject.Object): 
    @classmethod
    def new(cls) -> RcStyle: ...
    def copy(self) -> RcStyle: ...

class RecentAction(Action, Buildable, RecentChooser): 
    @classmethod
    def new(cls, name: str, label: str, tooltip: str, stock_id: str) -> Action: ...
    def get_show_numbers(self) -> bool: ...
    def set_show_numbers(self, show_numbers: bool) -> None: ...

class RecentChooserDialog(Dialog, Atk.ImplementorIface, Buildable, RecentChooser): 
    @classmethod
    def new(cls, title: str, parent: Window, first_button_text: str) -> Widget: ...

class RecentChooserMenu(Menu, Atk.ImplementorIface, Activatable, Buildable, RecentChooser): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_show_numbers(self) -> bool: ...
    def set_show_numbers(self, show_numbers: bool) -> None: ...

class RecentChooserWidget(Box, Atk.ImplementorIface, Buildable, Orientable, RecentChooser): 
    @classmethod
    def new(cls) -> Widget: ...

class RecentFilter(GObject.InitiallyUnowned, Buildable): 
    @classmethod
    def new(cls) -> RecentFilter: ...
    def add_age(self, days: int) -> None: ...
    def add_application(self, application: str) -> None: ...
    def add_custom(self, needed: RecentFilterFlags, func: RecentFilterFunc, data: object, data_destroy: GLib.DestroyNotify) -> None: ...
    def add_group(self, group: str) -> None: ...
    def add_mime_type(self, mime_type: str) -> None: ...
    def add_pattern(self, pattern: str) -> None: ...
    def add_pixbuf_formats(self) -> None: ...
    def filter(self, filter_info: RecentFilterInfo) -> bool: ...
    def get_name(self) -> str: ...
    def get_needed(self) -> RecentFilterFlags: ...
    def set_name(self, name: str) -> None: ...

class RecentManager(GObject.Object): 
    @classmethod
    def new(cls) -> RecentManager: ...
    @classmethod
    def get_default(cls) -> RecentManager: ...
    def add_full(self, uri: str, recent_data: RecentData) -> bool: ...
    def add_item(self, uri: str) -> bool: ...
    def get_items(self) -> GLib.List: ...
    def has_item(self, uri: str) -> bool: ...
    def lookup_item(self, uri: str) -> RecentInfo: ...
    def move_item(self, uri: str, new_uri: str) -> bool: ...
    def purge_items(self) -> int: ...
    def remove_item(self, uri: str) -> bool: ...

class RendererCellAccessible(CellAccessible, Atk.Action, Atk.Component, Atk.TableCell): 
    @classmethod
    def new(cls, renderer: CellRenderer) -> Atk.Object: ...

class Revealer(Bin, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_child_revealed(self) -> bool: ...
    def get_reveal_child(self) -> bool: ...
    def get_transition_duration(self) -> int: ...
    def get_transition_type(self) -> RevealerTransitionType: ...
    def set_reveal_child(self, reveal_child: bool) -> None: ...
    def set_transition_duration(self, duration: int) -> None: ...
    def set_transition_type(self, transition: RevealerTransitionType) -> None: ...

class Scale(Range, Atk.ImplementorIface, Buildable, Orientable): 
    @classmethod
    def new(cls, orientation: Orientation, adjustment: Adjustment) -> Widget: ...
    def add_mark(self, value: float, position: PositionType, markup: str) -> None: ...
    def clear_marks(self) -> None: ...
    def get_digits(self) -> int: ...
    def get_draw_value(self) -> bool: ...
    def get_has_origin(self) -> bool: ...
    def get_layout(self) -> Pango.Layout: ...
    def get_layout_offsets(self, x: int, y: int) -> None: ...
    def get_value_pos(self) -> PositionType: ...
    def set_digits(self, digits: int) -> None: ...
    def set_draw_value(self, draw_value: bool) -> None: ...
    def set_has_origin(self, has_origin: bool) -> None: ...
    def set_value_pos(self, pos: PositionType) -> None: ...

class ScaleAccessible(RangeAccessible, Atk.Component, Atk.Value): ...

class ScaleButton(Button, Atk.ImplementorIface, Actionable, Activatable, Buildable, Orientable): 
    @classmethod
    def new(cls, size: int, min: float, max: float, step: float, icons: list[str]) -> Widget: ...
    def get_adjustment(self) -> Adjustment: ...
    def get_minus_button(self) -> Button: ...
    def get_plus_button(self) -> Button: ...
    def get_popup(self) -> Widget: ...
    def get_value(self) -> float: ...
    def set_adjustment(self, adjustment: Adjustment) -> None: ...
    def set_icons(self, icons: list[str]) -> None: ...
    def set_value(self, value: float) -> None: ...

class ScaleButtonAccessible(ButtonAccessible, Atk.Action, Atk.Component, Atk.Image, Atk.Value): ...

class Scrollbar(Range, Atk.ImplementorIface, Buildable, Orientable): 
    @classmethod
    def new(cls, orientation: Orientation, adjustment: Adjustment) -> Widget: ...

class ScrolledWindow(Bin, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls, hadjustment: Adjustment, vadjustment: Adjustment) -> Widget: ...
    def add_with_viewport(self, child: Widget) -> None: ...
    def get_capture_button_press(self) -> bool: ...
    def get_hadjustment(self) -> Adjustment: ...
    def get_hscrollbar(self) -> Widget: ...
    def get_kinetic_scrolling(self) -> bool: ...
    def get_max_content_height(self) -> int: ...
    def get_max_content_width(self) -> int: ...
    def get_min_content_height(self) -> int: ...
    def get_min_content_width(self) -> int: ...
    def get_overlay_scrolling(self) -> bool: ...
    def get_placement(self) -> CornerType: ...
    def get_policy(self, hscrollbar_policy: PolicyType, vscrollbar_policy: PolicyType) -> None: ...
    def get_propagate_natural_height(self) -> bool: ...
    def get_propagate_natural_width(self) -> bool: ...
    def get_shadow_type(self) -> ShadowType: ...
    def get_vadjustment(self) -> Adjustment: ...
    def get_vscrollbar(self) -> Widget: ...
    def set_capture_button_press(self, capture_button_press: bool) -> None: ...
    def set_hadjustment(self, hadjustment: Adjustment) -> None: ...
    def set_kinetic_scrolling(self, kinetic_scrolling: bool) -> None: ...
    def set_max_content_height(self, height: int) -> None: ...
    def set_max_content_width(self, width: int) -> None: ...
    def set_min_content_height(self, height: int) -> None: ...
    def set_min_content_width(self, width: int) -> None: ...
    def set_overlay_scrolling(self, overlay_scrolling: bool) -> None: ...
    def set_placement(self, window_placement: CornerType) -> None: ...
    def set_policy(self, hscrollbar_policy: PolicyType, vscrollbar_policy: PolicyType) -> None: ...
    def set_propagate_natural_height(self, propagate: bool) -> None: ...
    def set_propagate_natural_width(self, propagate: bool) -> None: ...
    def set_shadow_type(self, type: ShadowType) -> None: ...
    def set_vadjustment(self, vadjustment: Adjustment) -> None: ...
    def unset_placement(self) -> None: ...

class ScrolledWindowAccessible(ContainerAccessible, Atk.Component): ...

class SearchBar(Bin, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls) -> Widget: ...
    def connect_entry(self, entry: Entry) -> None: ...
    def get_search_mode(self) -> bool: ...
    def get_show_close_button(self) -> bool: ...
    def handle_event(self, event: Gdk.Event) -> bool: ...
    def set_search_mode(self, search_mode: bool) -> None: ...
    def set_show_close_button(self, visible: bool) -> None: ...

class SearchEntry(Entry, Atk.ImplementorIface, Buildable, CellEditable, Editable): 
    @classmethod
    def new(cls) -> Widget: ...
    def handle_event(self, event: Gdk.Event) -> bool: ...

class Separator(Widget, Atk.ImplementorIface, Buildable, Orientable): 
    @classmethod
    def new(cls, orientation: Orientation) -> Widget: ...

class SeparatorMenuItem(MenuItem, Atk.ImplementorIface, Actionable, Activatable, Buildable): 
    @classmethod
    def new(cls) -> Widget: ...

class SeparatorToolItem(ToolItem, Atk.ImplementorIface, Activatable, Buildable): 
    @classmethod
    def new(cls) -> ToolItem: ...
    def get_draw(self) -> bool: ...
    def set_draw(self, draw: bool) -> None: ...

class Settings(GObject.Object, StyleProvider): 
    @classmethod
    def get_default(cls) -> Settings: ...
    @classmethod
    def get_for_screen(cls, screen: Gdk.Screen) -> Settings: ...
    @classmethod
    def install_property(cls, pspec: GObject.ParamSpec) -> None: ...
    @classmethod
    def install_property_parser(cls, pspec: GObject.ParamSpec, parser: RcPropertyParser) -> None: ...
    def reset_property(self, name: str) -> None: ...
    def set_double_property(self, name: str, v_double: float, origin: str) -> None: ...
    def set_long_property(self, name: str, v_long: int, origin: str) -> None: ...
    def set_property_value(self, name: str, svalue: SettingsValue) -> None: ...
    def set_string_property(self, name: str, v_string: str, origin: str) -> None: ...

class ShortcutLabel(Box, Atk.ImplementorIface, Buildable, Orientable): 
    @classmethod
    def new(cls, accelerator: str) -> Widget: ...
    def get_accelerator(self) -> str: ...
    def get_disabled_text(self) -> str: ...
    def set_accelerator(self, accelerator: str) -> None: ...
    def set_disabled_text(self, disabled_text: str) -> None: ...

class ShortcutsGroup(Box, Atk.ImplementorIface, Buildable, Orientable): ...

class ShortcutsSection(Box, Atk.ImplementorIface, Buildable, Orientable): ...

class ShortcutsShortcut(Box, Atk.ImplementorIface, Buildable, Orientable): ...

class ShortcutsWindow(Window, Atk.ImplementorIface, Buildable): ...

class SizeGroup(GObject.Object, Buildable): 
    @classmethod
    def new(cls, mode: SizeGroupMode) -> SizeGroup: ...
    def add_widget(self, widget: Widget) -> None: ...
    def get_ignore_hidden(self) -> bool: ...
    def get_mode(self) -> SizeGroupMode: ...
    def get_widgets(self) -> GLib.SList: ...
    def remove_widget(self, widget: Widget) -> None: ...
    def set_ignore_hidden(self, ignore_hidden: bool) -> None: ...
    def set_mode(self, mode: SizeGroupMode) -> None: ...

class Socket(Container, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls) -> Widget: ...
    def add_id(self, window: xlib.Window) -> None: ...
    def get_id(self) -> xlib.Window: ...
    def get_plug_window(self) -> Gdk.Window: ...

class SocketAccessible(ContainerAccessible, Atk.Component): 
    def embed(self, path: str) -> None: ...

class SpinButton(Entry, Atk.ImplementorIface, Buildable, CellEditable, Editable, Orientable): 
    @classmethod
    def new(cls, adjustment: Adjustment, climb_rate: float, digits: int) -> Widget: ...
    def configure(self, adjustment: Adjustment, climb_rate: float, digits: int) -> None: ...
    def get_adjustment(self) -> Adjustment: ...
    def get_digits(self) -> int: ...
    def get_increments(self, step: float, page: float) -> None: ...
    def get_numeric(self) -> bool: ...
    def get_range(self, min: float, max: float) -> None: ...
    def get_snap_to_ticks(self) -> bool: ...
    def get_update_policy(self) -> SpinButtonUpdatePolicy: ...
    def get_value(self) -> float: ...
    def get_value_as_int(self) -> int: ...
    def get_wrap(self) -> bool: ...
    def set_adjustment(self, adjustment: Adjustment) -> None: ...
    def set_digits(self, digits: int) -> None: ...
    def set_increments(self, step: float, page: float) -> None: ...
    def set_numeric(self, numeric: bool) -> None: ...
    def set_range(self, min: float, max: float) -> None: ...
    def set_snap_to_ticks(self, snap_to_ticks: bool) -> None: ...
    def set_update_policy(self, policy: SpinButtonUpdatePolicy) -> None: ...
    def set_value(self, value: float) -> None: ...
    def set_wrap(self, wrap: bool) -> None: ...
    def spin(self, direction: SpinType, increment: float) -> None: ...
    def update(self) -> None: ...

class SpinButtonAccessible(EntryAccessible, Atk.Action, Atk.Component, Atk.EditableText, Atk.Text, Atk.Value): ...

class Spinner(Widget, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls) -> Widget: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...

class SpinnerAccessible(WidgetAccessible, Atk.Component, Atk.Image): ...

class Stack(Container, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls) -> Widget: ...
    def add_named(self, child: Widget, name: str) -> None: ...
    def add_titled(self, child: Widget, name: str, title: str) -> None: ...
    def get_child_by_name(self, name: str) -> Widget: ...
    def get_hhomogeneous(self) -> bool: ...
    def get_homogeneous(self) -> bool: ...
    def get_interpolate_size(self) -> bool: ...
    def get_transition_duration(self) -> int: ...
    def get_transition_running(self) -> bool: ...
    def get_transition_type(self) -> StackTransitionType: ...
    def get_vhomogeneous(self) -> bool: ...
    def get_visible_child(self) -> Widget: ...
    def get_visible_child_name(self) -> str: ...
    def set_hhomogeneous(self, hhomogeneous: bool) -> None: ...
    def set_homogeneous(self, homogeneous: bool) -> None: ...
    def set_interpolate_size(self, interpolate_size: bool) -> None: ...
    def set_transition_duration(self, duration: int) -> None: ...
    def set_transition_type(self, transition: StackTransitionType) -> None: ...
    def set_vhomogeneous(self, vhomogeneous: bool) -> None: ...
    def set_visible_child(self, child: Widget) -> None: ...
    def set_visible_child_full(self, name: str, transition: StackTransitionType) -> None: ...
    def set_visible_child_name(self, name: str) -> None: ...

class StackAccessible(ContainerAccessible, Atk.Component): ...

class StackSidebar(Bin, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_stack(self) -> Stack: ...
    def set_stack(self, stack: Stack) -> None: ...

class StackSwitcher(Box, Atk.ImplementorIface, Buildable, Orientable): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_stack(self) -> Stack: ...
    def set_stack(self, stack: Stack) -> None: ...

class StatusIcon(GObject.Object): 
    @classmethod
    def new(cls) -> StatusIcon: ...
    @classmethod
    def position_menu(cls, menu: Menu, x: int, y: int, push_in: bool, user_data: StatusIcon) -> None: ...
    def get_geometry(self, screen: Gdk.Screen, area: Gdk.Rectangle, orientation: Orientation) -> bool: ...
    def get_gicon(self) -> Gio.Icon: ...
    def get_has_tooltip(self) -> bool: ...
    def get_icon_name(self) -> str: ...
    def get_pixbuf(self) -> GdkPixbuf.Pixbuf: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_size(self) -> int: ...
    def get_stock(self) -> str: ...
    def get_storage_type(self) -> ImageType: ...
    def get_title(self) -> str: ...
    def get_tooltip_markup(self) -> str: ...
    def get_tooltip_text(self) -> str: ...
    def get_visible(self) -> bool: ...
    def get_x11_window_id(self) -> int: ...
    def is_embedded(self) -> bool: ...
    def set_from_file(self, filename: filename) -> None: ...
    def set_from_gicon(self, icon: Gio.Icon) -> None: ...
    def set_from_icon_name(self, icon_name: str) -> None: ...
    def set_from_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf) -> None: ...
    def set_from_stock(self, stock_id: str) -> None: ...
    def set_has_tooltip(self, has_tooltip: bool) -> None: ...
    def set_name(self, name: str) -> None: ...
    def set_screen(self, screen: Gdk.Screen) -> None: ...
    def set_title(self, title: str) -> None: ...
    def set_tooltip_markup(self, markup: str) -> None: ...
    def set_tooltip_text(self, text: str) -> None: ...
    def set_visible(self, visible: bool) -> None: ...

class Statusbar(Box, Atk.ImplementorIface, Buildable, Orientable): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_context_id(self, context_description: str) -> int: ...
    def get_message_area(self) -> Box: ...
    def pop(self, context_id: int) -> None: ...
    def push(self, context_id: int, text: str) -> int: ...
    def remove(self, context_id: int, message_id: int) -> None: ...
    def remove_all(self, context_id: int) -> None: ...

class StatusbarAccessible(ContainerAccessible, Atk.Component): ...

class Style(GObject.Object): 
    @classmethod
    def new(cls) -> Style: ...
    def apply_default_background(self, cr: cairo.Context, window: Gdk.Window, state_type: StateType, x: int, y: int, width: int, height: int) -> None: ...
    def attach(self, window: Gdk.Window) -> Style: ...
    def copy(self) -> Style: ...
    def detach(self) -> None: ...
    def get(self, widget_type: GObject.Type, first_property_name: str) -> None: ...
    def get_style_property(self, widget_type: GObject.Type, property_name: str, value: GObject.Value) -> None: ...
    def get_valist(self, widget_type: GObject.Type, first_property_name: str, var_args: va_list) -> None: ...
    def has_context(self) -> bool: ...
    def lookup_color(self, color_name: str, color: Gdk.Color) -> bool: ...
    def lookup_icon_set(self, stock_id: str) -> IconSet: ...
    def render_icon(self, source: IconSource, direction: TextDirection, state: StateType, size: int, widget: Widget, detail: str) -> GdkPixbuf.Pixbuf: ...
    def set_background(self, window: Gdk.Window, state_type: StateType) -> None: ...

class StyleContext(GObject.Object): 
    @classmethod
    def new(cls) -> StyleContext: ...
    @classmethod
    def add_provider_for_screen(cls, screen: Gdk.Screen, provider: StyleProvider, priority: int) -> None: ...
    @classmethod
    def remove_provider_for_screen(cls, screen: Gdk.Screen, provider: StyleProvider) -> None: ...
    @classmethod
    def reset_widgets(cls, screen: Gdk.Screen) -> None: ...
    def add_class(self, class_name: str) -> None: ...
    def add_provider(self, provider: StyleProvider, priority: int) -> None: ...
    def add_region(self, region_name: str, flags: RegionFlags) -> None: ...
    def cancel_animations(self, region_id: object) -> None: ...
    def get(self, state: StateFlags) -> None: ...
    def get_background_color(self, state: StateFlags, color: Gdk.RGBA) -> None: ...
    def get_border(self, state: StateFlags, border: Border) -> None: ...
    def get_border_color(self, state: StateFlags, color: Gdk.RGBA) -> None: ...
    def get_color(self, state: StateFlags, color: Gdk.RGBA) -> None: ...
    def get_direction(self) -> TextDirection: ...
    def get_font(self, state: StateFlags) -> Pango.FontDescription: ...
    def get_frame_clock(self) -> Gdk.FrameClock: ...
    def get_junction_sides(self) -> JunctionSides: ...
    def get_margin(self, state: StateFlags, margin: Border) -> None: ...
    def get_padding(self, state: StateFlags, padding: Border) -> None: ...
    def get_parent(self) -> StyleContext: ...
    def get_path(self) -> WidgetPath: ...
    def get_property(self, property: str, state: StateFlags, value: GObject.Value) -> None: ...
    def get_scale(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_section(self, property: str) -> CssSection: ...
    def get_state(self) -> StateFlags: ...
    def get_style(self) -> None: ...
    def get_style_property(self, property_name: str, value: GObject.Value) -> None: ...
    def get_style_valist(self, args: va_list) -> None: ...
    def get_valist(self, state: StateFlags, args: va_list) -> None: ...
    def has_class(self, class_name: str) -> bool: ...
    def has_region(self, region_name: str, flags_return: RegionFlags) -> bool: ...
    def invalidate(self) -> None: ...
    def list_classes(self) -> GLib.List: ...
    def list_regions(self) -> GLib.List: ...
    def lookup_color(self, color_name: str, color: Gdk.RGBA) -> bool: ...
    def lookup_icon_set(self, stock_id: str) -> IconSet: ...
    def notify_state_change(self, window: Gdk.Window, region_id: object, state: StateType, state_value: bool) -> None: ...
    def pop_animatable_region(self) -> None: ...
    def push_animatable_region(self, region_id: object) -> None: ...
    def remove_class(self, class_name: str) -> None: ...
    def remove_provider(self, provider: StyleProvider) -> None: ...
    def remove_region(self, region_name: str) -> None: ...
    def restore(self) -> None: ...
    def save(self) -> None: ...
    def scroll_animations(self, window: Gdk.Window, dx: int, dy: int) -> None: ...
    def set_background(self, window: Gdk.Window) -> None: ...
    def set_direction(self, direction: TextDirection) -> None: ...
    def set_frame_clock(self, frame_clock: Gdk.FrameClock) -> None: ...
    def set_junction_sides(self, sides: JunctionSides) -> None: ...
    def set_parent(self, parent: StyleContext) -> None: ...
    def set_path(self, path: WidgetPath) -> None: ...
    def set_scale(self, scale: int) -> None: ...
    def set_screen(self, screen: Gdk.Screen) -> None: ...
    def set_state(self, flags: StateFlags) -> None: ...
    def state_is_running(self, state: StateType, progress: float) -> bool: ...
    def to_string(self, flags: StyleContextPrintFlags) -> str: ...

class StyleProperties(GObject.Object, StyleProvider): 
    @classmethod
    def new(cls) -> StyleProperties: ...
    @classmethod
    def lookup_property(cls, property_name: str, parse_func: StylePropertyParser, pspec: GObject.ParamSpec) -> bool: ...
    @classmethod
    def register_property(cls, parse_func: StylePropertyParser, pspec: GObject.ParamSpec) -> None: ...
    def clear(self) -> None: ...
    def get(self, state: StateFlags) -> None: ...
    def get_property(self, property: str, state: StateFlags, value: GObject.Value) -> bool: ...
    def get_valist(self, state: StateFlags, args: va_list) -> None: ...
    def lookup_color(self, name: str) -> SymbolicColor: ...
    def map_color(self, name: str, color: SymbolicColor) -> None: ...
    def merge(self, props_to_merge: StyleProperties, replace: bool) -> None: ...
    def set(self, state: StateFlags) -> None: ...
    def set_property(self, property: str, state: StateFlags, value: GObject.Value) -> None: ...
    def set_valist(self, state: StateFlags, args: va_list) -> None: ...
    def unset_property(self, property: str, state: StateFlags) -> None: ...

class Switch(Widget, Atk.ImplementorIface, Actionable, Activatable, Buildable): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_active(self) -> bool: ...
    def get_state(self) -> bool: ...
    def set_active(self, is_active: bool) -> None: ...
    def set_state(self, state: bool) -> None: ...

class SwitchAccessible(WidgetAccessible, Atk.Action, Atk.Component): ...

class Table(Container, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls, rows: int, columns: int, homogeneous: bool) -> Widget: ...
    def attach(self, child: Widget, left_attach: int, right_attach: int, top_attach: int, bottom_attach: int, xoptions: AttachOptions, yoptions: AttachOptions, xpadding: int, ypadding: int) -> None: ...
    def attach_defaults(self, widget: Widget, left_attach: int, right_attach: int, top_attach: int, bottom_attach: int) -> None: ...
    def get_col_spacing(self, column: int) -> int: ...
    def get_default_col_spacing(self) -> int: ...
    def get_default_row_spacing(self) -> int: ...
    def get_homogeneous(self) -> bool: ...
    def get_row_spacing(self, row: int) -> int: ...
    def get_size(self, rows: int, columns: int) -> None: ...
    def resize(self, rows: int, columns: int) -> None: ...
    def set_col_spacing(self, column: int, spacing: int) -> None: ...
    def set_col_spacings(self, spacing: int) -> None: ...
    def set_homogeneous(self, homogeneous: bool) -> None: ...
    def set_row_spacing(self, row: int, spacing: int) -> None: ...
    def set_row_spacings(self, spacing: int) -> None: ...

class TearoffMenuItem(MenuItem, Atk.ImplementorIface, Actionable, Activatable, Buildable): 
    @classmethod
    def new(cls) -> Widget: ...

class TextBuffer(GObject.Object): 
    @classmethod
    def new(cls, table: TextTagTable) -> TextBuffer: ...
    def add_mark(self, mark: TextMark, where: TextIter) -> None: ...
    def add_selection_clipboard(self, clipboard: Clipboard) -> None: ...
    def apply_tag(self, tag: TextTag, start: TextIter, end: TextIter) -> None: ...
    def apply_tag_by_name(self, name: str, start: TextIter, end: TextIter) -> None: ...
    def backspace(self, iter: TextIter, interactive: bool, default_editable: bool) -> bool: ...
    def begin_user_action(self) -> None: ...
    def copy_clipboard(self, clipboard: Clipboard) -> None: ...
    def create_child_anchor(self, iter: TextIter) -> TextChildAnchor: ...
    def create_mark(self, mark_name: str, where: TextIter, left_gravity: bool) -> TextMark: ...
    def create_tag(self, tag_name: str, first_property_name: str) -> TextTag: ...
    def cut_clipboard(self, clipboard: Clipboard, default_editable: bool) -> None: ...
    def delete(self, start: TextIter, end: TextIter) -> None: ...
    def delete_interactive(self, start_iter: TextIter, end_iter: TextIter, default_editable: bool) -> bool: ...
    def delete_mark(self, mark: TextMark) -> None: ...
    def delete_mark_by_name(self, name: str) -> None: ...
    def delete_selection(self, interactive: bool, default_editable: bool) -> bool: ...
    def deserialize(self, content_buffer: TextBuffer, format: Gdk.Atom, iter: TextIter, data: list[int], length: gsize) -> bool: ...
    def deserialize_get_can_create_tags(self, format: Gdk.Atom) -> bool: ...
    def deserialize_set_can_create_tags(self, format: Gdk.Atom, can_create_tags: bool) -> None: ...
    def end_user_action(self) -> None: ...
    def get_bounds(self, start: TextIter, end: TextIter) -> None: ...
    def get_char_count(self) -> int: ...
    def get_copy_target_list(self) -> TargetList: ...
    def get_deserialize_formats(self, n_formats: int) -> list[Gdk.Atom]: ...
    def get_end_iter(self, iter: TextIter) -> None: ...
    def get_has_selection(self) -> bool: ...
    def get_insert(self) -> TextMark: ...
    def get_iter_at_child_anchor(self, iter: TextIter, anchor: TextChildAnchor) -> None: ...
    def get_iter_at_line(self, iter: TextIter, line_number: int) -> None: ...
    def get_iter_at_line_index(self, iter: TextIter, line_number: int, byte_index: int) -> None: ...
    def get_iter_at_line_offset(self, iter: TextIter, line_number: int, char_offset: int) -> None: ...
    def get_iter_at_mark(self, iter: TextIter, mark: TextMark) -> None: ...
    def get_iter_at_offset(self, iter: TextIter, char_offset: int) -> None: ...
    def get_line_count(self) -> int: ...
    def get_mark(self, name: str) -> TextMark: ...
    def get_modified(self) -> bool: ...
    def get_paste_target_list(self) -> TargetList: ...
    def get_selection_bound(self) -> TextMark: ...
    def get_selection_bounds(self, start: TextIter, end: TextIter) -> bool: ...
    def get_serialize_formats(self, n_formats: int) -> list[Gdk.Atom]: ...
    def get_slice(self, start: TextIter, end: TextIter, include_hidden_chars: bool) -> str: ...
    def get_start_iter(self, iter: TextIter) -> None: ...
    def get_tag_table(self) -> TextTagTable: ...
    def get_text(self, start: TextIter, end: TextIter, include_hidden_chars: bool) -> str: ...
    def insert(self, iter: TextIter, text: str, len: int) -> None: ...
    def insert_at_cursor(self, text: str, len: int) -> None: ...
    def insert_child_anchor(self, iter: TextIter, anchor: TextChildAnchor) -> None: ...
    def insert_interactive(self, iter: TextIter, text: str, len: int, default_editable: bool) -> bool: ...
    def insert_interactive_at_cursor(self, text: str, len: int, default_editable: bool) -> bool: ...
    def insert_markup(self, iter: TextIter, markup: str, len: int) -> None: ...
    def insert_pixbuf(self, iter: TextIter, pixbuf: GdkPixbuf.Pixbuf) -> None: ...
    def insert_range(self, iter: TextIter, start: TextIter, end: TextIter) -> None: ...
    def insert_range_interactive(self, iter: TextIter, start: TextIter, end: TextIter, default_editable: bool) -> bool: ...
    def insert_with_tags(self, iter: TextIter, text: str, len: int, first_tag: TextTag) -> None: ...
    def insert_with_tags_by_name(self, iter: TextIter, text: str, len: int, first_tag_name: str) -> None: ...
    def move_mark(self, mark: TextMark, where: TextIter) -> None: ...
    def move_mark_by_name(self, name: str, where: TextIter) -> None: ...
    def paste_clipboard(self, clipboard: Clipboard, override_location: TextIter, default_editable: bool) -> None: ...
    def place_cursor(self, where: TextIter) -> None: ...
    def register_deserialize_format(self, mime_type: str, function: TextBufferDeserializeFunc, user_data: object, user_data_destroy: GLib.DestroyNotify) -> Gdk.Atom: ...
    def register_deserialize_tagset(self, tagset_name: str) -> Gdk.Atom: ...
    def register_serialize_format(self, mime_type: str, function: TextBufferSerializeFunc, user_data: object, user_data_destroy: GLib.DestroyNotify) -> Gdk.Atom: ...
    def register_serialize_tagset(self, tagset_name: str) -> Gdk.Atom: ...
    def remove_all_tags(self, start: TextIter, end: TextIter) -> None: ...
    def remove_selection_clipboard(self, clipboard: Clipboard) -> None: ...
    def remove_tag(self, tag: TextTag, start: TextIter, end: TextIter) -> None: ...
    def remove_tag_by_name(self, name: str, start: TextIter, end: TextIter) -> None: ...
    def select_range(self, ins: TextIter, bound: TextIter) -> None: ...
    def serialize(self, content_buffer: TextBuffer, format: Gdk.Atom, start: TextIter, end: TextIter, length: gsize) -> list[int]: ...
    def set_modified(self, setting: bool) -> None: ...
    def set_text(self, text: str, len: int) -> None: ...
    def unregister_deserialize_format(self, format: Gdk.Atom) -> None: ...
    def unregister_serialize_format(self, format: Gdk.Atom) -> None: ...

class TextCellAccessible(RendererCellAccessible, Atk.Action, Atk.Component, Atk.TableCell, Atk.Text): ...

class TextChildAnchor(GObject.Object): 
    @classmethod
    def new(cls) -> TextChildAnchor: ...
    def get_deleted(self) -> bool: ...
    def get_widgets(self) -> GLib.List: ...

class TextMark(GObject.Object): 
    @classmethod
    def new(cls, name: str, left_gravity: bool) -> TextMark: ...
    def get_buffer(self) -> TextBuffer: ...
    def get_deleted(self) -> bool: ...
    def get_left_gravity(self) -> bool: ...
    def get_name(self) -> str: ...
    def get_visible(self) -> bool: ...
    def set_visible(self, setting: bool) -> None: ...

class TextTag(GObject.Object): 
    @classmethod
    def new(cls, name: str) -> TextTag: ...
    def changed(self, size_changed: bool) -> None: ...
    def event(self, event_object: GObject.Object, event: Gdk.Event, iter: TextIter) -> bool: ...
    def get_priority(self) -> int: ...
    def set_priority(self, priority: int) -> None: ...

class TextTagTable(GObject.Object, Buildable): 
    @classmethod
    def new(cls) -> TextTagTable: ...
    def add(self, tag: TextTag) -> bool: ...
    def foreach(self, func: TextTagTableForeach, data: object) -> None: ...
    def get_size(self) -> int: ...
    def lookup(self, name: str) -> TextTag: ...
    def remove(self, tag: TextTag) -> None: ...

class TextView(Container, Atk.ImplementorIface, Buildable, Scrollable): 
    @classmethod
    def new(cls) -> Widget: ...
    def add_child_at_anchor(self, child: Widget, anchor: TextChildAnchor) -> None: ...
    def add_child_in_window(self, child: Widget, which_window: TextWindowType, xpos: int, ypos: int) -> None: ...
    def backward_display_line(self, iter: TextIter) -> bool: ...
    def backward_display_line_start(self, iter: TextIter) -> bool: ...
    def buffer_to_window_coords(self, win: TextWindowType, buffer_x: int, buffer_y: int, window_x: int, window_y: int) -> None: ...
    def forward_display_line(self, iter: TextIter) -> bool: ...
    def forward_display_line_end(self, iter: TextIter) -> bool: ...
    def get_accepts_tab(self) -> bool: ...
    def get_border_window_size(self, type: TextWindowType) -> int: ...
    def get_bottom_margin(self) -> int: ...
    def get_buffer(self) -> TextBuffer: ...
    def get_cursor_locations(self, iter: TextIter, strong: Gdk.Rectangle, weak: Gdk.Rectangle) -> None: ...
    def get_cursor_visible(self) -> bool: ...
    def get_default_attributes(self) -> TextAttributes: ...
    def get_editable(self) -> bool: ...
    def get_hadjustment(self) -> Adjustment: ...
    def get_indent(self) -> int: ...
    def get_input_hints(self) -> InputHints: ...
    def get_input_purpose(self) -> InputPurpose: ...
    def get_iter_at_location(self, iter: TextIter, x: int, y: int) -> bool: ...
    def get_iter_at_position(self, iter: TextIter, trailing: int, x: int, y: int) -> bool: ...
    def get_iter_location(self, iter: TextIter, location: Gdk.Rectangle) -> None: ...
    def get_justification(self) -> Justification: ...
    def get_left_margin(self) -> int: ...
    def get_line_at_y(self, target_iter: TextIter, y: int, line_top: int) -> None: ...
    def get_line_yrange(self, iter: TextIter, y: int, height: int) -> None: ...
    def get_monospace(self) -> bool: ...
    def get_overwrite(self) -> bool: ...
    def get_pixels_above_lines(self) -> int: ...
    def get_pixels_below_lines(self) -> int: ...
    def get_pixels_inside_wrap(self) -> int: ...
    def get_right_margin(self) -> int: ...
    def get_tabs(self) -> Pango.TabArray: ...
    def get_top_margin(self) -> int: ...
    def get_vadjustment(self) -> Adjustment: ...
    def get_visible_rect(self, visible_rect: Gdk.Rectangle) -> None: ...
    def get_window(self, win: TextWindowType) -> Gdk.Window: ...
    def get_window_type(self, window: Gdk.Window) -> TextWindowType: ...
    def get_wrap_mode(self) -> WrapMode: ...
    def im_context_filter_keypress(self, event: Gdk.EventKey) -> bool: ...
    def move_child(self, child: Widget, xpos: int, ypos: int) -> None: ...
    def move_mark_onscreen(self, mark: TextMark) -> bool: ...
    def move_visually(self, iter: TextIter, count: int) -> bool: ...
    def place_cursor_onscreen(self) -> bool: ...
    def reset_cursor_blink(self) -> None: ...
    def reset_im_context(self) -> None: ...
    def scroll_mark_onscreen(self, mark: TextMark) -> None: ...
    def scroll_to_iter(self, iter: TextIter, within_margin: float, use_align: bool, xalign: float, yalign: float) -> bool: ...
    def scroll_to_mark(self, mark: TextMark, within_margin: float, use_align: bool, xalign: float, yalign: float) -> None: ...
    def set_accepts_tab(self, accepts_tab: bool) -> None: ...
    def set_border_window_size(self, type: TextWindowType, size: int) -> None: ...
    def set_bottom_margin(self, bottom_margin: int) -> None: ...
    def set_buffer(self, buffer: TextBuffer) -> None: ...
    def set_cursor_visible(self, setting: bool) -> None: ...
    def set_editable(self, setting: bool) -> None: ...
    def set_indent(self, indent: int) -> None: ...
    def set_input_hints(self, hints: InputHints) -> None: ...
    def set_input_purpose(self, purpose: InputPurpose) -> None: ...
    def set_justification(self, justification: Justification) -> None: ...
    def set_left_margin(self, left_margin: int) -> None: ...
    def set_monospace(self, monospace: bool) -> None: ...
    def set_overwrite(self, overwrite: bool) -> None: ...
    def set_pixels_above_lines(self, pixels_above_lines: int) -> None: ...
    def set_pixels_below_lines(self, pixels_below_lines: int) -> None: ...
    def set_pixels_inside_wrap(self, pixels_inside_wrap: int) -> None: ...
    def set_right_margin(self, right_margin: int) -> None: ...
    def set_tabs(self, tabs: Pango.TabArray) -> None: ...
    def set_top_margin(self, top_margin: int) -> None: ...
    def set_wrap_mode(self, wrap_mode: WrapMode) -> None: ...
    def starts_display_line(self, iter: TextIter) -> bool: ...
    def window_to_buffer_coords(self, win: TextWindowType, window_x: int, window_y: int, buffer_x: int, buffer_y: int) -> None: ...

class TextViewAccessible(ContainerAccessible, Atk.Component, Atk.EditableText, Atk.StreamableContent, Atk.Text): ...

class ThemingEngine(GObject.Object): 
    @classmethod
    def load(cls, name: str) -> ThemingEngine: ...
    @classmethod
    def register_property(cls, name_space: str, parse_func: StylePropertyParser, pspec: GObject.ParamSpec) -> None: ...
    def get(self, state: StateFlags) -> None: ...
    def get_background_color(self, state: StateFlags, color: Gdk.RGBA) -> None: ...
    def get_border(self, state: StateFlags, border: Border) -> None: ...
    def get_border_color(self, state: StateFlags, color: Gdk.RGBA) -> None: ...
    def get_color(self, state: StateFlags, color: Gdk.RGBA) -> None: ...
    def get_direction(self) -> TextDirection: ...
    def get_font(self, state: StateFlags) -> Pango.FontDescription: ...
    def get_junction_sides(self) -> JunctionSides: ...
    def get_margin(self, state: StateFlags, margin: Border) -> None: ...
    def get_padding(self, state: StateFlags, padding: Border) -> None: ...
    def get_path(self) -> WidgetPath: ...
    def get_property(self, property: str, state: StateFlags, value: GObject.Value) -> None: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_state(self) -> StateFlags: ...
    def get_style(self) -> None: ...
    def get_style_property(self, property_name: str, value: GObject.Value) -> None: ...
    def get_style_valist(self, args: va_list) -> None: ...
    def get_valist(self, state: StateFlags, args: va_list) -> None: ...
    def has_class(self, style_class: str) -> bool: ...
    def has_region(self, style_region: str, flags: RegionFlags) -> bool: ...
    def lookup_color(self, color_name: str, color: Gdk.RGBA) -> bool: ...
    def state_is_running(self, state: StateType, progress: float) -> bool: ...

class ToggleAction(Action, Buildable): 
    @classmethod
    def new(cls, name: str, label: str, tooltip: str, stock_id: str) -> ToggleAction: ...
    def get_active(self) -> bool: ...
    def get_draw_as_radio(self) -> bool: ...
    def set_active(self, is_active: bool) -> None: ...
    def set_draw_as_radio(self, draw_as_radio: bool) -> None: ...
    def toggled(self) -> None: ...

class ToggleButton(Button, Atk.ImplementorIface, Actionable, Activatable, Buildable): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_active(self) -> bool: ...
    def get_inconsistent(self) -> bool: ...
    def get_mode(self) -> bool: ...
    def set_active(self, is_active: bool) -> None: ...
    def set_inconsistent(self, setting: bool) -> None: ...
    def set_mode(self, draw_indicator: bool) -> None: ...
    def toggled(self) -> None: ...

class ToggleButtonAccessible(ButtonAccessible, Atk.Action, Atk.Component, Atk.Image): ...

class ToggleToolButton(ToolButton, Atk.ImplementorIface, Actionable, Activatable, Buildable): 
    @classmethod
    def new(cls) -> ToolItem: ...
    def get_active(self) -> bool: ...
    def set_active(self, is_active: bool) -> None: ...

class ToolButton(ToolItem, Atk.ImplementorIface, Actionable, Activatable, Buildable): 
    @classmethod
    def new(cls, icon_widget: Widget, label: str) -> ToolItem: ...
    def get_icon_name(self) -> str: ...
    def get_icon_widget(self) -> Widget: ...
    def get_label(self) -> str: ...
    def get_label_widget(self) -> Widget: ...
    def get_stock_id(self) -> str: ...
    def get_use_underline(self) -> bool: ...
    def set_icon_name(self, icon_name: str) -> None: ...
    def set_icon_widget(self, icon_widget: Widget) -> None: ...
    def set_label(self, label: str) -> None: ...
    def set_label_widget(self, label_widget: Widget) -> None: ...
    def set_stock_id(self, stock_id: str) -> None: ...
    def set_use_underline(self, use_underline: bool) -> None: ...

class ToolItem(Bin, Atk.ImplementorIface, Activatable, Buildable): 
    @classmethod
    def new(cls) -> ToolItem: ...
    def get_ellipsize_mode(self) -> Pango.EllipsizeMode: ...
    def get_expand(self) -> bool: ...
    def get_homogeneous(self) -> bool: ...
    def get_icon_size(self) -> int: ...
    def get_is_important(self) -> bool: ...
    def get_orientation(self) -> Orientation: ...
    def get_proxy_menu_item(self, menu_item_id: str) -> Widget: ...
    def get_relief_style(self) -> ReliefStyle: ...
    def get_text_alignment(self) -> float: ...
    def get_text_orientation(self) -> Orientation: ...
    def get_text_size_group(self) -> SizeGroup: ...
    def get_toolbar_style(self) -> ToolbarStyle: ...
    def get_use_drag_window(self) -> bool: ...
    def get_visible_horizontal(self) -> bool: ...
    def get_visible_vertical(self) -> bool: ...
    def rebuild_menu(self) -> None: ...
    def retrieve_proxy_menu_item(self) -> Widget: ...
    def set_expand(self, expand: bool) -> None: ...
    def set_homogeneous(self, homogeneous: bool) -> None: ...
    def set_is_important(self, is_important: bool) -> None: ...
    def set_proxy_menu_item(self, menu_item_id: str, menu_item: Widget) -> None: ...
    def set_tooltip_markup(self, markup: str) -> None: ...
    def set_tooltip_text(self, text: str) -> None: ...
    def set_use_drag_window(self, use_drag_window: bool) -> None: ...
    def set_visible_horizontal(self, visible_horizontal: bool) -> None: ...
    def set_visible_vertical(self, visible_vertical: bool) -> None: ...
    def toolbar_reconfigured(self) -> None: ...

class ToolItemGroup(Container, Atk.ImplementorIface, Buildable, ToolShell): 
    @classmethod
    def new(cls, label: str) -> Widget: ...
    def get_collapsed(self) -> bool: ...
    def get_drop_item(self, x: int, y: int) -> ToolItem: ...
    def get_ellipsize(self) -> Pango.EllipsizeMode: ...
    def get_header_relief(self) -> ReliefStyle: ...
    def get_item_position(self, item: ToolItem) -> int: ...
    def get_label(self) -> str: ...
    def get_label_widget(self) -> Widget: ...
    def get_n_items(self) -> int: ...
    def get_nth_item(self, index: int) -> ToolItem: ...
    def insert(self, item: ToolItem, position: int) -> None: ...
    def set_collapsed(self, collapsed: bool) -> None: ...
    def set_ellipsize(self, ellipsize: Pango.EllipsizeMode) -> None: ...
    def set_header_relief(self, style: ReliefStyle) -> None: ...
    def set_item_position(self, item: ToolItem, position: int) -> None: ...
    def set_label(self, label: str) -> None: ...
    def set_label_widget(self, label_widget: Widget) -> None: ...

class ToolPalette(Container, Atk.ImplementorIface, Buildable, Orientable, Scrollable): 
    @classmethod
    def new(cls) -> Widget: ...
    @classmethod
    def get_drag_target_group(cls) -> TargetEntry: ...
    @classmethod
    def get_drag_target_item(cls) -> TargetEntry: ...
    def add_drag_dest(self, widget: Widget, flags: DestDefaults, targets: ToolPaletteDragTargets, actions: Gdk.DragAction) -> None: ...
    def get_drag_item(self, selection: SelectionData) -> Widget: ...
    def get_drop_group(self, x: int, y: int) -> ToolItemGroup: ...
    def get_drop_item(self, x: int, y: int) -> ToolItem: ...
    def get_exclusive(self, group: ToolItemGroup) -> bool: ...
    def get_expand(self, group: ToolItemGroup) -> bool: ...
    def get_group_position(self, group: ToolItemGroup) -> int: ...
    def get_hadjustment(self) -> Adjustment: ...
    def get_icon_size(self) -> int: ...
    def get_style(self) -> ToolbarStyle: ...
    def get_vadjustment(self) -> Adjustment: ...
    def set_drag_source(self, targets: ToolPaletteDragTargets) -> None: ...
    def set_exclusive(self, group: ToolItemGroup, exclusive: bool) -> None: ...
    def set_expand(self, group: ToolItemGroup, expand: bool) -> None: ...
    def set_group_position(self, group: ToolItemGroup, position: int) -> None: ...
    def set_icon_size(self, icon_size: int) -> None: ...
    def set_style(self, style: ToolbarStyle) -> None: ...
    def unset_icon_size(self) -> None: ...
    def unset_style(self) -> None: ...

class Toolbar(Container, Atk.ImplementorIface, Buildable, Orientable, ToolShell): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_drop_index(self, x: int, y: int) -> int: ...
    def get_icon_size(self) -> IconSize: ...
    def get_item_index(self, item: ToolItem) -> int: ...
    def get_n_items(self) -> int: ...
    def get_nth_item(self, n: int) -> ToolItem: ...
    def get_relief_style(self) -> ReliefStyle: ...
    def get_show_arrow(self) -> bool: ...
    def get_style(self) -> ToolbarStyle: ...
    def insert(self, item: ToolItem, pos: int) -> None: ...
    def set_drop_highlight_item(self, tool_item: ToolItem, index_: int) -> None: ...
    def set_icon_size(self, icon_size: IconSize) -> None: ...
    def set_show_arrow(self, show_arrow: bool) -> None: ...
    def set_style(self, style: ToolbarStyle) -> None: ...
    def unset_icon_size(self) -> None: ...
    def unset_style(self) -> None: ...

class Tooltip(GObject.Object): 
    @classmethod
    def trigger_tooltip_query(cls, display: Gdk.Display) -> None: ...
    def set_custom(self, custom_widget: Widget) -> None: ...
    def set_icon(self, pixbuf: GdkPixbuf.Pixbuf) -> None: ...
    def set_icon_from_gicon(self, gicon: Gio.Icon, size: int) -> None: ...
    def set_icon_from_icon_name(self, icon_name: str, size: int) -> None: ...
    def set_icon_from_stock(self, stock_id: str, size: int) -> None: ...
    def set_markup(self, markup: str) -> None: ...
    def set_text(self, text: str) -> None: ...
    def set_tip_area(self, rect: Gdk.Rectangle) -> None: ...

class ToplevelAccessible(Atk.Object): 
    def get_children(self) -> GLib.List: ...

class TreeModelFilter(GObject.Object, TreeDragSource, TreeModel): 
    def clear_cache(self) -> None: ...
    def convert_child_iter_to_iter(self, filter_iter: TreeIter, child_iter: TreeIter) -> bool: ...
    def convert_child_path_to_path(self, child_path: TreePath) -> TreePath: ...
    def convert_iter_to_child_iter(self, child_iter: TreeIter, filter_iter: TreeIter) -> None: ...
    def convert_path_to_child_path(self, filter_path: TreePath) -> TreePath: ...
    def get_model(self) -> TreeModel: ...
    def refilter(self) -> None: ...
    def set_modify_func(self, n_columns: int, types: list[GObject.Type], func: TreeModelFilterModifyFunc, data: object, destroy: GLib.DestroyNotify) -> None: ...
    def set_visible_column(self, column: int) -> None: ...
    def set_visible_func(self, func: TreeModelFilterVisibleFunc, data: object, destroy: GLib.DestroyNotify) -> None: ...

class TreeModelSort(GObject.Object, TreeDragSource, TreeModel, TreeSortable): 
    @classmethod
    def new_with_model(cls, child_model: TreeModel) -> TreeModelSort: ...
    def clear_cache(self) -> None: ...
    def convert_child_iter_to_iter(self, sort_iter: TreeIter, child_iter: TreeIter) -> bool: ...
    def convert_child_path_to_path(self, child_path: TreePath) -> TreePath: ...
    def convert_iter_to_child_iter(self, child_iter: TreeIter, sorted_iter: TreeIter) -> None: ...
    def convert_path_to_child_path(self, sorted_path: TreePath) -> TreePath: ...
    def get_model(self) -> TreeModel: ...
    def iter_is_valid(self, iter: TreeIter) -> bool: ...
    def reset_default_sort_func(self) -> None: ...

class TreeSelection(GObject.Object): 
    def count_selected_rows(self) -> int: ...
    def get_mode(self) -> SelectionMode: ...
    def get_select_function(self) -> TreeSelectionFunc: ...
    def get_selected(self, model: TreeModel, iter: TreeIter) -> bool: ...
    def get_selected_rows(self, model: TreeModel) -> GLib.List: ...
    def get_tree_view(self) -> TreeView: ...
    def get_user_data(self) -> object: ...
    def iter_is_selected(self, iter: TreeIter) -> bool: ...
    def path_is_selected(self, path: TreePath) -> bool: ...
    def select_all(self) -> None: ...
    def select_iter(self, iter: TreeIter) -> None: ...
    def select_path(self, path: TreePath) -> None: ...
    def select_range(self, start_path: TreePath, end_path: TreePath) -> None: ...
    def selected_foreach(self, func: TreeSelectionForeachFunc, data: object) -> None: ...
    def set_mode(self, type: SelectionMode) -> None: ...
    def set_select_function(self, func: TreeSelectionFunc, data: object, destroy: GLib.DestroyNotify) -> None: ...
    def unselect_all(self) -> None: ...
    def unselect_iter(self, iter: TreeIter) -> None: ...
    def unselect_path(self, path: TreePath) -> None: ...
    def unselect_range(self, start_path: TreePath, end_path: TreePath) -> None: ...

class TreeStore(GObject.Object, Buildable, TreeDragDest, TreeDragSource, TreeModel, TreeSortable): 
    @classmethod
    def new(cls, n_columns: int) -> TreeStore: ...
    def append(self, iter: TreeIter, parent: TreeIter) -> None: ...
    def clear(self) -> None: ...
    def insert(self, iter: TreeIter, parent: TreeIter, position: int) -> None: ...
    def insert_after(self, iter: TreeIter, parent: TreeIter, sibling: TreeIter) -> None: ...
    def insert_before(self, iter: TreeIter, parent: TreeIter, sibling: TreeIter) -> None: ...
    def insert_with_values(self, iter: TreeIter, parent: TreeIter, position: int) -> None: ...
    def insert_with_valuesv(self, iter: TreeIter, parent: TreeIter, position: int, columns: list[int], values: list[GObject.Value], n_values: int) -> None: ...
    def is_ancestor(self, iter: TreeIter, descendant: TreeIter) -> bool: ...
    def iter_depth(self, iter: TreeIter) -> int: ...
    def iter_is_valid(self, iter: TreeIter) -> bool: ...
    def move_after(self, iter: TreeIter, position: TreeIter) -> None: ...
    def move_before(self, iter: TreeIter, position: TreeIter) -> None: ...
    def prepend(self, iter: TreeIter, parent: TreeIter) -> None: ...
    def remove(self, iter: TreeIter) -> bool: ...
    def reorder(self, parent: TreeIter, new_order: list[int]) -> None: ...
    def set(self, iter: TreeIter) -> None: ...
    def set_column_types(self, n_columns: int, types: list[GObject.Type]) -> None: ...
    def set_valist(self, iter: TreeIter, var_args: va_list) -> None: ...
    def set_value(self, iter: TreeIter, column: int, value: GObject.Value) -> None: ...
    def set_valuesv(self, iter: TreeIter, columns: list[int], values: list[GObject.Value], n_values: int) -> None: ...
    def swap(self, a: TreeIter, b: TreeIter) -> None: ...

class TreeView(Container, Atk.ImplementorIface, Buildable, Scrollable): 
    @classmethod
    def new(cls) -> Widget: ...
    def append_column(self, column: TreeViewColumn) -> int: ...
    def collapse_all(self) -> None: ...
    def collapse_row(self, path: TreePath) -> bool: ...
    def columns_autosize(self) -> None: ...
    def convert_bin_window_to_tree_coords(self, bx: int, by: int, tx: int, ty: int) -> None: ...
    def convert_bin_window_to_widget_coords(self, bx: int, by: int, wx: int, wy: int) -> None: ...
    def convert_tree_to_bin_window_coords(self, tx: int, ty: int, bx: int, by: int) -> None: ...
    def convert_tree_to_widget_coords(self, tx: int, ty: int, wx: int, wy: int) -> None: ...
    def convert_widget_to_bin_window_coords(self, wx: int, wy: int, bx: int, by: int) -> None: ...
    def convert_widget_to_tree_coords(self, wx: int, wy: int, tx: int, ty: int) -> None: ...
    def create_row_drag_icon(self, path: TreePath) -> cairo.Surface: ...
    def enable_model_drag_dest(self, targets: list[TargetEntry], n_targets: int, actions: Gdk.DragAction) -> None: ...
    def enable_model_drag_source(self, start_button_mask: Gdk.ModifierType, targets: list[TargetEntry], n_targets: int, actions: Gdk.DragAction) -> None: ...
    def expand_all(self) -> None: ...
    def expand_row(self, path: TreePath, open_all: bool) -> bool: ...
    def expand_to_path(self, path: TreePath) -> None: ...
    def get_activate_on_single_click(self) -> bool: ...
    def get_background_area(self, path: TreePath, column: TreeViewColumn, rect: Gdk.Rectangle) -> None: ...
    def get_bin_window(self) -> Gdk.Window: ...
    def get_cell_area(self, path: TreePath, column: TreeViewColumn, rect: Gdk.Rectangle) -> None: ...
    def get_column(self, n: int) -> TreeViewColumn: ...
    def get_columns(self) -> GLib.List: ...
    def get_cursor(self, path: TreePath, focus_column: TreeViewColumn) -> None: ...
    def get_dest_row_at_pos(self, drag_x: int, drag_y: int, path: TreePath, pos: TreeViewDropPosition) -> bool: ...
    def get_drag_dest_row(self, path: TreePath, pos: TreeViewDropPosition) -> None: ...
    def get_enable_search(self) -> bool: ...
    def get_enable_tree_lines(self) -> bool: ...
    def get_expander_column(self) -> TreeViewColumn: ...
    def get_fixed_height_mode(self) -> bool: ...
    def get_grid_lines(self) -> TreeViewGridLines: ...
    def get_hadjustment(self) -> Adjustment: ...
    def get_headers_clickable(self) -> bool: ...
    def get_headers_visible(self) -> bool: ...
    def get_hover_expand(self) -> bool: ...
    def get_hover_selection(self) -> bool: ...
    def get_level_indentation(self) -> int: ...
    def get_model(self) -> TreeModel: ...
    def get_n_columns(self) -> int: ...
    def get_path_at_pos(self, x: int, y: int, path: TreePath, column: TreeViewColumn, cell_x: int, cell_y: int) -> bool: ...
    def get_reorderable(self) -> bool: ...
    def get_row_separator_func(self) -> TreeViewRowSeparatorFunc: ...
    def get_rubber_banding(self) -> bool: ...
    def get_rules_hint(self) -> bool: ...
    def get_search_column(self) -> int: ...
    def get_search_entry(self) -> Entry: ...
    def get_search_equal_func(self) -> TreeViewSearchEqualFunc: ...
    def get_search_position_func(self) -> TreeViewSearchPositionFunc: ...
    def get_selection(self) -> TreeSelection: ...
    def get_show_expanders(self) -> bool: ...
    def get_tooltip_column(self) -> int: ...
    def get_tooltip_context(self, x: int, y: int, keyboard_tip: bool, model: TreeModel, path: TreePath, iter: TreeIter) -> bool: ...
    def get_vadjustment(self) -> Adjustment: ...
    def get_visible_range(self, start_path: TreePath, end_path: TreePath) -> bool: ...
    def get_visible_rect(self, visible_rect: Gdk.Rectangle) -> None: ...
    def insert_column(self, column: TreeViewColumn, position: int) -> int: ...
    def insert_column_with_attributes(self, position: int, title: str, cell: CellRenderer) -> int: ...
    def insert_column_with_data_func(self, position: int, title: str, cell: CellRenderer, func: TreeCellDataFunc, data: object, dnotify: GLib.DestroyNotify) -> int: ...
    def is_blank_at_pos(self, x: int, y: int, path: TreePath, column: TreeViewColumn, cell_x: int, cell_y: int) -> bool: ...
    def is_rubber_banding_active(self) -> bool: ...
    def map_expanded_rows(self, func: TreeViewMappingFunc, data: object) -> None: ...
    def move_column_after(self, column: TreeViewColumn, base_column: TreeViewColumn) -> None: ...
    def remove_column(self, column: TreeViewColumn) -> int: ...
    def row_activated(self, path: TreePath, column: TreeViewColumn) -> None: ...
    def row_expanded(self, path: TreePath) -> bool: ...
    def scroll_to_cell(self, path: TreePath, column: TreeViewColumn, use_align: bool, row_align: float, col_align: float) -> None: ...
    def scroll_to_point(self, tree_x: int, tree_y: int) -> None: ...
    def set_activate_on_single_click(self, single: bool) -> None: ...
    def set_column_drag_function(self, func: TreeViewColumnDropFunc, user_data: object, destroy: GLib.DestroyNotify) -> None: ...
    def set_cursor(self, path: TreePath, focus_column: TreeViewColumn, start_editing: bool) -> None: ...
    def set_cursor_on_cell(self, path: TreePath, focus_column: TreeViewColumn, focus_cell: CellRenderer, start_editing: bool) -> None: ...
    def set_destroy_count_func(self, func: TreeDestroyCountFunc, data: object, destroy: GLib.DestroyNotify) -> None: ...
    def set_drag_dest_row(self, path: TreePath, pos: TreeViewDropPosition) -> None: ...
    def set_enable_search(self, enable_search: bool) -> None: ...
    def set_enable_tree_lines(self, enabled: bool) -> None: ...
    def set_expander_column(self, column: TreeViewColumn) -> None: ...
    def set_fixed_height_mode(self, enable: bool) -> None: ...
    def set_grid_lines(self, grid_lines: TreeViewGridLines) -> None: ...
    def set_hadjustment(self, adjustment: Adjustment) -> None: ...
    def set_headers_clickable(self, setting: bool) -> None: ...
    def set_headers_visible(self, headers_visible: bool) -> None: ...
    def set_hover_expand(self, expand: bool) -> None: ...
    def set_hover_selection(self, hover: bool) -> None: ...
    def set_level_indentation(self, indentation: int) -> None: ...
    def set_model(self, model: TreeModel) -> None: ...
    def set_reorderable(self, reorderable: bool) -> None: ...
    def set_row_separator_func(self, func: TreeViewRowSeparatorFunc, data: object, destroy: GLib.DestroyNotify) -> None: ...
    def set_rubber_banding(self, enable: bool) -> None: ...
    def set_rules_hint(self, setting: bool) -> None: ...
    def set_search_column(self, column: int) -> None: ...
    def set_search_entry(self, entry: Entry) -> None: ...
    def set_search_equal_func(self, search_equal_func: TreeViewSearchEqualFunc, search_user_data: object, search_destroy: GLib.DestroyNotify) -> None: ...
    def set_search_position_func(self, func: TreeViewSearchPositionFunc, data: object, destroy: GLib.DestroyNotify) -> None: ...
    def set_show_expanders(self, enabled: bool) -> None: ...
    def set_tooltip_cell(self, tooltip: Tooltip, path: TreePath, column: TreeViewColumn, cell: CellRenderer) -> None: ...
    def set_tooltip_column(self, column: int) -> None: ...
    def set_tooltip_row(self, tooltip: Tooltip, path: TreePath) -> None: ...
    def set_vadjustment(self, adjustment: Adjustment) -> None: ...
    def unset_rows_drag_dest(self) -> None: ...
    def unset_rows_drag_source(self) -> None: ...

class TreeViewAccessible(ContainerAccessible, Atk.Component, Atk.Selection, Atk.Table, CellAccessibleParent): ...

class TreeViewColumn(GObject.InitiallyUnowned, Buildable, CellLayout): 
    @classmethod
    def new(cls) -> TreeViewColumn: ...
    def add_attribute(self, cell_renderer: CellRenderer, attribute: str, column: int) -> None: ...
    def cell_get_position(self, cell_renderer: CellRenderer, x_offset: int, width: int) -> bool: ...
    def cell_get_size(self, cell_area: Gdk.Rectangle, x_offset: int, y_offset: int, width: int, height: int) -> None: ...
    def cell_is_visible(self) -> bool: ...
    def cell_set_cell_data(self, tree_model: TreeModel, iter: TreeIter, is_expander: bool, is_expanded: bool) -> None: ...
    def clear(self) -> None: ...
    def clear_attributes(self, cell_renderer: CellRenderer) -> None: ...
    def clicked(self) -> None: ...
    def focus_cell(self, cell: CellRenderer) -> None: ...
    def get_alignment(self) -> float: ...
    def get_button(self) -> Widget: ...
    def get_clickable(self) -> bool: ...
    def get_expand(self) -> bool: ...
    def get_fixed_width(self) -> int: ...
    def get_max_width(self) -> int: ...
    def get_min_width(self) -> int: ...
    def get_reorderable(self) -> bool: ...
    def get_resizable(self) -> bool: ...
    def get_sizing(self) -> TreeViewColumnSizing: ...
    def get_sort_column_id(self) -> int: ...
    def get_sort_indicator(self) -> bool: ...
    def get_sort_order(self) -> SortType: ...
    def get_spacing(self) -> int: ...
    def get_title(self) -> str: ...
    def get_tree_view(self) -> Widget: ...
    def get_visible(self) -> bool: ...
    def get_widget(self) -> Widget: ...
    def get_width(self) -> int: ...
    def get_x_offset(self) -> int: ...
    def pack_end(self, cell: CellRenderer, expand: bool) -> None: ...
    def pack_start(self, cell: CellRenderer, expand: bool) -> None: ...
    def queue_resize(self) -> None: ...
    def set_alignment(self, xalign: float) -> None: ...
    def set_attributes(self, cell_renderer: CellRenderer) -> None: ...
    def set_cell_data_func(self, cell_renderer: CellRenderer, func: TreeCellDataFunc, func_data: object, destroy: GLib.DestroyNotify) -> None: ...
    def set_clickable(self, clickable: bool) -> None: ...
    def set_expand(self, expand: bool) -> None: ...
    def set_fixed_width(self, fixed_width: int) -> None: ...
    def set_max_width(self, max_width: int) -> None: ...
    def set_min_width(self, min_width: int) -> None: ...
    def set_reorderable(self, reorderable: bool) -> None: ...
    def set_resizable(self, resizable: bool) -> None: ...
    def set_sizing(self, type: TreeViewColumnSizing) -> None: ...
    def set_sort_column_id(self, sort_column_id: int) -> None: ...
    def set_sort_indicator(self, setting: bool) -> None: ...
    def set_sort_order(self, order: SortType) -> None: ...
    def set_spacing(self, spacing: int) -> None: ...
    def set_title(self, title: str) -> None: ...
    def set_visible(self, visible: bool) -> None: ...
    def set_widget(self, widget: Widget) -> None: ...

class UIManager(GObject.Object, Buildable): 
    @classmethod
    def new(cls) -> UIManager: ...
    def add_ui(self, merge_id: int, path: str, name: str, action: str, type: UIManagerItemType, top: bool) -> None: ...
    def add_ui_from_file(self, filename: filename) -> int: ...
    def add_ui_from_resource(self, resource_path: str) -> int: ...
    def add_ui_from_string(self, buffer: str, length: gssize) -> int: ...
    def ensure_update(self) -> None: ...
    def get_accel_group(self) -> AccelGroup: ...
    def get_action(self, path: str) -> Action: ...
    def get_action_groups(self) -> GLib.List: ...
    def get_add_tearoffs(self) -> bool: ...
    def get_toplevels(self, types: UIManagerItemType) -> GLib.SList: ...
    def get_ui(self) -> str: ...
    def get_widget(self, path: str) -> Widget: ...
    def insert_action_group(self, action_group: ActionGroup, pos: int) -> None: ...
    def new_merge_id(self) -> int: ...
    def remove_action_group(self, action_group: ActionGroup) -> None: ...
    def remove_ui(self, merge_id: int) -> None: ...
    def set_add_tearoffs(self, add_tearoffs: bool) -> None: ...

class VBox(Box, Atk.ImplementorIface, Buildable, Orientable): 
    @classmethod
    def new(cls, homogeneous: bool, spacing: int) -> Widget: ...

class VButtonBox(ButtonBox, Atk.ImplementorIface, Buildable, Orientable): 
    @classmethod
    def new(cls) -> Widget: ...

class VPaned(Paned, Atk.ImplementorIface, Buildable, Orientable): 
    @classmethod
    def new(cls) -> Widget: ...

class VScale(Scale, Atk.ImplementorIface, Buildable, Orientable): 
    @classmethod
    def new(cls, adjustment: Adjustment) -> Widget: ...

class VScrollbar(Scrollbar, Atk.ImplementorIface, Buildable, Orientable): 
    @classmethod
    def new(cls, adjustment: Adjustment) -> Widget: ...

class VSeparator(Separator, Atk.ImplementorIface, Buildable, Orientable): 
    @classmethod
    def new(cls) -> Widget: ...

class Viewport(Bin, Atk.ImplementorIface, Buildable, Scrollable): 
    @classmethod
    def new(cls, hadjustment: Adjustment, vadjustment: Adjustment) -> Widget: ...
    def get_bin_window(self) -> Gdk.Window: ...
    def get_hadjustment(self) -> Adjustment: ...
    def get_shadow_type(self) -> ShadowType: ...
    def get_vadjustment(self) -> Adjustment: ...
    def get_view_window(self) -> Gdk.Window: ...
    def set_hadjustment(self, adjustment: Adjustment) -> None: ...
    def set_shadow_type(self, type: ShadowType) -> None: ...
    def set_vadjustment(self, adjustment: Adjustment) -> None: ...

class VolumeButton(ScaleButton, Atk.ImplementorIface, Actionable, Activatable, Buildable, Orientable): 
    @classmethod
    def new(cls) -> Widget: ...

class Widget(GObject.InitiallyUnowned, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls, type: GObject.Type, first_property_name: str) -> Widget: ...
    @classmethod
    def get_default_direction(cls) -> TextDirection: ...
    @classmethod
    def get_default_style(cls) -> Style: ...
    @classmethod
    def pop_composite_child(cls) -> None: ...
    @classmethod
    def push_composite_child(cls) -> None: ...
    @classmethod
    def set_default_direction(cls, dir: TextDirection) -> None: ...
    def activate(self) -> bool: ...
    def add_accelerator(self, accel_signal: str, accel_group: AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: AccelFlags) -> None: ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask) -> None: ...
    def add_events(self, events: int) -> None: ...
    def add_mnemonic_label(self, label: Widget) -> None: ...
    def add_tick_callback(self, callback: TickCallback, user_data: object, notify: GLib.DestroyNotify) -> int: ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def child_focus(self, direction: DirectionType) -> bool: ...
    def child_notify(self, child_property: str) -> None: ...
    def class_path(self, path_length: int, path: str, path_reversed: str) -> None: ...
    def compute_expand(self, orientation: Orientation) -> bool: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Widget) -> None: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def drag_begin(self, targets: TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> TargetList: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: DestDefaults, targets: list[TargetEntry], n_targets: int, actions: Gdk.DragAction) -> None: ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool) -> None: ...
    def drag_dest_set_target_list(self, target_list: TargetList) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool) -> None: ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int) -> None: ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> TargetList: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list[TargetEntry], n_targets: int, actions: Gdk.DragAction) -> None: ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon) -> None: ...
    def drag_source_set_icon_name(self, icon_name: str) -> None: ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf) -> None: ...
    def drag_source_set_icon_stock(self, stock_id: str) -> None: ...
    def drag_source_set_target_list(self, target_list: TargetList) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def freeze_child_notify(self) -> None: ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Gio.ActionGroup: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self, allocation: Allocation, baseline: int) -> None: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self, allocation: Allocation) -> None: ...
    def get_ancestor(self, widget_type: GObject.Type) -> Widget: ...
    def get_app_paintable(self) -> bool: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_child_requisition(self, requisition: Requisition) -> None: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self, clip: Allocation) -> None: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Clipboard: ...
    def get_composite_name(self) -> str: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_focus_on_click(self) -> bool: ...
    def get_font_map(self) -> Pango.FontMap: ...
    def get_font_options(self) -> cairo.FontOptions: ...
    def get_frame_clock(self) -> Gdk.FrameClock: ...
    def get_halign(self) -> Align: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Widget: ...
    def get_parent_window(self) -> Gdk.Window: ...
    def get_path(self) -> WidgetPath: ...
    def get_pointer(self, x: int, y: int) -> None: ...
    def get_preferred_height(self, minimum_height: int, natural_height: int) -> None: ...
    def get_preferred_height_and_baseline_for_width(self, width: int, minimum_height: int, natural_height: int, minimum_baseline: int, natural_baseline: int) -> None: ...
    def get_preferred_height_for_width(self, width: int, minimum_height: int, natural_height: int) -> None: ...
    def get_preferred_size(self, minimum_size: Requisition, natural_size: Requisition) -> None: ...
    def get_preferred_width(self, minimum_width: int, natural_width: int) -> None: ...
    def get_preferred_width_for_height(self, height: int, minimum_width: int, natural_width: int) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> SizeRequestMode: ...
    def get_requisition(self, requisition: Requisition) -> None: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Settings: ...
    def get_size_request(self, width: int, height: int) -> None: ...
    def get_state(self) -> StateType: ...
    def get_state_flags(self) -> StateFlags: ...
    def get_style(self) -> Style: ...
    def get_style_context(self) -> StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GObject.Type, name: str) -> GObject.Object: ...
    def get_tooltip_markup(self) -> str: ...
    def get_tooltip_text(self) -> str: ...
    def get_tooltip_window(self) -> Window: ...
    def get_toplevel(self) -> Widget: ...
    def get_valign(self) -> Align: ...
    def get_valign_with_baseline(self) -> Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Gdk.Window: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def in_destruction(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region) -> None: ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup) -> None: ...
    def intersect(self, area: Gdk.Rectangle, intersection: Gdk.Rectangle) -> bool: ...
    def is_ancestor(self, ancestor: Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: DirectionType) -> bool: ...
    def list_accel_closures(self) -> GLib.List: ...
    def list_action_prefixes(self) -> list[str]: ...
    def list_mnemonic_labels(self) -> GLib.List: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: StateType, color: Gdk.Color) -> None: ...
    def modify_bg(self, state: StateType, color: Gdk.Color) -> None: ...
    def modify_cursor(self, primary: Gdk.Color, secondary: Gdk.Color) -> None: ...
    def modify_fg(self, state: StateType, color: Gdk.Color) -> None: ...
    def modify_font(self, font_desc: Pango.FontDescription) -> None: ...
    def modify_style(self, style: RcStyle) -> None: ...
    def modify_text(self, state: StateType, color: Gdk.Color) -> None: ...
    def override_background_color(self, state: StateFlags, color: Gdk.RGBA) -> None: ...
    def override_color(self, state: StateFlags, color: Gdk.RGBA) -> None: ...
    def override_cursor(self, cursor: Gdk.RGBA, secondary_cursor: Gdk.RGBA) -> None: ...
    def override_font(self, font_desc: Pango.FontDescription) -> None: ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA) -> None: ...
    def path(self, path_length: int, path: str, path_reversed: str) -> None: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int) -> None: ...
    def queue_draw_region(self, region: cairo.Region) -> None: ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window) -> None: ...
    def remove_accelerator(self, accel_group: AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Widget) -> None: ...
    def remove_tick_callback(self, id: int) -> None: ...
    def render_icon(self, stock_id: str, size: int, detail: str) -> GdkPixbuf.Pixbuf: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> GdkPixbuf.Pixbuf: ...
    def reparent(self, new_parent: Widget) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str, accel_group: AccelGroup) -> None: ...
    def set_allocation(self, allocation: Allocation) -> None: ...
    def set_app_paintable(self, app_paintable: bool) -> None: ...
    def set_can_default(self, can_default: bool) -> None: ...
    def set_can_focus(self, can_focus: bool) -> None: ...
    def set_child_visible(self, is_visible: bool) -> None: ...
    def set_clip(self, clip: Allocation) -> None: ...
    def set_composite_name(self, name: str) -> None: ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool) -> None: ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask) -> None: ...
    def set_direction(self, dir: TextDirection) -> None: ...
    def set_double_buffered(self, double_buffered: bool) -> None: ...
    def set_events(self, events: int) -> None: ...
    def set_focus_on_click(self, focus_on_click: bool) -> None: ...
    def set_font_map(self, font_map: Pango.FontMap) -> None: ...
    def set_font_options(self, options: cairo.FontOptions) -> None: ...
    def set_halign(self, align: Align) -> None: ...
    def set_has_tooltip(self, has_tooltip: bool) -> None: ...
    def set_has_window(self, has_window: bool) -> None: ...
    def set_hexpand(self, expand: bool) -> None: ...
    def set_hexpand_set(self, set: bool) -> None: ...
    def set_mapped(self, mapped: bool) -> None: ...
    def set_margin_bottom(self, margin: int) -> None: ...
    def set_margin_end(self, margin: int) -> None: ...
    def set_margin_left(self, margin: int) -> None: ...
    def set_margin_right(self, margin: int) -> None: ...
    def set_margin_start(self, margin: int) -> None: ...
    def set_margin_top(self, margin: int) -> None: ...
    def set_name(self, name: str) -> None: ...
    def set_no_show_all(self, no_show_all: bool) -> None: ...
    def set_opacity(self, opacity: float) -> None: ...
    def set_parent(self, parent: Widget) -> None: ...
    def set_parent_window(self, parent_window: Gdk.Window) -> None: ...
    def set_realized(self, realized: bool) -> None: ...
    def set_receives_default(self, receives_default: bool) -> None: ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool) -> None: ...
    def set_sensitive(self, sensitive: bool) -> None: ...
    def set_size_request(self, width: int, height: int) -> None: ...
    def set_state(self, state: StateType) -> None: ...
    def set_state_flags(self, flags: StateFlags, clear: bool) -> None: ...
    def set_style(self, style: Style) -> None: ...
    def set_support_multidevice(self, support_multidevice: bool) -> None: ...
    def set_tooltip_markup(self, markup: str) -> None: ...
    def set_tooltip_text(self, text: str) -> None: ...
    def set_tooltip_window(self, custom_window: Window) -> None: ...
    def set_valign(self, align: Align) -> None: ...
    def set_vexpand(self, expand: bool) -> None: ...
    def set_vexpand_set(self, set: bool) -> None: ...
    def set_visible(self, visible: bool) -> None: ...
    def set_visual(self, visual: Gdk.Visual) -> None: ...
    def set_window(self, window: Gdk.Window) -> None: ...
    def shape_combine_region(self, region: cairo.Region) -> None: ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Allocation) -> None: ...
    def size_allocate_with_baseline(self, allocation: Allocation, baseline: int) -> None: ...
    def size_request(self, requisition: Requisition) -> None: ...
    def style_attach(self) -> None: ...
    def style_get(self, first_property_name: str) -> None: ...
    def style_get_property(self, property_name: str, value: GObject.Value) -> None: ...
    def style_get_valist(self, first_property_name: str, var_args: va_list) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def translate_coordinates(self, dest_widget: Widget, src_x: int, src_y: int, dest_x: int, dest_y: int) -> bool: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unregister_window(self, window: Gdk.Window) -> None: ...
    def unset_state_flags(self, flags: StateFlags) -> None: ...

class WidgetAccessible(Accessible, Atk.Component): ...

class Window(Bin, Atk.ImplementorIface, Buildable): 
    @classmethod
    def new(cls, type: WindowType) -> Widget: ...
    @classmethod
    def get_default_icon_list(cls) -> GLib.List: ...
    @classmethod
    def get_default_icon_name(cls) -> str: ...
    @classmethod
    def list_toplevels(cls) -> GLib.List: ...
    @classmethod
    def set_auto_startup_notification(cls, setting: bool) -> None: ...
    @classmethod
    def set_default_icon(cls, icon: GdkPixbuf.Pixbuf) -> None: ...
    @classmethod
    def set_default_icon_from_file(cls, filename: filename) -> bool: ...
    @classmethod
    def set_default_icon_list(cls, list: GLib.List) -> None: ...
    @classmethod
    def set_default_icon_name(cls, name: str) -> None: ...
    @classmethod
    def set_interactive_debugging(cls, enable: bool) -> None: ...
    def activate_default(self) -> bool: ...
    def activate_focus(self) -> bool: ...
    def activate_key(self, event: Gdk.EventKey) -> bool: ...
    def add_accel_group(self, accel_group: AccelGroup) -> None: ...
    def add_mnemonic(self, keyval: int, target: Widget) -> None: ...
    def begin_move_drag(self, button: int, root_x: int, root_y: int, timestamp: int) -> None: ...
    def begin_resize_drag(self, edge: Gdk.WindowEdge, button: int, root_x: int, root_y: int, timestamp: int) -> None: ...
    def close(self) -> None: ...
    def deiconify(self) -> None: ...
    def fullscreen(self) -> None: ...
    def fullscreen_on_monitor(self, screen: Gdk.Screen, monitor: int) -> None: ...
    def get_accept_focus(self) -> bool: ...
    def get_application(self) -> Application: ...
    def get_attached_to(self) -> Widget: ...
    def get_decorated(self) -> bool: ...
    def get_default_size(self, width: int, height: int) -> None: ...
    def get_default_widget(self) -> Widget: ...
    def get_deletable(self) -> bool: ...
    def get_destroy_with_parent(self) -> bool: ...
    def get_focus(self) -> Widget: ...
    def get_focus_on_map(self) -> bool: ...
    def get_focus_visible(self) -> bool: ...
    def get_gravity(self) -> Gdk.Gravity: ...
    def get_group(self) -> WindowGroup: ...
    def get_has_resize_grip(self) -> bool: ...
    def get_hide_titlebar_when_maximized(self) -> bool: ...
    def get_icon(self) -> GdkPixbuf.Pixbuf: ...
    def get_icon_list(self) -> GLib.List: ...
    def get_icon_name(self) -> str: ...
    def get_mnemonic_modifier(self) -> Gdk.ModifierType: ...
    def get_mnemonics_visible(self) -> bool: ...
    def get_modal(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_position(self, root_x: int, root_y: int) -> None: ...
    def get_resizable(self) -> bool: ...
    def get_resize_grip_area(self, rect: Gdk.Rectangle) -> bool: ...
    def get_role(self) -> str: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_size(self, width: int, height: int) -> None: ...
    def get_skip_pager_hint(self) -> bool: ...
    def get_skip_taskbar_hint(self) -> bool: ...
    def get_title(self) -> str: ...
    def get_titlebar(self) -> Widget: ...
    def get_transient_for(self) -> Window: ...
    def get_type_hint(self) -> Gdk.WindowTypeHint: ...
    def get_urgency_hint(self) -> bool: ...
    def get_window_type(self) -> WindowType: ...
    def has_group(self) -> bool: ...
    def has_toplevel_focus(self) -> bool: ...
    def iconify(self) -> None: ...
    def is_active(self) -> bool: ...
    def is_maximized(self) -> bool: ...
    def maximize(self) -> None: ...
    def mnemonic_activate(self, keyval: int, modifier: Gdk.ModifierType) -> bool: ...
    def move(self, x: int, y: int) -> None: ...
    def parse_geometry(self, geometry: str) -> bool: ...
    def present(self) -> None: ...
    def present_with_time(self, timestamp: int) -> None: ...
    def propagate_key_event(self, event: Gdk.EventKey) -> bool: ...
    def remove_accel_group(self, accel_group: AccelGroup) -> None: ...
    def remove_mnemonic(self, keyval: int, target: Widget) -> None: ...
    def reshow_with_initial_size(self) -> None: ...
    def resize(self, width: int, height: int) -> None: ...
    def resize_grip_is_visible(self) -> bool: ...
    def resize_to_geometry(self, width: int, height: int) -> None: ...
    def set_accept_focus(self, setting: bool) -> None: ...
    def set_application(self, application: Application) -> None: ...
    def set_attached_to(self, attach_widget: Widget) -> None: ...
    def set_decorated(self, setting: bool) -> None: ...
    def set_default(self, default_widget: Widget) -> None: ...
    def set_default_geometry(self, width: int, height: int) -> None: ...
    def set_default_size(self, width: int, height: int) -> None: ...
    def set_deletable(self, setting: bool) -> None: ...
    def set_destroy_with_parent(self, setting: bool) -> None: ...
    def set_focus(self, focus: Widget) -> None: ...
    def set_focus_on_map(self, setting: bool) -> None: ...
    def set_focus_visible(self, setting: bool) -> None: ...
    def set_geometry_hints(self, geometry_widget: Widget, geometry: Gdk.Geometry, geom_mask: Gdk.WindowHints) -> None: ...
    def set_gravity(self, gravity: Gdk.Gravity) -> None: ...
    def set_has_resize_grip(self, value: bool) -> None: ...
    def set_has_user_ref_count(self, setting: bool) -> None: ...
    def set_hide_titlebar_when_maximized(self, setting: bool) -> None: ...
    def set_icon(self, icon: GdkPixbuf.Pixbuf) -> None: ...
    def set_icon_from_file(self, filename: filename) -> bool: ...
    def set_icon_list(self, list: GLib.List) -> None: ...
    def set_icon_name(self, name: str) -> None: ...
    def set_keep_above(self, setting: bool) -> None: ...
    def set_keep_below(self, setting: bool) -> None: ...
    def set_mnemonic_modifier(self, modifier: Gdk.ModifierType) -> None: ...
    def set_mnemonics_visible(self, setting: bool) -> None: ...
    def set_modal(self, modal: bool) -> None: ...
    def set_opacity(self, opacity: float) -> None: ...
    def set_position(self, position: WindowPosition) -> None: ...
    def set_resizable(self, resizable: bool) -> None: ...
    def set_role(self, role: str) -> None: ...
    def set_screen(self, screen: Gdk.Screen) -> None: ...
    def set_skip_pager_hint(self, setting: bool) -> None: ...
    def set_skip_taskbar_hint(self, setting: bool) -> None: ...
    def set_startup_id(self, startup_id: str) -> None: ...
    def set_title(self, title: str) -> None: ...
    def set_titlebar(self, titlebar: Widget) -> None: ...
    def set_transient_for(self, parent: Window) -> None: ...
    def set_type_hint(self, hint: Gdk.WindowTypeHint) -> None: ...
    def set_urgency_hint(self, setting: bool) -> None: ...
    def set_wmclass(self, wmclass_name: str, wmclass_class: str) -> None: ...
    def stick(self) -> None: ...
    def unfullscreen(self) -> None: ...
    def unmaximize(self) -> None: ...
    def unstick(self) -> None: ...

class WindowAccessible(ContainerAccessible, Atk.Component, Atk.Window): ...

class WindowGroup(GObject.Object): 
    @classmethod
    def new(cls) -> WindowGroup: ...
    def add_window(self, window: Window) -> None: ...
    def get_current_device_grab(self, device: Gdk.Device) -> Widget: ...
    def get_current_grab(self) -> Widget: ...
    def list_windows(self) -> GLib.List: ...
    def remove_window(self, window: Window) -> None: ...

class Actionable(Widget): 
    def get_action_name(self) -> str: ...
    def get_action_target_value(self) -> GLib.Variant: ...
    def set_action_name(self, action_name: str) -> None: ...
    def set_action_target_value(self, target_value: GLib.Variant) -> None: ...
    def get_action_name(self) -> str: ...
    def get_action_target_value(self) -> GLib.Variant: ...
    def set_action_name(self, action_name: str) -> None: ...
    def set_action_target(self, format_string: str) -> None: ...
    def set_action_target_value(self, target_value: GLib.Variant) -> None: ...
    def set_detailed_action_name(self, detailed_action_name: str) -> None: ...
class Activatable: 
    def sync_action_properties(self, action: Action) -> None: ...
    def update(self, action: Action, property_name: str) -> None: ...
    def do_set_related_action(self, action: Action) -> None: ...
    def get_related_action(self) -> Action: ...
    def get_use_action_appearance(self) -> bool: ...
    def set_related_action(self, action: Action) -> None: ...
    def set_use_action_appearance(self, use_appearance: bool) -> None: ...
    def sync_action_properties(self, action: Action) -> None: ...
class AppChooser(Widget): 
    def get_app_info(self) -> Gio.AppInfo: ...
    def get_content_type(self) -> str: ...
    def refresh(self) -> None: ...
class Buildable: 
    def add_child(self, builder: Builder, child: GObject.Object, type: str) -> None: ...
    def construct_child(self, builder: Builder, name: str) -> GObject.Object: ...
    def custom_finished(self, builder: Builder, child: GObject.Object, tagname: str, data: object) -> None: ...
    def custom_tag_end(self, builder: Builder, child: GObject.Object, tagname: str, data: object) -> None: ...
    def custom_tag_start(self, builder: Builder, child: GObject.Object, tagname: str, parser: GLib.MarkupParser, data: object) -> bool: ...
    def get_internal_child(self, builder: Builder, childname: str) -> GObject.Object: ...
    def get_name(self) -> str: ...
    def parser_finished(self, builder: Builder) -> None: ...
    def set_buildable_property(self, builder: Builder, name: str, value: GObject.Value) -> None: ...
    def set_name(self, name: str) -> None: ...
    def add_child(self, builder: Builder, child: GObject.Object, type: str) -> None: ...
    def construct_child(self, builder: Builder, name: str) -> GObject.Object: ...
    def custom_finished(self, builder: Builder, child: GObject.Object, tagname: str, data: object) -> None: ...
    def custom_tag_end(self, builder: Builder, child: GObject.Object, tagname: str, data: object) -> None: ...
    def custom_tag_start(self, builder: Builder, child: GObject.Object, tagname: str, parser: GLib.MarkupParser, data: object) -> bool: ...
    def get_internal_child(self, builder: Builder, childname: str) -> GObject.Object: ...
    def get_name(self) -> str: ...
    def parser_finished(self, builder: Builder) -> None: ...
    def set_buildable_property(self, builder: Builder, name: str, value: GObject.Value) -> None: ...
    def set_name(self, name: str) -> None: ...
class CellAccessibleParent: 
    def activate(self, cell: CellAccessible) -> None: ...
    def edit(self, cell: CellAccessible) -> None: ...
    def expand_collapse(self, cell: CellAccessible) -> None: ...
    def get_cell_area(self, cell: CellAccessible, cell_rect: Gdk.Rectangle) -> None: ...
    def get_cell_extents(self, cell: CellAccessible, x: int, y: int, width: int, height: int, coord_type: Atk.CoordType) -> None: ...
    def get_cell_position(self, cell: CellAccessible, row: int, column: int) -> None: ...
    def get_child_index(self, cell: CellAccessible) -> int: ...
    def get_column_header_cells(self, cell: CellAccessible) -> list[Atk.Object]: ...
    def get_renderer_state(self, cell: CellAccessible) -> CellRendererState: ...
    def get_row_header_cells(self, cell: CellAccessible) -> list[Atk.Object]: ...
    def grab_focus(self, cell: CellAccessible) -> bool: ...
    def update_relationset(self, cell: CellAccessible, relationset: Atk.RelationSet) -> None: ...
    def activate(self, cell: CellAccessible) -> None: ...
    def edit(self, cell: CellAccessible) -> None: ...
    def expand_collapse(self, cell: CellAccessible) -> None: ...
    def get_cell_area(self, cell: CellAccessible, cell_rect: Gdk.Rectangle) -> None: ...
    def get_cell_extents(self, cell: CellAccessible, x: int, y: int, width: int, height: int, coord_type: Atk.CoordType) -> None: ...
    def get_cell_position(self, cell: CellAccessible, row: int, column: int) -> None: ...
    def get_child_index(self, cell: CellAccessible) -> int: ...
    def get_column_header_cells(self, cell: CellAccessible) -> list[Atk.Object]: ...
    def get_renderer_state(self, cell: CellAccessible) -> CellRendererState: ...
    def get_row_header_cells(self, cell: CellAccessible) -> list[Atk.Object]: ...
    def grab_focus(self, cell: CellAccessible) -> bool: ...
    def update_relationset(self, cell: CellAccessible, relationset: Atk.RelationSet) -> None: ...
class CellEditable(Widget): 
    def editing_done(self) -> None: ...
    def remove_widget(self) -> None: ...
    def start_editing(self, event: Gdk.Event) -> None: ...
    def editing_done(self) -> None: ...
    def remove_widget(self) -> None: ...
    def start_editing(self, event: Gdk.Event) -> None: ...
class CellLayout: 
    def add_attribute(self, cell: CellRenderer, attribute: str, column: int) -> None: ...
    def clear(self) -> None: ...
    def clear_attributes(self, cell: CellRenderer) -> None: ...
    def get_area(self) -> CellArea: ...
    def get_cells(self) -> GLib.List: ...
    def pack_end(self, cell: CellRenderer, expand: bool) -> None: ...
    def pack_start(self, cell: CellRenderer, expand: bool) -> None: ...
    def reorder(self, cell: CellRenderer, position: int) -> None: ...
    def set_cell_data_func(self, cell: CellRenderer, func: CellLayoutDataFunc, func_data: object, destroy: GLib.DestroyNotify) -> None: ...
    def add_attribute(self, cell: CellRenderer, attribute: str, column: int) -> None: ...
    def clear(self) -> None: ...
    def clear_attributes(self, cell: CellRenderer) -> None: ...
    def get_area(self) -> CellArea: ...
    def get_cells(self) -> GLib.List: ...
    def pack_end(self, cell: CellRenderer, expand: bool) -> None: ...
    def pack_start(self, cell: CellRenderer, expand: bool) -> None: ...
    def reorder(self, cell: CellRenderer, position: int) -> None: ...
    def set_attributes(self, cell: CellRenderer) -> None: ...
    def set_cell_data_func(self, cell: CellRenderer, func: CellLayoutDataFunc, func_data: object, destroy: GLib.DestroyNotify) -> None: ...
class ColorChooser: 
    def add_palette(self, orientation: Orientation, colors_per_line: int, n_colors: int, colors: list[Gdk.RGBA]) -> None: ...
    def color_activated(self, color: Gdk.RGBA) -> None: ...
    def get_rgba(self, color: Gdk.RGBA) -> None: ...
    def set_rgba(self, color: Gdk.RGBA) -> None: ...
    def add_palette(self, orientation: Orientation, colors_per_line: int, n_colors: int, colors: list[Gdk.RGBA]) -> None: ...
    def get_rgba(self, color: Gdk.RGBA) -> None: ...
    def get_use_alpha(self) -> bool: ...
    def set_rgba(self, color: Gdk.RGBA) -> None: ...
    def set_use_alpha(self, use_alpha: bool) -> None: ...
class Editable: 
    def changed(self) -> None: ...
    def delete_text(self, start_pos: int, end_pos: int) -> None: ...
    def do_delete_text(self, start_pos: int, end_pos: int) -> None: ...
    def do_insert_text(self, new_text: str, new_text_length: int, position: int) -> None: ...
    def get_chars(self, start_pos: int, end_pos: int) -> str: ...
    def get_position(self) -> int: ...
    def get_selection_bounds(self, start_pos: int, end_pos: int) -> bool: ...
    def insert_text(self, new_text: str, new_text_length: int, position: int) -> None: ...
    def set_position(self, position: int) -> None: ...
    def set_selection_bounds(self, start_pos: int, end_pos: int) -> None: ...
    def copy_clipboard(self) -> None: ...
    def cut_clipboard(self) -> None: ...
    def delete_selection(self) -> None: ...
    def delete_text(self, start_pos: int, end_pos: int) -> None: ...
    def get_chars(self, start_pos: int, end_pos: int) -> str: ...
    def get_editable(self) -> bool: ...
    def get_position(self) -> int: ...
    def get_selection_bounds(self, start_pos: int, end_pos: int) -> bool: ...
    def insert_text(self, new_text: str, new_text_length: int, position: int) -> None: ...
    def paste_clipboard(self) -> None: ...
    def select_region(self, start_pos: int, end_pos: int) -> None: ...
    def set_editable(self, is_editable: bool) -> None: ...
    def set_position(self, position: int) -> None: ...
class FileChooser: 
    def add_choice(self, id: str, label: str, options: list[str], option_labels: list[str]) -> None: ...
    def add_filter(self, filter: FileFilter) -> None: ...
    def add_shortcut_folder(self, folder: filename) -> bool: ...
    def add_shortcut_folder_uri(self, uri: str) -> bool: ...
    def get_action(self) -> FileChooserAction: ...
    def get_choice(self, id: str) -> str: ...
    def get_create_folders(self) -> bool: ...
    def get_current_folder(self) -> filename: ...
    def get_current_folder_file(self) -> Gio.File: ...
    def get_current_folder_uri(self) -> str: ...
    def get_current_name(self) -> str: ...
    def get_do_overwrite_confirmation(self) -> bool: ...
    def get_extra_widget(self) -> Widget: ...
    def get_file(self) -> Gio.File: ...
    def get_filename(self) -> filename: ...
    def get_filenames(self) -> GLib.SList: ...
    def get_files(self) -> GLib.SList: ...
    def get_filter(self) -> FileFilter: ...
    def get_local_only(self) -> bool: ...
    def get_preview_file(self) -> Gio.File: ...
    def get_preview_filename(self) -> filename: ...
    def get_preview_uri(self) -> str: ...
    def get_preview_widget(self) -> Widget: ...
    def get_preview_widget_active(self) -> bool: ...
    def get_select_multiple(self) -> bool: ...
    def get_show_hidden(self) -> bool: ...
    def get_uri(self) -> str: ...
    def get_uris(self) -> GLib.SList: ...
    def get_use_preview_label(self) -> bool: ...
    def list_filters(self) -> GLib.SList: ...
    def list_shortcut_folder_uris(self) -> GLib.SList: ...
    def list_shortcut_folders(self) -> GLib.SList: ...
    def remove_choice(self, id: str) -> None: ...
    def remove_filter(self, filter: FileFilter) -> None: ...
    def remove_shortcut_folder(self, folder: filename) -> bool: ...
    def remove_shortcut_folder_uri(self, uri: str) -> bool: ...
    def select_all(self) -> None: ...
    def select_file(self, file: Gio.File) -> bool: ...
    def select_filename(self, filename: filename) -> bool: ...
    def select_uri(self, uri: str) -> bool: ...
    def set_action(self, action: FileChooserAction) -> None: ...
    def set_choice(self, id: str, option: str) -> None: ...
    def set_create_folders(self, create_folders: bool) -> None: ...
    def set_current_folder(self, filename: filename) -> bool: ...
    def set_current_folder_file(self, file: Gio.File) -> bool: ...
    def set_current_folder_uri(self, uri: str) -> bool: ...
    def set_current_name(self, name: str) -> None: ...
    def set_do_overwrite_confirmation(self, do_overwrite_confirmation: bool) -> None: ...
    def set_extra_widget(self, extra_widget: Widget) -> None: ...
    def set_file(self, file: Gio.File) -> bool: ...
    def set_filename(self, filename: filename) -> bool: ...
    def set_filter(self, filter: FileFilter) -> None: ...
    def set_local_only(self, local_only: bool) -> None: ...
    def set_preview_widget(self, preview_widget: Widget) -> None: ...
    def set_preview_widget_active(self, active: bool) -> None: ...
    def set_select_multiple(self, select_multiple: bool) -> None: ...
    def set_show_hidden(self, show_hidden: bool) -> None: ...
    def set_uri(self, uri: str) -> bool: ...
    def set_use_preview_label(self, use_label: bool) -> None: ...
    def unselect_all(self) -> None: ...
    def unselect_file(self, file: Gio.File) -> None: ...
    def unselect_filename(self, filename: filename) -> None: ...
    def unselect_uri(self, uri: str) -> None: ...
class FontChooser: 
    def font_activated(self, fontname: str) -> None: ...
    def get_font_face(self) -> Pango.FontFace: ...
    def get_font_family(self) -> Pango.FontFamily: ...
    def get_font_map(self) -> Pango.FontMap: ...
    def get_font_size(self) -> int: ...
    def set_filter_func(self, filter: FontFilterFunc, user_data: object, destroy: GLib.DestroyNotify) -> None: ...
    def set_font_map(self, fontmap: Pango.FontMap) -> None: ...
    def get_font(self) -> str: ...
    def get_font_desc(self) -> Pango.FontDescription: ...
    def get_font_face(self) -> Pango.FontFace: ...
    def get_font_family(self) -> Pango.FontFamily: ...
    def get_font_features(self) -> str: ...
    def get_font_map(self) -> Pango.FontMap: ...
    def get_font_size(self) -> int: ...
    def get_language(self) -> str: ...
    def get_level(self) -> FontChooserLevel: ...
    def get_preview_text(self) -> str: ...
    def get_show_preview_entry(self) -> bool: ...
    def set_filter_func(self, filter: FontFilterFunc, user_data: object, destroy: GLib.DestroyNotify) -> None: ...
    def set_font(self, fontname: str) -> None: ...
    def set_font_desc(self, font_desc: Pango.FontDescription) -> None: ...
    def set_font_map(self, fontmap: Pango.FontMap) -> None: ...
    def set_language(self, language: str) -> None: ...
    def set_level(self, level: FontChooserLevel) -> None: ...
    def set_preview_text(self, text: str) -> None: ...
    def set_show_preview_entry(self, show_preview_entry: bool) -> None: ...
class Orientable: 
    def get_orientation(self) -> Orientation: ...
    def set_orientation(self, orientation: Orientation) -> None: ...
class PrintOperationPreview: 
    def end_preview(self) -> None: ...
    def got_page_size(self, context: PrintContext, page_setup: PageSetup) -> None: ...
    def is_selected(self, page_nr: int) -> bool: ...
    def ready(self, context: PrintContext) -> None: ...
    def render_page(self, page_nr: int) -> None: ...
    def end_preview(self) -> None: ...
    def is_selected(self, page_nr: int) -> bool: ...
    def render_page(self, page_nr: int) -> None: ...
class RecentChooser: 
    def add_filter(self, filter: RecentFilter) -> None: ...
    def get_current_uri(self) -> str: ...
    def get_items(self) -> GLib.List: ...
    def get_recent_manager(self) -> RecentManager: ...
    def item_activated(self) -> None: ...
    def list_filters(self) -> GLib.SList: ...
    def remove_filter(self, filter: RecentFilter) -> None: ...
    def select_all(self) -> None: ...
    def select_uri(self, uri: str) -> bool: ...
    def selection_changed(self) -> None: ...
    def set_current_uri(self, uri: str) -> bool: ...
    def set_sort_func(self, sort_func: RecentSortFunc, sort_data: object, data_destroy: GLib.DestroyNotify) -> None: ...
    def unselect_all(self) -> None: ...
    def unselect_uri(self, uri: str) -> None: ...
    def add_filter(self, filter: RecentFilter) -> None: ...
    def get_current_item(self) -> RecentInfo: ...
    def get_current_uri(self) -> str: ...
    def get_filter(self) -> RecentFilter: ...
    def get_items(self) -> GLib.List: ...
    def get_limit(self) -> int: ...
    def get_local_only(self) -> bool: ...
    def get_select_multiple(self) -> bool: ...
    def get_show_icons(self) -> bool: ...
    def get_show_not_found(self) -> bool: ...
    def get_show_private(self) -> bool: ...
    def get_show_tips(self) -> bool: ...
    def get_sort_type(self) -> RecentSortType: ...
    def get_uris(self, length: gsize) -> list[str]: ...
    def list_filters(self) -> GLib.SList: ...
    def remove_filter(self, filter: RecentFilter) -> None: ...
    def select_all(self) -> None: ...
    def select_uri(self, uri: str) -> bool: ...
    def set_current_uri(self, uri: str) -> bool: ...
    def set_filter(self, filter: RecentFilter) -> None: ...
    def set_limit(self, limit: int) -> None: ...
    def set_local_only(self, local_only: bool) -> None: ...
    def set_select_multiple(self, select_multiple: bool) -> None: ...
    def set_show_icons(self, show_icons: bool) -> None: ...
    def set_show_not_found(self, show_not_found: bool) -> None: ...
    def set_show_private(self, show_private: bool) -> None: ...
    def set_show_tips(self, show_tips: bool) -> None: ...
    def set_sort_func(self, sort_func: RecentSortFunc, sort_data: object, data_destroy: GLib.DestroyNotify) -> None: ...
    def set_sort_type(self, sort_type: RecentSortType) -> None: ...
    def unselect_all(self) -> None: ...
    def unselect_uri(self, uri: str) -> None: ...
class Scrollable: 
    def get_border(self, border: Border) -> bool: ...
    def get_border(self, border: Border) -> bool: ...
    def get_hadjustment(self) -> Adjustment: ...
    def get_hscroll_policy(self) -> ScrollablePolicy: ...
    def get_vadjustment(self) -> Adjustment: ...
    def get_vscroll_policy(self) -> ScrollablePolicy: ...
    def set_hadjustment(self, hadjustment: Adjustment) -> None: ...
    def set_hscroll_policy(self, policy: ScrollablePolicy) -> None: ...
    def set_vadjustment(self, vadjustment: Adjustment) -> None: ...
    def set_vscroll_policy(self, policy: ScrollablePolicy) -> None: ...
class StyleProvider: 
    def get_icon_factory(self, path: WidgetPath) -> IconFactory: ...
    def get_style(self, path: WidgetPath) -> StyleProperties: ...
    def get_style_property(self, path: WidgetPath, state: StateFlags, pspec: GObject.ParamSpec, value: GObject.Value) -> bool: ...
    def get_icon_factory(self, path: WidgetPath) -> IconFactory: ...
    def get_style(self, path: WidgetPath) -> StyleProperties: ...
    def get_style_property(self, path: WidgetPath, state: StateFlags, pspec: GObject.ParamSpec, value: GObject.Value) -> bool: ...
class ToolShell(Widget): 
    def get_ellipsize_mode(self) -> Pango.EllipsizeMode: ...
    def get_icon_size(self) -> IconSize: ...
    def get_orientation(self) -> Orientation: ...
    def get_relief_style(self) -> ReliefStyle: ...
    def get_style(self) -> ToolbarStyle: ...
    def get_text_alignment(self) -> float: ...
    def get_text_orientation(self) -> Orientation: ...
    def get_text_size_group(self) -> SizeGroup: ...
    def rebuild_menu(self) -> None: ...
    def get_ellipsize_mode(self) -> Pango.EllipsizeMode: ...
    def get_icon_size(self) -> int: ...
    def get_orientation(self) -> Orientation: ...
    def get_relief_style(self) -> ReliefStyle: ...
    def get_style(self) -> ToolbarStyle: ...
    def get_text_alignment(self) -> float: ...
    def get_text_orientation(self) -> Orientation: ...
    def get_text_size_group(self) -> SizeGroup: ...
    def rebuild_menu(self) -> None: ...
class TreeDragDest: 
    def drag_data_received(self, dest: TreePath, selection_data: SelectionData) -> bool: ...
    def row_drop_possible(self, dest_path: TreePath, selection_data: SelectionData) -> bool: ...
    def drag_data_received(self, dest: TreePath, selection_data: SelectionData) -> bool: ...
    def row_drop_possible(self, dest_path: TreePath, selection_data: SelectionData) -> bool: ...
class TreeDragSource: 
    def drag_data_delete(self, path: TreePath) -> bool: ...
    def drag_data_get(self, path: TreePath, selection_data: SelectionData) -> bool: ...
    def row_draggable(self, path: TreePath) -> bool: ...
    def drag_data_delete(self, path: TreePath) -> bool: ...
    def drag_data_get(self, path: TreePath, selection_data: SelectionData) -> bool: ...
    def row_draggable(self, path: TreePath) -> bool: ...
class TreeModel: 
    def get_column_type(self, index_: int) -> GObject.Type: ...
    def get_flags(self) -> TreeModelFlags: ...
    def get_iter(self, iter: TreeIter, path: TreePath) -> bool: ...
    def get_n_columns(self) -> int: ...
    def get_path(self, iter: TreeIter) -> TreePath: ...
    def get_value(self, iter: TreeIter, column: int, value: GObject.Value) -> None: ...
    def iter_children(self, iter: TreeIter, parent: TreeIter) -> bool: ...
    def iter_has_child(self, iter: TreeIter) -> bool: ...
    def iter_n_children(self, iter: TreeIter) -> int: ...
    def iter_next(self, iter: TreeIter) -> bool: ...
    def iter_nth_child(self, iter: TreeIter, parent: TreeIter, n: int) -> bool: ...
    def iter_parent(self, iter: TreeIter, child: TreeIter) -> bool: ...
    def iter_previous(self, iter: TreeIter) -> bool: ...
    def ref_node(self, iter: TreeIter) -> None: ...
    def row_changed(self, path: TreePath, iter: TreeIter) -> None: ...
    def row_deleted(self, path: TreePath) -> None: ...
    def row_has_child_toggled(self, path: TreePath, iter: TreeIter) -> None: ...
    def row_inserted(self, path: TreePath, iter: TreeIter) -> None: ...
    def rows_reordered(self, path: TreePath, iter: TreeIter, new_order: int) -> None: ...
    def unref_node(self, iter: TreeIter) -> None: ...
    def filter_new(self, root: TreePath) -> TreeModel: ...
    def foreach(self, func: TreeModelForeachFunc, user_data: object) -> None: ...
    def get(self, iter: TreeIter) -> None: ...
    def get_column_type(self, index_: int) -> GObject.Type: ...
    def get_flags(self) -> TreeModelFlags: ...
    def get_iter(self, iter: TreeIter, path: TreePath) -> bool: ...
    def get_iter_first(self, iter: TreeIter) -> bool: ...
    def get_iter_from_string(self, iter: TreeIter, path_string: str) -> bool: ...
    def get_n_columns(self) -> int: ...
    def get_path(self, iter: TreeIter) -> TreePath: ...
    def get_string_from_iter(self, iter: TreeIter) -> str: ...
    def get_valist(self, iter: TreeIter, var_args: va_list) -> None: ...
    def get_value(self, iter: TreeIter, column: int, value: GObject.Value) -> None: ...
    def iter_children(self, iter: TreeIter, parent: TreeIter) -> bool: ...
    def iter_has_child(self, iter: TreeIter) -> bool: ...
    def iter_n_children(self, iter: TreeIter) -> int: ...
    def iter_next(self, iter: TreeIter) -> bool: ...
    def iter_nth_child(self, iter: TreeIter, parent: TreeIter, n: int) -> bool: ...
    def iter_parent(self, iter: TreeIter, child: TreeIter) -> bool: ...
    def iter_previous(self, iter: TreeIter) -> bool: ...
    def ref_node(self, iter: TreeIter) -> None: ...
    def row_changed(self, path: TreePath, iter: TreeIter) -> None: ...
    def row_deleted(self, path: TreePath) -> None: ...
    def row_has_child_toggled(self, path: TreePath, iter: TreeIter) -> None: ...
    def row_inserted(self, path: TreePath, iter: TreeIter) -> None: ...
    def rows_reordered(self, path: TreePath, iter: TreeIter, new_order: int) -> None: ...
    def rows_reordered_with_length(self, path: TreePath, iter: TreeIter, new_order: list[int], length: int) -> None: ...
    def unref_node(self, iter: TreeIter) -> None: ...
class TreeSortable(TreeModel): 
    def get_sort_column_id(self, sort_column_id: int, order: SortType) -> bool: ...
    def has_default_sort_func(self) -> bool: ...
    def set_default_sort_func(self, sort_func: TreeIterCompareFunc, user_data: object, destroy: GLib.DestroyNotify) -> None: ...
    def set_sort_column_id(self, sort_column_id: int, order: SortType) -> None: ...
    def set_sort_func(self, sort_column_id: int, sort_func: TreeIterCompareFunc, user_data: object, destroy: GLib.DestroyNotify) -> None: ...
    def sort_column_changed(self) -> None: ...
    def get_sort_column_id(self, sort_column_id: int, order: SortType) -> bool: ...
    def has_default_sort_func(self) -> bool: ...
    def set_default_sort_func(self, sort_func: TreeIterCompareFunc, user_data: object, destroy: GLib.DestroyNotify) -> None: ...
    def set_sort_column_id(self, sort_column_id: int, order: SortType) -> None: ...
    def set_sort_func(self, sort_column_id: int, sort_func: TreeIterCompareFunc, user_data: object, destroy: GLib.DestroyNotify) -> None: ...
    def sort_column_changed(self) -> None: ...

class AccelFlags(GObject.GFlag): 
    VISIBLE = ...
    LOCKED = ...
    MASK = ...

class ApplicationInhibitFlags(GObject.GFlag): 
    LOGOUT = ...
    SWITCH = ...
    SUSPEND = ...
    IDLE = ...

class AttachOptions(GObject.GFlag): 
    EXPAND = ...
    SHRINK = ...
    FILL = ...

class CalendarDisplayOptions(GObject.GFlag): 
    SHOW_HEADING = ...
    SHOW_DAY_NAMES = ...
    NO_MONTH_CHANGE = ...
    SHOW_WEEK_NUMBERS = ...
    SHOW_DETAILS = ...

class CellRendererState(GObject.GFlag): 
    SELECTED = ...
    PRELIT = ...
    INSENSITIVE = ...
    SORTED = ...
    FOCUSED = ...
    EXPANDABLE = ...
    EXPANDED = ...

class DebugFlag(GObject.GFlag): 
    MISC = ...
    PLUGSOCKET = ...
    TEXT = ...
    TREE = ...
    UPDATES = ...
    KEYBINDINGS = ...
    MULTIHEAD = ...
    MODULES = ...
    GEOMETRY = ...
    ICONTHEME = ...
    PRINTING = ...
    BUILDER = ...
    SIZE_REQUEST = ...
    NO_CSS_CACHE = ...
    BASELINES = ...
    PIXEL_CACHE = ...
    NO_PIXEL_CACHE = ...
    INTERACTIVE = ...
    TOUCHSCREEN = ...
    ACTIONS = ...
    RESIZE = ...
    LAYOUT = ...

class DestDefaults(GObject.GFlag): 
    MOTION = ...
    HIGHLIGHT = ...
    DROP = ...
    ALL = ...

class DialogFlags(GObject.GFlag): 
    MODAL = ...
    DESTROY_WITH_PARENT = ...
    USE_HEADER_BAR = ...

class EventControllerScrollFlags(GObject.GFlag): 
    NONE = ...
    VERTICAL = ...
    HORIZONTAL = ...
    DISCRETE = ...
    KINETIC = ...
    BOTH_AXES = ...

class FileFilterFlags(GObject.GFlag): 
    FILENAME = ...
    URI = ...
    DISPLAY_NAME = ...
    MIME_TYPE = ...

class FontChooserLevel(GObject.GFlag): 
    FAMILY = ...
    STYLE = ...
    SIZE = ...
    VARIATIONS = ...
    FEATURES = ...

class IconLookupFlags(GObject.GFlag): 
    NO_SVG = ...
    FORCE_SVG = ...
    USE_BUILTIN = ...
    GENERIC_FALLBACK = ...
    FORCE_SIZE = ...
    FORCE_REGULAR = ...
    FORCE_SYMBOLIC = ...
    DIR_LTR = ...
    DIR_RTL = ...

class InputHints(GObject.GFlag): 
    NONE = ...
    SPELLCHECK = ...
    NO_SPELLCHECK = ...
    WORD_COMPLETION = ...
    LOWERCASE = ...
    UPPERCASE_CHARS = ...
    UPPERCASE_WORDS = ...
    UPPERCASE_SENTENCES = ...
    INHIBIT_OSK = ...
    VERTICAL_WRITING = ...
    EMOJI = ...
    NO_EMOJI = ...

class JunctionSides(GObject.GFlag): 
    NONE = ...
    CORNER_TOPLEFT = ...
    CORNER_TOPRIGHT = ...
    CORNER_BOTTOMLEFT = ...
    CORNER_BOTTOMRIGHT = ...
    TOP = ...
    BOTTOM = ...
    LEFT = ...
    RIGHT = ...

class PlacesOpenFlags(GObject.GFlag): 
    NORMAL = ...
    NEW_TAB = ...
    NEW_WINDOW = ...

class RcFlags(GObject.GFlag): 
    FG = ...
    BG = ...
    TEXT = ...
    BASE = ...

class RecentFilterFlags(GObject.GFlag): 
    URI = ...
    DISPLAY_NAME = ...
    MIME_TYPE = ...
    APPLICATION = ...
    GROUP = ...
    AGE = ...

class RegionFlags(GObject.GFlag): 
    EVEN = ...
    ODD = ...
    FIRST = ...
    LAST = ...
    ONLY = ...
    SORTED = ...

class StateFlags(GObject.GFlag): 
    NORMAL = ...
    ACTIVE = ...
    PRELIGHT = ...
    SELECTED = ...
    INSENSITIVE = ...
    INCONSISTENT = ...
    FOCUSED = ...
    BACKDROP = ...
    DIR_LTR = ...
    DIR_RTL = ...
    LINK = ...
    VISITED = ...
    CHECKED = ...
    DROP_ACTIVE = ...

class StyleContextPrintFlags(GObject.GFlag): 
    NONE = ...
    RECURSE = ...
    SHOW_STYLE = ...

class TargetFlags(GObject.GFlag): 
    SAME_APP = ...
    SAME_WIDGET = ...
    OTHER_APP = ...
    OTHER_WIDGET = ...

class TextSearchFlags(GObject.GFlag): 
    VISIBLE_ONLY = ...
    TEXT_ONLY = ...
    CASE_INSENSITIVE = ...

class ToolPaletteDragTargets(GObject.GFlag): 
    ITEMS = ...
    GROUPS = ...

class TreeModelFlags(GObject.GFlag): 
    ITERS_PERSIST = ...
    LIST_ONLY = ...

class UIManagerItemType(GObject.GFlag): 
    AUTO = ...
    MENUBAR = ...
    MENU = ...
    TOOLBAR = ...
    PLACEHOLDER = ...
    POPUP = ...
    MENUITEM = ...
    TOOLITEM = ...
    SEPARATOR = ...
    ACCELERATOR = ...
    POPUP_WITH_ACCELS = ...

class Align(GObject.GEnum): 
    FILL = ...
    START = ...
    END = ...
    CENTER = ...
    BASELINE = ...

class ArrowPlacement(GObject.GEnum): 
    BOTH = ...
    START = ...
    END = ...

class ArrowType(GObject.GEnum): 
    UP = ...
    DOWN = ...
    LEFT = ...
    RIGHT = ...
    NONE = ...

class AssistantPageType(GObject.GEnum): 
    CONTENT = ...
    INTRO = ...
    CONFIRM = ...
    SUMMARY = ...
    PROGRESS = ...
    CUSTOM = ...

class BaselinePosition(GObject.GEnum): 
    TOP = ...
    CENTER = ...
    BOTTOM = ...

class BorderStyle(GObject.GEnum): 
    NONE = ...
    SOLID = ...
    INSET = ...
    OUTSET = ...
    HIDDEN = ...
    DOTTED = ...
    DASHED = ...
    DOUBLE = ...
    GROOVE = ...
    RIDGE = ...

class BuilderError(GObject.GEnum): 
    INVALID_TYPE_FUNCTION = ...
    UNHANDLED_TAG = ...
    MISSING_ATTRIBUTE = ...
    INVALID_ATTRIBUTE = ...
    INVALID_TAG = ...
    MISSING_PROPERTY_VALUE = ...
    INVALID_VALUE = ...
    VERSION_MISMATCH = ...
    DUPLICATE_ID = ...
    OBJECT_TYPE_REFUSED = ...
    TEMPLATE_MISMATCH = ...
    INVALID_PROPERTY = ...
    INVALID_SIGNAL = ...
    INVALID_ID = ...

class ButtonBoxStyle(GObject.GEnum): 
    SPREAD = ...
    EDGE = ...
    START = ...
    END = ...
    CENTER = ...
    EXPAND = ...

class ButtonRole(GObject.GEnum): 
    NORMAL = ...
    CHECK = ...
    RADIO = ...

class ButtonsType(GObject.GEnum): 
    NONE = ...
    OK = ...
    CLOSE = ...
    CANCEL = ...
    YES_NO = ...
    OK_CANCEL = ...

class CellRendererAccelMode(GObject.GEnum): 
    GTK = ...
    OTHER = ...

class CellRendererMode(GObject.GEnum): 
    INERT = ...
    ACTIVATABLE = ...
    EDITABLE = ...

class CornerType(GObject.GEnum): 
    TOP_LEFT = ...
    BOTTOM_LEFT = ...
    TOP_RIGHT = ...
    BOTTOM_RIGHT = ...

class CssProviderError(GObject.GEnum): 
    FAILED = ...
    SYNTAX = ...
    IMPORT = ...
    NAME = ...
    DEPRECATED = ...
    UNKNOWN_VALUE = ...

class CssSectionType(GObject.GEnum): 
    DOCUMENT = ...
    IMPORT = ...
    COLOR_DEFINITION = ...
    BINDING_SET = ...
    RULESET = ...
    SELECTOR = ...
    DECLARATION = ...
    VALUE = ...
    KEYFRAMES = ...

class DeleteType(GObject.GEnum): 
    CHARS = ...
    WORD_ENDS = ...
    WORDS = ...
    DISPLAY_LINES = ...
    DISPLAY_LINE_ENDS = ...
    PARAGRAPH_ENDS = ...
    PARAGRAPHS = ...
    WHITESPACE = ...

class DirectionType(GObject.GEnum): 
    TAB_FORWARD = ...
    TAB_BACKWARD = ...
    UP = ...
    DOWN = ...
    LEFT = ...
    RIGHT = ...

class DragResult(GObject.GEnum): 
    SUCCESS = ...
    NO_TARGET = ...
    USER_CANCELLED = ...
    TIMEOUT_EXPIRED = ...
    GRAB_BROKEN = ...
    ERROR = ...

class EntryIconPosition(GObject.GEnum): 
    PRIMARY = ...
    SECONDARY = ...

class EventSequenceState(GObject.GEnum): 
    NONE = ...
    CLAIMED = ...
    DENIED = ...

class ExpanderStyle(GObject.GEnum): 
    COLLAPSED = ...
    SEMI_COLLAPSED = ...
    SEMI_EXPANDED = ...
    EXPANDED = ...

class FileChooserAction(GObject.GEnum): 
    OPEN = ...
    SAVE = ...
    SELECT_FOLDER = ...
    CREATE_FOLDER = ...

class FileChooserConfirmation(GObject.GEnum): 
    CONFIRM = ...
    ACCEPT_FILENAME = ...
    SELECT_AGAIN = ...

class FileChooserError(GObject.GEnum): 
    NONEXISTENT = ...
    BAD_FILENAME = ...
    ALREADY_EXISTS = ...
    INCOMPLETE_HOSTNAME = ...

class IMPreeditStyle(GObject.GEnum): 
    NOTHING = ...
    CALLBACK = ...
    NONE = ...

class IMStatusStyle(GObject.GEnum): 
    NOTHING = ...
    CALLBACK = ...
    NONE = ...

class IconSize(GObject.GEnum): 
    INVALID = ...
    MENU = ...
    SMALL_TOOLBAR = ...
    LARGE_TOOLBAR = ...
    BUTTON = ...
    DND = ...
    DIALOG = ...

class IconThemeError(GObject.GEnum): 
    NOT_FOUND = ...
    FAILED = ...

class IconViewDropPosition(GObject.GEnum): 
    NO_DROP = ...
    DROP_INTO = ...
    DROP_LEFT = ...
    DROP_RIGHT = ...
    DROP_ABOVE = ...
    DROP_BELOW = ...

class ImageType(GObject.GEnum): 
    EMPTY = ...
    PIXBUF = ...
    STOCK = ...
    ICON_SET = ...
    ANIMATION = ...
    ICON_NAME = ...
    GICON = ...
    SURFACE = ...

class InputPurpose(GObject.GEnum): 
    FREE_FORM = ...
    ALPHA = ...
    DIGITS = ...
    NUMBER = ...
    PHONE = ...
    URL = ...
    EMAIL = ...
    NAME = ...
    PASSWORD = ...
    PIN = ...
    TERMINAL = ...

class Justification(GObject.GEnum): 
    LEFT = ...
    RIGHT = ...
    CENTER = ...
    FILL = ...

class LevelBarMode(GObject.GEnum): 
    CONTINUOUS = ...
    DISCRETE = ...

class License(GObject.GEnum): 
    UNKNOWN = ...
    CUSTOM = ...
    GPL_2_0 = ...
    GPL_3_0 = ...
    LGPL_2_1 = ...
    LGPL_3_0 = ...
    BSD = ...
    MIT_X11 = ...
    ARTISTIC = ...
    GPL_2_0_ONLY = ...
    GPL_3_0_ONLY = ...
    LGPL_2_1_ONLY = ...
    LGPL_3_0_ONLY = ...
    AGPL_3_0 = ...
    AGPL_3_0_ONLY = ...
    BSD_3 = ...
    APACHE_2_0 = ...
    MPL_2_0 = ...

class MenuDirectionType(GObject.GEnum): 
    PARENT = ...
    CHILD = ...
    NEXT = ...
    PREV = ...

class MessageType(GObject.GEnum): 
    INFO = ...
    WARNING = ...
    QUESTION = ...
    ERROR = ...
    OTHER = ...

class MovementStep(GObject.GEnum): 
    LOGICAL_POSITIONS = ...
    VISUAL_POSITIONS = ...
    WORDS = ...
    DISPLAY_LINES = ...
    DISPLAY_LINE_ENDS = ...
    PARAGRAPHS = ...
    PARAGRAPH_ENDS = ...
    PAGES = ...
    BUFFER_ENDS = ...
    HORIZONTAL_PAGES = ...

class NotebookTab(GObject.GEnum): 
    FIRST = ...
    LAST = ...

class NumberUpLayout(GObject.GEnum): 
    LRTB = ...
    LRBT = ...
    RLTB = ...
    RLBT = ...
    TBLR = ...
    TBRL = ...
    BTLR = ...
    BTRL = ...

class Orientation(GObject.GEnum): 
    HORIZONTAL = ...
    VERTICAL = ...

class PackDirection(GObject.GEnum): 
    LTR = ...
    RTL = ...
    TTB = ...
    BTT = ...

class PackType(GObject.GEnum): 
    START = ...
    END = ...

class PadActionType(GObject.GEnum): 
    BUTTON = ...
    RING = ...
    STRIP = ...

class PageOrientation(GObject.GEnum): 
    PORTRAIT = ...
    LANDSCAPE = ...
    REVERSE_PORTRAIT = ...
    REVERSE_LANDSCAPE = ...

class PageSet(GObject.GEnum): 
    ALL = ...
    EVEN = ...
    ODD = ...

class PanDirection(GObject.GEnum): 
    LEFT = ...
    RIGHT = ...
    UP = ...
    DOWN = ...

class PathPriorityType(GObject.GEnum): 
    LOWEST = ...
    GTK = ...
    APPLICATION = ...
    THEME = ...
    RC = ...
    HIGHEST = ...

class PathType(GObject.GEnum): 
    WIDGET = ...
    WIDGET_CLASS = ...
    CLASS = ...

class PolicyType(GObject.GEnum): 
    ALWAYS = ...
    AUTOMATIC = ...
    NEVER = ...
    EXTERNAL = ...

class PopoverConstraint(GObject.GEnum): 
    NONE = ...
    WINDOW = ...

class PositionType(GObject.GEnum): 
    LEFT = ...
    RIGHT = ...
    TOP = ...
    BOTTOM = ...

class PrintDuplex(GObject.GEnum): 
    SIMPLEX = ...
    HORIZONTAL = ...
    VERTICAL = ...

class PrintError(GObject.GEnum): 
    GENERAL = ...
    INTERNAL_ERROR = ...
    NOMEM = ...
    INVALID_FILE = ...

class PrintOperationAction(GObject.GEnum): 
    PRINT_DIALOG = ...
    PRINT = ...
    PREVIEW = ...
    EXPORT = ...

class PrintOperationResult(GObject.GEnum): 
    ERROR = ...
    APPLY = ...
    CANCEL = ...
    IN_PROGRESS = ...

class PrintPages(GObject.GEnum): 
    ALL = ...
    CURRENT = ...
    RANGES = ...
    SELECTION = ...

class PrintQuality(GObject.GEnum): 
    LOW = ...
    NORMAL = ...
    HIGH = ...
    DRAFT = ...

class PrintStatus(GObject.GEnum): 
    INITIAL = ...
    PREPARING = ...
    GENERATING_DATA = ...
    SENDING_DATA = ...
    PENDING = ...
    PENDING_ISSUE = ...
    PRINTING = ...
    FINISHED = ...
    FINISHED_ABORTED = ...

class PropagationPhase(GObject.GEnum): 
    NONE = ...
    CAPTURE = ...
    BUBBLE = ...
    TARGET = ...

class RcTokenType(GObject.GEnum): 
    INVALID = ...
    INCLUDE = ...
    NORMAL = ...
    ACTIVE = ...
    PRELIGHT = ...
    SELECTED = ...
    INSENSITIVE = ...
    FG = ...
    BG = ...
    TEXT = ...
    BASE = ...
    XTHICKNESS = ...
    YTHICKNESS = ...
    FONT = ...
    FONTSET = ...
    FONT_NAME = ...
    BG_PIXMAP = ...
    PIXMAP_PATH = ...
    STYLE = ...
    BINDING = ...
    BIND = ...
    WIDGET = ...
    WIDGET_CLASS = ...
    CLASS = ...
    LOWEST = ...
    GTK = ...
    APPLICATION = ...
    THEME = ...
    RC = ...
    HIGHEST = ...
    ENGINE = ...
    MODULE_PATH = ...
    IM_MODULE_PATH = ...
    IM_MODULE_FILE = ...
    STOCK = ...
    LTR = ...
    RTL = ...
    COLOR = ...
    UNBIND = ...
    LAST = ...

class RecentChooserError(GObject.GEnum): 
    NOT_FOUND = ...
    INVALID_URI = ...

class RecentManagerError(GObject.GEnum): 
    NOT_FOUND = ...
    INVALID_URI = ...
    INVALID_ENCODING = ...
    NOT_REGISTERED = ...
    READ = ...
    WRITE = ...
    UNKNOWN = ...

class RecentSortType(GObject.GEnum): 
    NONE = ...
    MRU = ...
    LRU = ...
    CUSTOM = ...

class ReliefStyle(GObject.GEnum): 
    NORMAL = ...
    HALF = ...
    NONE = ...

class ResizeMode(GObject.GEnum): 
    PARENT = ...
    QUEUE = ...
    IMMEDIATE = ...

class ResponseType(GObject.GEnum): 
    NONE = ...
    REJECT = ...
    ACCEPT = ...
    DELETE_EVENT = ...
    OK = ...
    CANCEL = ...
    CLOSE = ...
    YES = ...
    NO = ...
    APPLY = ...
    HELP = ...

class RevealerTransitionType(GObject.GEnum): 
    NONE = ...
    CROSSFADE = ...
    SLIDE_RIGHT = ...
    SLIDE_LEFT = ...
    SLIDE_UP = ...
    SLIDE_DOWN = ...

class ScrollStep(GObject.GEnum): 
    STEPS = ...
    PAGES = ...
    ENDS = ...
    HORIZONTAL_STEPS = ...
    HORIZONTAL_PAGES = ...
    HORIZONTAL_ENDS = ...

class ScrollType(GObject.GEnum): 
    NONE = ...
    JUMP = ...
    STEP_BACKWARD = ...
    STEP_FORWARD = ...
    PAGE_BACKWARD = ...
    PAGE_FORWARD = ...
    STEP_UP = ...
    STEP_DOWN = ...
    PAGE_UP = ...
    PAGE_DOWN = ...
    STEP_LEFT = ...
    STEP_RIGHT = ...
    PAGE_LEFT = ...
    PAGE_RIGHT = ...
    START = ...
    END = ...

class ScrollablePolicy(GObject.GEnum): 
    MINIMUM = ...
    NATURAL = ...

class SelectionMode(GObject.GEnum): 
    NONE = ...
    SINGLE = ...
    BROWSE = ...
    MULTIPLE = ...

class SensitivityType(GObject.GEnum): 
    AUTO = ...
    ON = ...
    OFF = ...

class ShadowType(GObject.GEnum): 
    NONE = ...
    IN = ...
    OUT = ...
    ETCHED_IN = ...
    ETCHED_OUT = ...

class ShortcutType(GObject.GEnum): 
    ACCELERATOR = ...
    GESTURE_PINCH = ...
    GESTURE_STRETCH = ...
    GESTURE_ROTATE_CLOCKWISE = ...
    GESTURE_ROTATE_COUNTERCLOCKWISE = ...
    GESTURE_TWO_FINGER_SWIPE_LEFT = ...
    GESTURE_TWO_FINGER_SWIPE_RIGHT = ...
    GESTURE = ...

class SizeGroupMode(GObject.GEnum): 
    NONE = ...
    HORIZONTAL = ...
    VERTICAL = ...
    BOTH = ...

class SizeRequestMode(GObject.GEnum): 
    HEIGHT_FOR_WIDTH = ...
    WIDTH_FOR_HEIGHT = ...
    CONSTANT_SIZE = ...

class SortType(GObject.GEnum): 
    ASCENDING = ...
    DESCENDING = ...

class SpinButtonUpdatePolicy(GObject.GEnum): 
    ALWAYS = ...
    IF_VALID = ...

class SpinType(GObject.GEnum): 
    STEP_FORWARD = ...
    STEP_BACKWARD = ...
    PAGE_FORWARD = ...
    PAGE_BACKWARD = ...
    HOME = ...
    END = ...
    USER_DEFINED = ...

class StackTransitionType(GObject.GEnum): 
    NONE = ...
    CROSSFADE = ...
    SLIDE_RIGHT = ...
    SLIDE_LEFT = ...
    SLIDE_UP = ...
    SLIDE_DOWN = ...
    SLIDE_LEFT_RIGHT = ...
    SLIDE_UP_DOWN = ...
    OVER_UP = ...
    OVER_DOWN = ...
    OVER_LEFT = ...
    OVER_RIGHT = ...
    UNDER_UP = ...
    UNDER_DOWN = ...
    UNDER_LEFT = ...
    UNDER_RIGHT = ...
    OVER_UP_DOWN = ...
    OVER_DOWN_UP = ...
    OVER_LEFT_RIGHT = ...
    OVER_RIGHT_LEFT = ...

class StateType(GObject.GEnum): 
    NORMAL = ...
    ACTIVE = ...
    PRELIGHT = ...
    SELECTED = ...
    INSENSITIVE = ...
    INCONSISTENT = ...
    FOCUSED = ...

class TextBufferTargetInfo(GObject.GEnum): 
    BUFFER_CONTENTS = ...
    RICH_TEXT = ...
    TEXT = ...

class TextDirection(GObject.GEnum): 
    NONE = ...
    LTR = ...
    RTL = ...

class TextExtendSelection(GObject.GEnum): 
    WORD = ...
    LINE = ...

class TextViewLayer(GObject.GEnum): 
    BELOW = ...
    ABOVE = ...
    BELOW_TEXT = ...
    ABOVE_TEXT = ...

class TextWindowType(GObject.GEnum): 
    PRIVATE = ...
    WIDGET = ...
    TEXT = ...
    LEFT = ...
    RIGHT = ...
    TOP = ...
    BOTTOM = ...

class ToolbarSpaceStyle(GObject.GEnum): 
    EMPTY = ...
    LINE = ...

class ToolbarStyle(GObject.GEnum): 
    ICONS = ...
    TEXT = ...
    BOTH = ...
    BOTH_HORIZ = ...

class TreeViewColumnSizing(GObject.GEnum): 
    GROW_ONLY = ...
    AUTOSIZE = ...
    FIXED = ...

class TreeViewDropPosition(GObject.GEnum): 
    BEFORE = ...
    AFTER = ...
    INTO_OR_BEFORE = ...
    INTO_OR_AFTER = ...

class TreeViewGridLines(GObject.GEnum): 
    NONE = ...
    HORIZONTAL = ...
    VERTICAL = ...
    BOTH = ...

class Unit(GObject.GEnum): 
    NONE = ...
    POINTS = ...
    INCH = ...
    MM = ...

class WidgetHelpType(GObject.GEnum): 
    TOOLTIP = ...
    WHATS_THIS = ...

class WindowPosition(GObject.GEnum): 
    NONE = ...
    CENTER = ...
    MOUSE = ...
    CENTER_ALWAYS = ...
    CENTER_ON_PARENT = ...

class WindowType(GObject.GEnum): 
    TOPLEVEL = ...
    POPUP = ...

class WrapMode(GObject.GEnum): 
    NONE = ...
    CHAR = ...
    WORD = ...
    WORD_CHAR = ...

