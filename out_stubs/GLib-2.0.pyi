from gi.repository import GLib, GObject

ANALYZER_ANALYZING: int
ASCII_DTOSTR_BUF_SIZE: int
BIG_ENDIAN: int
CSET_A_2_Z: str
CSET_DIGITS: str
CSET_a_2_z: str
DATALIST_FLAGS_MASK: int
DATE_BAD_DAY: int
DATE_BAD_JULIAN: int
DATE_BAD_YEAR: int
DIR_SEPARATOR: int
DIR_SEPARATOR_S: str
E: float
GINT16_FORMAT: str
GINT16_MODIFIER: str
GINT32_FORMAT: str
GINT32_MODIFIER: str
GINT64_FORMAT: str
GINT64_MODIFIER: str
GINTPTR_FORMAT: str
GINTPTR_MODIFIER: str
GNUC_FUNCTION: str
GNUC_PRETTY_FUNCTION: str
GSIZE_FORMAT: str
GSIZE_MODIFIER: str
GSSIZE_FORMAT: str
GSSIZE_MODIFIER: str
GUINT16_FORMAT: str
GUINT32_FORMAT: str
GUINT64_FORMAT: str
GUINTPTR_FORMAT: str
HAVE_GINT64: int
HAVE_GNUC_VARARGS: int
HAVE_GNUC_VISIBILITY: int
HAVE_GROWING_STACK: int
HAVE_ISO_VARARGS: int
HOOK_FLAG_USER_SHIFT: int
IEEE754_DOUBLE_BIAS: int
IEEE754_FLOAT_BIAS: int
KEY_FILE_DESKTOP_GROUP: str
KEY_FILE_DESKTOP_KEY_ACTIONS: str
KEY_FILE_DESKTOP_KEY_CATEGORIES: str
KEY_FILE_DESKTOP_KEY_COMMENT: str
KEY_FILE_DESKTOP_KEY_DBUS_ACTIVATABLE: str
KEY_FILE_DESKTOP_KEY_EXEC: str
KEY_FILE_DESKTOP_KEY_GENERIC_NAME: str
KEY_FILE_DESKTOP_KEY_HIDDEN: str
KEY_FILE_DESKTOP_KEY_ICON: str
KEY_FILE_DESKTOP_KEY_MIME_TYPE: str
KEY_FILE_DESKTOP_KEY_NAME: str
KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN: str
KEY_FILE_DESKTOP_KEY_NO_DISPLAY: str
KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN: str
KEY_FILE_DESKTOP_KEY_PATH: str
KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY: str
KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS: str
KEY_FILE_DESKTOP_KEY_TERMINAL: str
KEY_FILE_DESKTOP_KEY_TRY_EXEC: str
KEY_FILE_DESKTOP_KEY_TYPE: str
KEY_FILE_DESKTOP_KEY_URL: str
KEY_FILE_DESKTOP_KEY_VERSION: str
KEY_FILE_DESKTOP_TYPE_APPLICATION: str
KEY_FILE_DESKTOP_TYPE_DIRECTORY: str
KEY_FILE_DESKTOP_TYPE_LINK: str
LITTLE_ENDIAN: int
LN10: float
LN2: float
LOG_2_BASE_10: float
LOG_DOMAIN: str
LOG_FATAL_MASK: int
LOG_LEVEL_USER_SHIFT: int
MAJOR_VERSION: int
MAXINT16: int
MAXINT32: int
MAXINT64: int
MAXINT8: int
MAXUINT16: int
MAXUINT32: int
MAXUINT64: int
MAXUINT8: int
MICRO_VERSION: int
MININT16: int
MININT32: int
MININT64: int
MININT8: int
MINOR_VERSION: int
MODULE_SUFFIX: str
OPTION_REMAINING: str
PDP_ENDIAN: int
PI: float
PID_FORMAT: str
PI_2: float
PI_4: float
POLLFD_FORMAT: str
PRIORITY_DEFAULT: int
PRIORITY_DEFAULT_IDLE: int
PRIORITY_HIGH: int
PRIORITY_HIGH_IDLE: int
PRIORITY_LOW: int
SEARCHPATH_SEPARATOR: int
SEARCHPATH_SEPARATOR_S: str
SIZEOF_LONG: int
SIZEOF_SIZE_T: int
SIZEOF_SSIZE_T: int
SIZEOF_VOID_P: int
SOURCE_CONTINUE: bool
SOURCE_REMOVE: bool
SQRT2: float
STR_DELIMITERS: str
SYSDEF_AF_INET: int
SYSDEF_AF_INET6: int
SYSDEF_AF_UNIX: int
SYSDEF_MSG_DONTROUTE: int
SYSDEF_MSG_OOB: int
SYSDEF_MSG_PEEK: int
TEST_OPTION_ISOLATE_DIRS: str
TIME_SPAN_DAY: int
TIME_SPAN_HOUR: int
TIME_SPAN_MILLISECOND: int
TIME_SPAN_MINUTE: int
TIME_SPAN_SECOND: int
UNICHAR_MAX_DECOMPOSITION_LENGTH: int
URI_RESERVED_CHARS_GENERIC_DELIMITERS: str
URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS: str
USEC_PER_SEC: int
VA_COPY_AS_ARRAY: int
VERSION_MIN_REQUIRED: int
WIN32_MSG_HANDLE: int
macro__has_attribute___noreturn__: int

def access(filename: filename, mode: int) -> int: ...
def aligned_alloc(n_blocks: gsize, n_block_bytes: gsize, alignment: gsize) -> object: ...
def aligned_alloc0(n_blocks: gsize, n_block_bytes: gsize, alignment: gsize) -> object: ...
def aligned_free(mem: object) -> None: ...
def ascii_digit_value(c: str) -> int: ...
def ascii_dtostr(buffer: str, buf_len: int, d: float) -> str: ...
def ascii_formatd(buffer: str, buf_len: int, format: str, d: float) -> str: ...
def ascii_strcasecmp(s1: str, s2: str) -> int: ...
def ascii_strdown(str: str, len: gssize) -> str: ...
def ascii_string_to_signed(str: str, base: int, min: int, max: int, out_num: int) -> bool: ...
def ascii_string_to_unsigned(str: str, base: int, min: int, max: int, out_num: int) -> bool: ...
def ascii_strncasecmp(s1: str, s2: str, n: gsize) -> int: ...
def ascii_strtod(nptr: str, endptr: str) -> float: ...
def ascii_strtoll(nptr: str, endptr: str, base: int) -> int: ...
def ascii_strtoull(nptr: str, endptr: str, base: int) -> int: ...
def ascii_strup(str: str, len: gssize) -> str: ...
def ascii_tolower(c: str) -> str: ...
def ascii_toupper(c: str) -> str: ...
def ascii_xdigit_value(c: str) -> int: ...
def assert_warning(log_domain: str, file: str, line: int, pretty_function: str, expression: str) -> None: ...
def assertion_message(domain: str, file: str, line: int, func: str, message: str) -> None: ...
def assertion_message_cmpnum(domain: str, file: str, line: int, func: str, expr: str, arg1: long double, cmp: str, arg2: long double, numtype: str) -> None: ...
def assertion_message_cmpstr(domain: str, file: str, line: int, func: str, expr: str, arg1: str, cmp: str, arg2: str) -> None: ...
def assertion_message_cmpstrv(domain: str, file: str, line: int, func: str, expr: str, arg1: str, arg2: str, first_wrong_idx: gsize) -> None: ...
def assertion_message_error(domain: str, file: str, line: int, func: str, expr: str, error: Error, error_domain: Quark, error_code: int) -> None: ...
def assertion_message_expr(domain: str, file: str, line: int, func: str, expr: str) -> None: ...
def atexit(func: VoidFunc) -> None: ...
def atomic_int_add(atomic: int, val: int) -> int: ...
def atomic_int_and(atomic: int, val: int) -> int: ...
def atomic_int_compare_and_exchange(atomic: int, oldval: int, newval: int) -> bool: ...
def atomic_int_compare_and_exchange_full(atomic: int, oldval: int, newval: int, preval: int) -> bool: ...
def atomic_int_dec_and_test(atomic: int) -> bool: ...
def atomic_int_exchange(atomic: int, newval: int) -> int: ...
def atomic_int_exchange_and_add(atomic: int, val: int) -> int: ...
def atomic_int_get(atomic: int) -> int: ...
def atomic_int_inc(atomic: int) -> None: ...
def atomic_int_or(atomic: int, val: int) -> int: ...
def atomic_int_set(atomic: int, newval: int) -> None: ...
def atomic_int_xor(atomic: int, val: int) -> int: ...
def atomic_pointer_add(atomic: object, val: gssize) -> gssize: ...
def atomic_pointer_and(atomic: object, val: gsize) -> gsize: ...
def atomic_pointer_compare_and_exchange(atomic: object, oldval: object, newval: object) -> bool: ...
def atomic_pointer_compare_and_exchange_full(atomic: object, oldval: object, newval: object, preval: object) -> bool: ...
def atomic_pointer_exchange(atomic: object, newval: object) -> object: ...
def atomic_pointer_get(atomic: object) -> object: ...
def atomic_pointer_or(atomic: object, val: gsize) -> gsize: ...
def atomic_pointer_set(atomic: object, newval: object) -> None: ...
def atomic_pointer_xor(atomic: object, val: gsize) -> gsize: ...
def atomic_rc_box_acquire(mem_block: object) -> object: ...
def atomic_rc_box_alloc(block_size: gsize) -> object: ...
def atomic_rc_box_alloc0(block_size: gsize) -> object: ...
def atomic_rc_box_dup(block_size: gsize, mem_block: object) -> object: ...
def atomic_rc_box_get_size(mem_block: object) -> gsize: ...
def atomic_rc_box_release(mem_block: object) -> None: ...
def atomic_rc_box_release_full(mem_block: object, clear_func: DestroyNotify) -> None: ...
def atomic_ref_count_compare(arc: int, val: int) -> bool: ...
def atomic_ref_count_dec(arc: int) -> bool: ...
def atomic_ref_count_inc(arc: int) -> None: ...
def atomic_ref_count_init(arc: int) -> None: ...
def base64_decode(text: str, out_len: gsize) -> list[int]: ...
def base64_decode_inplace(text: list[int], out_len: gsize) -> int: ...
def base64_decode_step(in: list[int], len: gsize, out: list[int], state: int, save: int) -> gsize: ...
def base64_encode(data: list[int], len: gsize) -> str: ...
def base64_encode_close(break_lines: bool, out: list[int], state: int, save: int) -> gsize: ...
def base64_encode_step(in: list[int], len: gsize, break_lines: bool, out: list[int], state: int, save: int) -> gsize: ...
def basename(file_name: filename) -> filename: ...
def bit_lock(address: int, lock_bit: int) -> None: ...
def bit_nth_lsf(mask: int, nth_bit: int) -> int: ...
def bit_nth_msf(mask: int, nth_bit: int) -> int: ...
def bit_storage(number: int) -> int: ...
def bit_trylock(address: int, lock_bit: int) -> bool: ...
def bit_unlock(address: int, lock_bit: int) -> None: ...
def bookmark_file_error_quark() -> Quark: ...
def build_filename(first_element: filename) -> filename: ...
def build_filename_valist(first_element: filename, args: va_list) -> filename: ...
def build_filenamev(args: list[filename]) -> filename: ...
def build_path(separator: filename, first_element: filename) -> filename: ...
def build_pathv(separator: str, args: list[filename]) -> filename: ...
def byte_array_free(array: list[int], free_segment: bool) -> int: ...
def byte_array_free_to_bytes(array: list[int]) -> Bytes: ...
def byte_array_new() -> list[int]: ...
def byte_array_new_take(data: list[int], len: gsize) -> list[int]: ...
def byte_array_steal(array: list[int], len: gsize) -> int: ...
def byte_array_unref(array: list[int]) -> None: ...
def canonicalize_filename(filename: filename, relative_to: filename) -> filename: ...
def chdir(path: filename) -> int: ...
def check_version(required_major: int, required_minor: int, required_micro: int) -> str: ...
def checksum_type_get_length(checksum_type: ChecksumType) -> gssize: ...
def child_watch_add(pid: Pid, function: ChildWatchFunc, data: object) -> int: ...
def child_watch_add_full(priority: int, pid: Pid, function: ChildWatchFunc, data: object, notify: DestroyNotify) -> int: ...
def child_watch_source_new(pid: Pid) -> Source: ...
def clear_error() -> None: ...
def clear_handle_id(tag_ptr: int, clear_func: ClearHandleFunc) -> None: ...
def clear_list(list_ptr: GLib.List, destroy: DestroyNotify) -> None: ...
def clear_pointer(pp: object, destroy: DestroyNotify) -> None: ...
def clear_slist(slist_ptr: GLib.SList, destroy: DestroyNotify) -> None: ...
def close(fd: int) -> bool: ...
def compute_checksum_for_bytes(checksum_type: ChecksumType, data: Bytes) -> str: ...
def compute_checksum_for_data(checksum_type: ChecksumType, data: list[int], length: gsize) -> str: ...
def compute_checksum_for_string(checksum_type: ChecksumType, str: str, length: gssize) -> str: ...
def compute_hmac_for_bytes(digest_type: ChecksumType, key: Bytes, data: Bytes) -> str: ...
def compute_hmac_for_data(digest_type: ChecksumType, key: list[int], key_len: gsize, data: list[int], length: gsize) -> str: ...
def compute_hmac_for_string(digest_type: ChecksumType, key: list[int], key_len: gsize, str: str, length: gssize) -> str: ...
def convert(str: list[int], len: gssize, to_codeset: str, from_codeset: str, bytes_read: gsize, bytes_written: gsize) -> list[int]: ...
def convert_error_quark() -> Quark: ...
def convert_with_fallback(str: list[int], len: gssize, to_codeset: str, from_codeset: str, fallback: str, bytes_read: gsize, bytes_written: gsize) -> list[int]: ...
def convert_with_iconv(str: list[int], len: gssize, converter: IConv, bytes_read: gsize, bytes_written: gsize) -> list[int]: ...
def datalist_clear(datalist: Data) -> None: ...
def datalist_foreach(datalist: Data, func: DataForeachFunc, user_data: object) -> None: ...
def datalist_get_data(datalist: Data, key: str) -> object: ...
def datalist_get_flags(datalist: Data) -> int: ...
def datalist_id_dup_data(datalist: Data, key_id: Quark, dup_func: DuplicateFunc, user_data: object) -> object: ...
def datalist_id_get_data(datalist: Data, key_id: Quark) -> object: ...
def datalist_id_remove_multiple(datalist: Data, keys: list[Quark], n_keys: gsize) -> None: ...
def datalist_id_remove_no_notify(datalist: Data, key_id: Quark) -> object: ...
def datalist_id_replace_data(datalist: Data, key_id: Quark, oldval: object, newval: object, destroy: DestroyNotify, old_destroy: DestroyNotify) -> bool: ...
def datalist_id_set_data_full(datalist: Data, key_id: Quark, data: object, destroy_func: DestroyNotify) -> None: ...
def datalist_init(datalist: Data) -> None: ...
def datalist_set_flags(datalist: Data, flags: int) -> None: ...
def datalist_unset_flags(datalist: Data, flags: int) -> None: ...
def dataset_destroy(dataset_location: object) -> None: ...
def dataset_foreach(dataset_location: object, func: DataForeachFunc, user_data: object) -> None: ...
def dataset_id_get_data(dataset_location: object, key_id: Quark) -> object: ...
def dataset_id_remove_no_notify(dataset_location: object, key_id: Quark) -> object: ...
def dataset_id_set_data_full(dataset_location: object, key_id: Quark, data: object, destroy_func: DestroyNotify) -> None: ...
def date_get_days_in_month(month: DateMonth, year: DateYear) -> int: ...
def date_get_monday_weeks_in_year(year: DateYear) -> int: ...
def date_get_sunday_weeks_in_year(year: DateYear) -> int: ...
def date_is_leap_year(year: DateYear) -> bool: ...
def date_strftime(s: str, slen: gsize, format: str, date: Date) -> gsize: ...
def date_valid_day(day: DateDay) -> bool: ...
def date_valid_dmy(day: DateDay, month: DateMonth, year: DateYear) -> bool: ...
def date_valid_julian(julian_date: int) -> bool: ...
def date_valid_month(month: DateMonth) -> bool: ...
def date_valid_weekday(weekday: DateWeekday) -> bool: ...
def date_valid_year(year: DateYear) -> bool: ...
def dcgettext(domain: str, msgid: str, category: int) -> str: ...
def dgettext(domain: str, msgid: str) -> str: ...
def dir_make_tmp(tmpl: filename) -> filename: ...
def direct_equal(v1: object, v2: object) -> bool: ...
def direct_hash(v: object) -> int: ...
def dngettext(domain: str, msgid: str, msgid_plural: str, n: int) -> str: ...
def double_equal(v1: object, v2: object) -> bool: ...
def double_hash(v: object) -> int: ...
def dpgettext(domain: str, msgctxtid: str, msgidoffset: gsize) -> str: ...
def dpgettext2(domain: str, context: str, msgid: str) -> str: ...
def environ_getenv(envp: list[filename], variable: filename) -> filename: ...
def environ_setenv(envp: list[filename], variable: filename, value: filename, overwrite: bool) -> list[filename]: ...
def environ_unsetenv(envp: list[filename], variable: filename) -> list[filename]: ...
def file_error_from_errno(err_no: int) -> FileError: ...
def file_error_quark() -> Quark: ...
def file_get_contents(filename: filename, contents: list[int], length: gsize) -> bool: ...
def file_open_tmp(tmpl: filename, name_used: filename) -> int: ...
def file_read_link(filename: filename) -> filename: ...
def file_set_contents(filename: filename, contents: list[int], length: gssize) -> bool: ...
def file_set_contents_full(filename: filename, contents: list[int], length: gssize, flags: FileSetContentsFlags, mode: int) -> bool: ...
def file_test(filename: filename, test: FileTest) -> bool: ...
def filename_display_basename(filename: filename) -> str: ...
def filename_display_name(filename: filename) -> str: ...
def filename_from_uri(uri: str, hostname: str) -> filename: ...
def filename_from_utf8(utf8string: str, len: gssize, bytes_read: gsize, bytes_written: gsize) -> filename: ...
def filename_to_uri(filename: filename, hostname: str) -> str: ...
def filename_to_utf8(opsysstring: filename, len: gssize, bytes_read: gsize, bytes_written: gsize) -> str: ...
def find_program_in_path(program: filename) -> filename: ...
def format_size(size: int) -> str: ...
def format_size_for_display(size: int) -> str: ...
def format_size_full(size: int, flags: FormatSizeFlags) -> str: ...
def fprintf(file: object, format: str) -> int: ...
def free(mem: object) -> None: ...
def get_application_name() -> str: ...
def get_charset(charset: str) -> bool: ...
def get_codeset() -> str: ...
def get_console_charset(charset: str) -> bool: ...
def get_current_dir() -> filename: ...
def get_current_time(result: TimeVal) -> None: ...
def get_environ() -> list[filename]: ...
def get_filename_charsets(filename_charsets: list[str]) -> bool: ...
def get_home_dir() -> filename: ...
def get_host_name() -> str: ...
def get_language_names() -> list[str]: ...
def get_language_names_with_category(category_name: str) -> list[str]: ...
def get_locale_variants(locale: str) -> list[str]: ...
def get_monotonic_time() -> int: ...
def get_num_processors() -> int: ...
def get_os_info(key_name: str) -> str: ...
def get_prgname() -> str: ...
def get_real_name() -> filename: ...
def get_real_time() -> int: ...
def get_system_config_dirs() -> list[filename]: ...
def get_system_data_dirs() -> list[filename]: ...
def get_tmp_dir() -> filename: ...
def get_user_cache_dir() -> filename: ...
def get_user_config_dir() -> filename: ...
def get_user_data_dir() -> filename: ...
def get_user_name() -> filename: ...
def get_user_runtime_dir() -> filename: ...
def get_user_special_dir(directory: UserDirectory) -> filename: ...
def get_user_state_dir() -> filename: ...
def getenv(variable: filename) -> filename: ...
def hash_table_add(hash_table: GLib.HashTable, key: object) -> bool: ...
def hash_table_contains(hash_table: GLib.HashTable, key: object) -> bool: ...
def hash_table_destroy(hash_table: GLib.HashTable) -> None: ...
def hash_table_insert(hash_table: GLib.HashTable, key: object, value: object) -> bool: ...
def hash_table_lookup(hash_table: GLib.HashTable, key: object) -> object: ...
def hash_table_lookup_extended(hash_table: GLib.HashTable, lookup_key: object, orig_key: object, value: object) -> bool: ...
def hash_table_new_similar(other_hash_table: GLib.HashTable) -> GLib.HashTable: ...
def hash_table_remove(hash_table: GLib.HashTable, key: object) -> bool: ...
def hash_table_remove_all(hash_table: GLib.HashTable) -> None: ...
def hash_table_replace(hash_table: GLib.HashTable, key: object, value: object) -> bool: ...
def hash_table_size(hash_table: GLib.HashTable) -> int: ...
def hash_table_steal(hash_table: GLib.HashTable, key: object) -> bool: ...
def hash_table_steal_all(hash_table: GLib.HashTable) -> None: ...
def hash_table_steal_extended(hash_table: GLib.HashTable, lookup_key: object, stolen_key: object, stolen_value: object) -> bool: ...
def hash_table_unref(hash_table: GLib.HashTable) -> None: ...
def hook_destroy(hook_list: HookList, hook_id: int) -> bool: ...
def hook_destroy_link(hook_list: HookList, hook: Hook) -> None: ...
def hook_free(hook_list: HookList, hook: Hook) -> None: ...
def hook_insert_before(hook_list: HookList, sibling: Hook, hook: Hook) -> None: ...
def hook_prepend(hook_list: HookList, hook: Hook) -> None: ...
def hook_unref(hook_list: HookList, hook: Hook) -> None: ...
def hostname_is_ascii_encoded(hostname: str) -> bool: ...
def hostname_is_ip_address(hostname: str) -> bool: ...
def hostname_is_non_ascii(hostname: str) -> bool: ...
def hostname_to_ascii(hostname: str) -> str: ...
def hostname_to_unicode(hostname: str) -> str: ...
def iconv(converter: IConv, inbuf: str, inbytes_left: gsize, outbuf: str, outbytes_left: gsize) -> gsize: ...
def iconv_open(to_codeset: str, from_codeset: str) -> IConv: ...
def idle_add(function: SourceFunc, data: object) -> int: ...
def idle_add_full(priority: int, function: SourceFunc, data: object, notify: DestroyNotify) -> int: ...
def idle_add_once(function: SourceOnceFunc, data: object) -> int: ...
def idle_remove_by_data(data: object) -> bool: ...
def idle_source_new() -> Source: ...
def int64_equal(v1: object, v2: object) -> bool: ...
def int64_hash(v: object) -> int: ...
def int_equal(v1: object, v2: object) -> bool: ...
def int_hash(v: object) -> int: ...
def intern_static_string(string: str) -> str: ...
def intern_string(string: str) -> str: ...
def io_add_watch(channel: IOChannel, condition: IOCondition, func: IOFunc, user_data: object) -> int: ...
def io_add_watch_full(channel: IOChannel, priority: int, condition: IOCondition, func: IOFunc, user_data: object, notify: DestroyNotify) -> int: ...
def io_channel_error_from_errno(en: int) -> IOChannelError: ...
def io_channel_error_quark() -> Quark: ...
def io_create_watch(channel: IOChannel, condition: IOCondition) -> Source: ...
def key_file_error_quark() -> Quark: ...
def listenv() -> list[filename]: ...
def locale_from_utf8(utf8string: str, len: gssize, bytes_read: gsize, bytes_written: gsize) -> list[int]: ...
def locale_to_utf8(opsysstring: list[int], len: gssize, bytes_read: gsize, bytes_written: gsize) -> str: ...
def log(log_domain: str, log_level: LogLevelFlags, format: str) -> None: ...
def log_default_handler(log_domain: str, log_level: LogLevelFlags, message: str, unused_data: object) -> None: ...
def log_get_debug_enabled() -> bool: ...
def log_remove_handler(log_domain: str, handler_id: int) -> None: ...
def log_set_always_fatal(fatal_mask: LogLevelFlags) -> LogLevelFlags: ...
def log_set_debug_enabled(enabled: bool) -> None: ...
def log_set_default_handler(log_func: LogFunc, user_data: object) -> LogFunc: ...
def log_set_fatal_mask(log_domain: str, fatal_mask: LogLevelFlags) -> LogLevelFlags: ...
def log_set_handler(log_domain: str, log_levels: LogLevelFlags, log_func: LogFunc, user_data: object) -> int: ...
def log_set_handler_full(log_domain: str, log_levels: LogLevelFlags, log_func: LogFunc, user_data: object, destroy: DestroyNotify) -> int: ...
def log_set_writer_func(func: LogWriterFunc, user_data: object, user_data_free: DestroyNotify) -> None: ...
def log_structured(log_domain: str, log_level: LogLevelFlags) -> None: ...
def log_structured_array(log_level: LogLevelFlags, fields: list[LogField], n_fields: gsize) -> None: ...
def log_structured_standard(log_domain: str, log_level: LogLevelFlags, file: str, line: str, func: str, message_format: str) -> None: ...
def log_variant(log_domain: str, log_level: LogLevelFlags, fields: Variant) -> None: ...
def log_writer_default(log_level: LogLevelFlags, fields: list[LogField], n_fields: gsize, user_data: object) -> LogWriterOutput: ...
def log_writer_default_set_use_stderr(use_stderr: bool) -> None: ...
def log_writer_default_would_drop(log_level: LogLevelFlags, log_domain: str) -> bool: ...
def log_writer_format_fields(log_level: LogLevelFlags, fields: list[LogField], n_fields: gsize, use_color: bool) -> str: ...
def log_writer_is_journald(output_fd: int) -> bool: ...
def log_writer_journald(log_level: LogLevelFlags, fields: list[LogField], n_fields: gsize, user_data: object) -> LogWriterOutput: ...
def log_writer_standard_streams(log_level: LogLevelFlags, fields: list[LogField], n_fields: gsize, user_data: object) -> LogWriterOutput: ...
def log_writer_supports_color(output_fd: int) -> bool: ...
def logv(log_domain: str, log_level: LogLevelFlags, format: str, args: va_list) -> None: ...
def main_context_default() -> MainContext: ...
def main_context_get_thread_default() -> MainContext: ...
def main_context_ref_thread_default() -> MainContext: ...
def main_current_source() -> Source: ...
def main_depth() -> int: ...
def malloc(n_bytes: gsize) -> object: ...
def malloc0(n_bytes: gsize) -> object: ...
def malloc0_n(n_blocks: gsize, n_block_bytes: gsize) -> object: ...
def malloc_n(n_blocks: gsize, n_block_bytes: gsize) -> object: ...
def markup_collect_attributes(element_name: str, attribute_names: str, attribute_values: str, error: Error, first_type: MarkupCollectType, first_attr: str) -> bool: ...
def markup_error_quark() -> Quark: ...
def markup_escape_text(text: str, length: gssize) -> str: ...
def markup_printf_escaped(format: str) -> str: ...
def markup_vprintf_escaped(format: str, args: va_list) -> str: ...
def mem_is_system_malloc() -> bool: ...
def mem_profile() -> None: ...
def mem_set_vtable(vtable: MemVTable) -> None: ...
def memdup(mem: object, byte_size: int) -> object: ...
def memdup2(mem: object, byte_size: gsize) -> object: ...
def mkdir_with_parents(pathname: filename, mode: int) -> int: ...
def mkdtemp(tmpl: filename) -> filename: ...
def mkdtemp_full(tmpl: filename, mode: int) -> filename: ...
def mkstemp(tmpl: filename) -> int: ...
def mkstemp_full(tmpl: filename, flags: int, mode: int) -> int: ...
def nullify_pointer(nullify_location: object) -> None: ...
def number_parser_error_quark() -> Quark: ...
def on_error_query(prg_name: str) -> None: ...
def on_error_stack_trace(prg_name: str) -> None: ...
def once_init_enter(location: object) -> bool: ...
def once_init_leave(location: object, result: gsize) -> None: ...
def option_error_quark() -> Quark: ...
def parse_debug_string(string: str, keys: list[DebugKey], nkeys: int) -> int: ...
def path_get_basename(file_name: filename) -> filename: ...
def path_get_dirname(file_name: filename) -> filename: ...
def path_is_absolute(file_name: filename) -> bool: ...
def path_skip_root(file_name: filename) -> filename: ...
def pattern_match(pspec: PatternSpec, string_length: int, string: str, string_reversed: str) -> bool: ...
def pattern_match_simple(pattern: str, string: str) -> bool: ...
def pattern_match_string(pspec: PatternSpec, string: str) -> bool: ...
def pointer_bit_lock(address: object, lock_bit: int) -> None: ...
def pointer_bit_trylock(address: object, lock_bit: int) -> bool: ...
def pointer_bit_unlock(address: object, lock_bit: int) -> None: ...
def poll(fds: PollFD, nfds: int, timeout: int) -> int: ...
def prefix_error(err: Error, format: str) -> None: ...
def prefix_error_literal(err: Error, prefix: str) -> None: ...
def print(format: str) -> None: ...
def printerr(format: str) -> None: ...
def printf(format: str) -> int: ...
def printf_string_upper_bound(format: str, args: va_list) -> gsize: ...
def propagate_error(dest: Error, src: Error) -> None: ...
def propagate_prefixed_error(dest: Error, src: Error, format: str) -> None: ...
def ptr_array_find(haystack: list[object], needle: object, index_: int) -> bool: ...
def ptr_array_find_with_equal_func(haystack: list[object], needle: object, equal_func: EqualFunc, index_: int) -> bool: ...
def qsort_with_data(pbase: object, total_elems: int, size: gsize, compare_func: CompareDataFunc, user_data: object) -> None: ...
def quark_from_static_string(string: str) -> Quark: ...
def quark_from_string(string: str) -> Quark: ...
def quark_to_string(quark: Quark) -> str: ...
def quark_try_string(string: str) -> Quark: ...
def random_double() -> float: ...
def random_double_range(begin: float, end: float) -> float: ...
def random_int() -> int: ...
def random_int_range(begin: int, end: int) -> int: ...
def random_set_seed(seed: int) -> None: ...
def rc_box_acquire(mem_block: object) -> object: ...
def rc_box_alloc(block_size: gsize) -> object: ...
def rc_box_alloc0(block_size: gsize) -> object: ...
def rc_box_dup(block_size: gsize, mem_block: object) -> object: ...
def rc_box_get_size(mem_block: object) -> gsize: ...
def rc_box_release(mem_block: object) -> None: ...
def rc_box_release_full(mem_block: object, clear_func: DestroyNotify) -> None: ...
def realloc(mem: object, n_bytes: gsize) -> object: ...
def realloc_n(mem: object, n_blocks: gsize, n_block_bytes: gsize) -> object: ...
def ref_count_compare(rc: int, val: int) -> bool: ...
def ref_count_dec(rc: int) -> bool: ...
def ref_count_inc(rc: int) -> None: ...
def ref_count_init(rc: int) -> None: ...
def ref_string_acquire(str: str) -> str: ...
def ref_string_length(str: str) -> gsize: ...
def ref_string_new(str: str) -> str: ...
def ref_string_new_intern(str: str) -> str: ...
def ref_string_new_len(str: str, len: gssize) -> str: ...
def ref_string_release(str: str) -> None: ...
def regex_check_replacement(replacement: str, has_references: bool) -> bool: ...
def regex_error_quark() -> Quark: ...
def regex_escape_nul(string: str, length: int) -> str: ...
def regex_escape_string(string: list[str], length: int) -> str: ...
def regex_match_simple(pattern: str, string: str, compile_options: RegexCompileFlags, match_options: RegexMatchFlags) -> bool: ...
def regex_split_simple(pattern: str, string: str, compile_options: RegexCompileFlags, match_options: RegexMatchFlags) -> list[str]: ...
def reload_user_special_dirs_cache() -> None: ...
def return_if_fail_warning(log_domain: str, pretty_function: str, expression: str) -> None: ...
def rmdir(filename: filename) -> int: ...
def sequence_get(iter: SequenceIter) -> object: ...
def sequence_insert_before(iter: SequenceIter, data: object) -> SequenceIter: ...
def sequence_move(src: SequenceIter, dest: SequenceIter) -> None: ...
def sequence_move_range(dest: SequenceIter, begin: SequenceIter, end: SequenceIter) -> None: ...
def sequence_range_get_midpoint(begin: SequenceIter, end: SequenceIter) -> SequenceIter: ...
def sequence_remove(iter: SequenceIter) -> None: ...
def sequence_remove_range(begin: SequenceIter, end: SequenceIter) -> None: ...
def sequence_set(iter: SequenceIter, data: object) -> None: ...
def sequence_swap(a: SequenceIter, b: SequenceIter) -> None: ...
def set_application_name(application_name: str) -> None: ...
def set_error(err: Error, domain: Quark, code: int, format: str) -> None: ...
def set_error_literal(err: Error, domain: Quark, code: int, message: str) -> None: ...
def set_prgname(prgname: str) -> None: ...
def set_print_handler(func: PrintFunc) -> PrintFunc: ...
def set_printerr_handler(func: PrintFunc) -> PrintFunc: ...
def setenv(variable: filename, value: filename, overwrite: bool) -> bool: ...
def shell_error_quark() -> Quark: ...
def shell_parse_argv(command_line: filename, argcp: int, argvp: list[filename]) -> bool: ...
def shell_quote(unquoted_string: filename) -> filename: ...
def shell_unquote(quoted_string: filename) -> filename: ...
def slice_alloc(block_size: gsize) -> object: ...
def slice_alloc0(block_size: gsize) -> object: ...
def slice_copy(block_size: gsize, mem_block: object) -> object: ...
def slice_free1(block_size: gsize, mem_block: object) -> None: ...
def slice_free_chain_with_offset(block_size: gsize, mem_chain: object, next_offset: gsize) -> None: ...
def slice_get_config(ckey: SliceConfig) -> int: ...
def slice_get_config_state(ckey: SliceConfig, address: int, n_values: int) -> int: ...
def slice_set_config(ckey: SliceConfig, value: int) -> None: ...
def snprintf(string: str, n: int, format: str) -> int: ...
def source_remove(tag: int) -> bool: ...
def source_remove_by_funcs_user_data(funcs: SourceFuncs, user_data: object) -> bool: ...
def source_remove_by_user_data(user_data: object) -> bool: ...
def source_set_name_by_id(tag: int, name: str) -> None: ...
def spaced_primes_closest(num: int) -> int: ...
def spawn_async(working_directory: filename, argv: list[filename], envp: list[filename], flags: SpawnFlags, child_setup: SpawnChildSetupFunc, user_data: object, child_pid: Pid) -> bool: ...
def spawn_async_with_fds(working_directory: filename, argv: list[str], envp: list[str], flags: SpawnFlags, child_setup: SpawnChildSetupFunc, user_data: object, child_pid: Pid, stdin_fd: int, stdout_fd: int, stderr_fd: int) -> bool: ...
def spawn_async_with_pipes(working_directory: filename, argv: list[filename], envp: list[filename], flags: SpawnFlags, child_setup: SpawnChildSetupFunc, user_data: object, child_pid: Pid, standard_input: int, standard_output: int, standard_error: int) -> bool: ...
def spawn_async_with_pipes_and_fds(working_directory: filename, argv: list[filename], envp: list[filename], flags: SpawnFlags, child_setup: SpawnChildSetupFunc, user_data: object, stdin_fd: int, stdout_fd: int, stderr_fd: int, source_fds: list[int], target_fds: list[int], n_fds: gsize, child_pid_out: Pid, stdin_pipe_out: int, stdout_pipe_out: int, stderr_pipe_out: int) -> bool: ...
def spawn_check_exit_status(wait_status: int) -> bool: ...
def spawn_check_wait_status(wait_status: int) -> bool: ...
def spawn_close_pid(pid: Pid) -> None: ...
def spawn_command_line_async(command_line: filename) -> bool: ...
def spawn_command_line_sync(command_line: filename, standard_output: list[int], standard_error: list[int], wait_status: int) -> bool: ...
def spawn_error_quark() -> Quark: ...
def spawn_exit_error_quark() -> Quark: ...
def spawn_sync(working_directory: filename, argv: list[filename], envp: list[filename], flags: SpawnFlags, child_setup: SpawnChildSetupFunc, user_data: object, standard_output: list[int], standard_error: list[int], wait_status: int) -> bool: ...
def sprintf(string: str, format: str) -> int: ...
def stpcpy(dest: str, src: str) -> str: ...
def str_equal(v1: object, v2: object) -> bool: ...
def str_has_prefix(str: str, prefix: str) -> bool: ...
def str_has_suffix(str: str, suffix: str) -> bool: ...
def str_hash(v: object) -> int: ...
def str_is_ascii(str: str) -> bool: ...
def str_match_string(search_term: str, potential_hit: str, accept_alternates: bool) -> bool: ...
def str_to_ascii(str: str, from_locale: str) -> str: ...
def str_tokenize_and_fold(string: str, translit_locale: str, ascii_alternates: list[str]) -> list[str]: ...
def strcanon(string: str, valid_chars: str, substitutor: str) -> str: ...
def strcasecmp(s1: str, s2: str) -> int: ...
def strchomp(string: str) -> str: ...
def strchug(string: str) -> str: ...
def strcmp0(str1: str, str2: str) -> int: ...
def strcompress(source: str) -> str: ...
def strconcat(string1: str) -> str: ...
def strdelimit(string: str, delimiters: str, new_delimiter: str) -> str: ...
def strdown(string: str) -> str: ...
def strdup(str: str) -> str: ...
def strdup_printf(format: str) -> str: ...
def strdup_vprintf(format: str, args: va_list) -> str: ...
def strdupv(str_array: str) -> list[str]: ...
def strerror(errnum: int) -> str: ...
def strescape(source: str, exceptions: str) -> str: ...
def strfreev(str_array: str) -> None: ...
def strip_context(msgid: str, msgval: str) -> str: ...
def strjoin(separator: str) -> str: ...
def strjoinv(separator: str, str_array: str) -> str: ...
def strlcat(dest: str, src: str, dest_size: gsize) -> gsize: ...
def strlcpy(dest: str, src: str, dest_size: gsize) -> gsize: ...
def strncasecmp(s1: str, s2: str, n: int) -> int: ...
def strndup(str: str, n: gsize) -> str: ...
def strnfill(length: gsize, fill_char: str) -> str: ...
def strreverse(string: str) -> str: ...
def strrstr(haystack: str, needle: str) -> str: ...
def strrstr_len(haystack: str, haystack_len: gssize, needle: str) -> str: ...
def strsignal(signum: int) -> str: ...
def strsplit(string: str, delimiter: str, max_tokens: int) -> list[str]: ...
def strsplit_set(string: str, delimiters: str, max_tokens: int) -> list[str]: ...
def strstr_len(haystack: str, haystack_len: gssize, needle: str) -> str: ...
def strtod(nptr: str, endptr: str) -> float: ...
def strup(string: str) -> str: ...
def strv_contains(strv: str, str: str) -> bool: ...
def strv_equal(strv1: str, strv2: str) -> bool: ...
def strv_get_type() -> GObject.Type: ...
def strv_length(str_array: str) -> int: ...
def test_add_data_func(testpath: str, test_data: object, test_func: TestDataFunc) -> None: ...
def test_add_data_func_full(testpath: str, test_data: object, test_func: TestDataFunc, data_free_func: DestroyNotify) -> None: ...
def test_add_func(testpath: str, test_func: TestFunc) -> None: ...
def test_add_vtable(testpath: str, data_size: gsize, test_data: object, data_setup: TestFixtureFunc, data_test: TestFixtureFunc, data_teardown: TestFixtureFunc) -> None: ...
def test_assert_expected_messages_internal(domain: str, file: str, line: int, func: str) -> None: ...
def test_bug(bug_uri_snippet: str) -> None: ...
def test_bug_base(uri_pattern: str) -> None: ...
def test_build_filename(file_type: TestFileType, first_path: str) -> str: ...
def test_create_case(test_name: str, data_size: gsize, test_data: object, data_setup: TestFixtureFunc, data_test: TestFixtureFunc, data_teardown: TestFixtureFunc) -> TestCase: ...
def test_create_suite(suite_name: str) -> TestSuite: ...
def test_expect_message(log_domain: str, log_level: LogLevelFlags, pattern: str) -> None: ...
def test_fail() -> None: ...
def test_fail_printf(format: str) -> None: ...
def test_failed() -> bool: ...
def test_get_dir(file_type: TestFileType) -> filename: ...
def test_get_filename(file_type: TestFileType, first_path: str) -> str: ...
def test_get_path() -> str: ...
def test_get_root() -> TestSuite: ...
def test_incomplete(msg: str) -> None: ...
def test_incomplete_printf(format: str) -> None: ...
def test_init(argc: int, argv: str) -> None: ...
def test_log_set_fatal_handler(log_func: TestLogFatalFunc, user_data: object) -> None: ...
def test_log_type_name(log_type: TestLogType) -> str: ...
def test_maximized_result(maximized_quantity: float, format: str) -> None: ...
def test_message(format: str) -> None: ...
def test_minimized_result(minimized_quantity: float, format: str) -> None: ...
def test_queue_destroy(destroy_func: DestroyNotify, destroy_data: object) -> None: ...
def test_queue_free(gfree_pointer: object) -> None: ...
def test_rand_double() -> float: ...
def test_rand_double_range(range_start: float, range_end: float) -> float: ...
def test_rand_int() -> int: ...
def test_rand_int_range(begin: int, end: int) -> int: ...
def test_run() -> int: ...
def test_run_suite(suite: TestSuite) -> int: ...
def test_set_nonfatal_assertions() -> None: ...
def test_skip(msg: str) -> None: ...
def test_skip_printf(format: str) -> None: ...
def test_subprocess() -> bool: ...
def test_summary(summary: str) -> None: ...
def test_timer_elapsed() -> float: ...
def test_timer_last() -> float: ...
def test_timer_start() -> None: ...
def test_trap_assertions(domain: str, file: str, line: int, func: str, assertion_flags: int, pattern: str) -> None: ...
def test_trap_fork(usec_timeout: int, test_trap_flags: TestTrapFlags) -> bool: ...
def test_trap_has_passed() -> bool: ...
def test_trap_reached_timeout() -> bool: ...
def test_trap_subprocess(test_path: str, usec_timeout: int, test_flags: TestSubprocessFlags) -> None: ...
def thread_error_quark() -> Quark: ...
def thread_exit(retval: object) -> None: ...
def thread_pool_get_max_idle_time() -> int: ...
def thread_pool_get_max_unused_threads() -> int: ...
def thread_pool_get_num_unused_threads() -> int: ...
def thread_pool_set_max_idle_time(interval: int) -> None: ...
def thread_pool_set_max_unused_threads(max_threads: int) -> None: ...
def thread_pool_stop_unused_threads() -> None: ...
def thread_self() -> Thread: ...
def thread_yield() -> None: ...
def time_val_from_iso8601(iso_date: str, time_: TimeVal) -> bool: ...
def timeout_add(interval: int, function: SourceFunc, data: object) -> int: ...
def timeout_add_full(priority: int, interval: int, function: SourceFunc, data: object, notify: DestroyNotify) -> int: ...
def timeout_add_once(interval: int, function: SourceOnceFunc, data: object) -> int: ...
def timeout_add_seconds(interval: int, function: SourceFunc, data: object) -> int: ...
def timeout_add_seconds_full(priority: int, interval: int, function: SourceFunc, data: object, notify: DestroyNotify) -> int: ...
def timeout_source_new(interval: int) -> Source: ...
def timeout_source_new_seconds(interval: int) -> Source: ...
def trash_stack_height(stack_p: TrashStack) -> int: ...
def trash_stack_peek(stack_p: TrashStack) -> object: ...
def trash_stack_pop(stack_p: TrashStack) -> object: ...
def trash_stack_push(stack_p: TrashStack, data_p: object) -> None: ...
def try_malloc(n_bytes: gsize) -> object: ...
def try_malloc0(n_bytes: gsize) -> object: ...
def try_malloc0_n(n_blocks: gsize, n_block_bytes: gsize) -> object: ...
def try_malloc_n(n_blocks: gsize, n_block_bytes: gsize) -> object: ...
def try_realloc(mem: object, n_bytes: gsize) -> object: ...
def try_realloc_n(mem: object, n_blocks: gsize, n_block_bytes: gsize) -> object: ...
def ucs4_to_utf16(str: gunichar, len: int, items_read: int, items_written: int) -> int: ...
def ucs4_to_utf8(str: gunichar, len: int, items_read: int, items_written: int) -> str: ...
def unichar_break_type(c: gunichar) -> UnicodeBreakType: ...
def unichar_combining_class(uc: gunichar) -> int: ...
def unichar_compose(a: gunichar, b: gunichar, ch: gunichar) -> bool: ...
def unichar_decompose(ch: gunichar, a: gunichar, b: gunichar) -> bool: ...
def unichar_digit_value(c: gunichar) -> int: ...
def unichar_fully_decompose(ch: gunichar, compat: bool, result: gunichar, result_len: gsize) -> gsize: ...
def unichar_get_mirror_char(ch: gunichar, mirrored_ch: gunichar) -> bool: ...
def unichar_get_script(ch: gunichar) -> UnicodeScript: ...
def unichar_isalnum(c: gunichar) -> bool: ...
def unichar_isalpha(c: gunichar) -> bool: ...
def unichar_iscntrl(c: gunichar) -> bool: ...
def unichar_isdefined(c: gunichar) -> bool: ...
def unichar_isdigit(c: gunichar) -> bool: ...
def unichar_isgraph(c: gunichar) -> bool: ...
def unichar_islower(c: gunichar) -> bool: ...
def unichar_ismark(c: gunichar) -> bool: ...
def unichar_isprint(c: gunichar) -> bool: ...
def unichar_ispunct(c: gunichar) -> bool: ...
def unichar_isspace(c: gunichar) -> bool: ...
def unichar_istitle(c: gunichar) -> bool: ...
def unichar_isupper(c: gunichar) -> bool: ...
def unichar_iswide(c: gunichar) -> bool: ...
def unichar_iswide_cjk(c: gunichar) -> bool: ...
def unichar_isxdigit(c: gunichar) -> bool: ...
def unichar_iszerowidth(c: gunichar) -> bool: ...
def unichar_to_utf8(c: gunichar, outbuf: str) -> int: ...
def unichar_tolower(c: gunichar) -> gunichar: ...
def unichar_totitle(c: gunichar) -> gunichar: ...
def unichar_toupper(c: gunichar) -> gunichar: ...
def unichar_type(c: gunichar) -> UnicodeType: ...
def unichar_validate(ch: gunichar) -> bool: ...
def unichar_xdigit_value(c: gunichar) -> int: ...
def unicode_canonical_decomposition(ch: gunichar, result_len: gsize) -> gunichar: ...
def unicode_canonical_ordering(string: gunichar, len: gsize) -> None: ...
def unicode_script_from_iso15924(iso15924: int) -> UnicodeScript: ...
def unicode_script_to_iso15924(script: UnicodeScript) -> int: ...
def unix_error_quark() -> Quark: ...
def unix_fd_add(fd: int, condition: IOCondition, function: UnixFDSourceFunc, user_data: object) -> int: ...
def unix_fd_add_full(priority: int, fd: int, condition: IOCondition, function: UnixFDSourceFunc, user_data: object, notify: DestroyNotify) -> int: ...
def unix_fd_source_new(fd: int, condition: IOCondition) -> Source: ...
def unix_get_passwd_entry(user_name: str) -> object: ...
def unix_open_pipe(fds: list[int], flags: int) -> bool: ...
def unix_set_fd_nonblocking(fd: int, nonblock: bool) -> bool: ...
def unix_signal_add(signum: int, handler: SourceFunc, user_data: object) -> int: ...
def unix_signal_add_full(priority: int, signum: int, handler: SourceFunc, user_data: object, notify: DestroyNotify) -> int: ...
def unix_signal_source_new(signum: int) -> Source: ...
def unlink(filename: filename) -> int: ...
def unsetenv(variable: filename) -> None: ...
def uri_build(flags: UriFlags, scheme: str, userinfo: str, host: str, port: int, path: str, query: str, fragment: str) -> Uri: ...
def uri_build_with_user(flags: UriFlags, scheme: str, user: str, password: str, auth_params: str, host: str, port: int, path: str, query: str, fragment: str) -> Uri: ...
def uri_error_quark() -> Quark: ...
def uri_escape_bytes(unescaped: list[int], length: gsize, reserved_chars_allowed: str) -> str: ...
def uri_escape_string(unescaped: str, reserved_chars_allowed: str, allow_utf8: bool) -> str: ...
def uri_is_valid(uri_string: str, flags: UriFlags) -> bool: ...
def uri_join(flags: UriFlags, scheme: str, userinfo: str, host: str, port: int, path: str, query: str, fragment: str) -> str: ...
def uri_join_with_user(flags: UriFlags, scheme: str, user: str, password: str, auth_params: str, host: str, port: int, path: str, query: str, fragment: str) -> str: ...
def uri_list_extract_uris(uri_list: str) -> list[str]: ...
def uri_parse(uri_string: str, flags: UriFlags) -> Uri: ...
def uri_parse_params(params: str, length: gssize, separators: str, flags: UriParamsFlags) -> GLib.HashTable: ...
def uri_parse_scheme(uri: str) -> str: ...
def uri_peek_scheme(uri: str) -> str: ...
def uri_resolve_relative(base_uri_string: str, uri_ref: str, flags: UriFlags) -> str: ...
def uri_split(uri_ref: str, flags: UriFlags, scheme: str, userinfo: str, host: str, port: int, path: str, query: str, fragment: str) -> bool: ...
def uri_split_network(uri_string: str, flags: UriFlags, scheme: str, host: str, port: int) -> bool: ...
def uri_split_with_user(uri_ref: str, flags: UriFlags, scheme: str, user: str, password: str, auth_params: str, host: str, port: int, path: str, query: str, fragment: str) -> bool: ...
def uri_unescape_bytes(escaped_string: str, length: gssize, illegal_characters: str) -> Bytes: ...
def uri_unescape_segment(escaped_string: str, escaped_string_end: str, illegal_characters: str) -> str: ...
def uri_unescape_string(escaped_string: str, illegal_characters: str) -> str: ...
def usleep(microseconds: int) -> None: ...
def utf16_to_ucs4(str: int, len: int, items_read: int, items_written: int) -> gunichar: ...
def utf16_to_utf8(str: int, len: int, items_read: int, items_written: int) -> str: ...
def utf8_casefold(str: str, len: gssize) -> str: ...
def utf8_collate(str1: str, str2: str) -> int: ...
def utf8_collate_key(str: str, len: gssize) -> str: ...
def utf8_collate_key_for_filename(str: str, len: gssize) -> str: ...
def utf8_find_next_char(p: str, end: str) -> str: ...
def utf8_find_prev_char(str: str, p: str) -> str: ...
def utf8_get_char(p: str) -> gunichar: ...
def utf8_get_char_validated(p: str, max_len: gssize) -> gunichar: ...
def utf8_make_valid(str: str, len: gssize) -> str: ...
def utf8_normalize(str: str, len: gssize, mode: NormalizeMode) -> str: ...
def utf8_offset_to_pointer(str: str, offset: int) -> str: ...
def utf8_pointer_to_offset(str: str, pos: str) -> int: ...
def utf8_prev_char(p: str) -> str: ...
def utf8_strchr(p: str, len: gssize, c: gunichar) -> str: ...
def utf8_strdown(str: str, len: gssize) -> str: ...
def utf8_strlen(p: str, max: gssize) -> int: ...
def utf8_strncpy(dest: str, src: str, n: gsize) -> str: ...
def utf8_strrchr(p: str, len: gssize, c: gunichar) -> str: ...
def utf8_strreverse(str: str, len: gssize) -> str: ...
def utf8_strup(str: str, len: gssize) -> str: ...
def utf8_substring(str: str, start_pos: int, end_pos: int) -> str: ...
def utf8_to_ucs4(str: str, len: int, items_read: int, items_written: int) -> gunichar: ...
def utf8_to_ucs4_fast(str: str, len: int, items_written: int) -> gunichar: ...
def utf8_to_utf16(str: str, len: int, items_read: int, items_written: int) -> int: ...
def utf8_validate(str: list[int], max_len: gssize, end: str) -> bool: ...
def utf8_validate_len(str: list[int], max_len: gsize, end: str) -> bool: ...
def uuid_string_is_valid(str: str) -> bool: ...
def uuid_string_random() -> str: ...
def variant_get_gtype() -> GObject.Type: ...
def variant_is_object_path(string: str) -> bool: ...
def variant_is_signature(string: str) -> bool: ...
def variant_parse(type: VariantType, text: str, limit: str, endptr: str) -> Variant: ...
def variant_parse_error_print_context(error: Error, source_str: str) -> str: ...
def variant_parse_error_quark() -> Quark: ...
def variant_parser_get_error_quark() -> Quark: ...
def variant_type_checked_(arg0: str) -> VariantType: ...
def variant_type_string_get_depth_(type_string: str) -> gsize: ...
def variant_type_string_is_valid(type_string: str) -> bool: ...
def variant_type_string_scan(string: str, limit: str, endptr: str) -> bool: ...
def vasprintf(string: str, format: str, args: va_list) -> int: ...
def vfprintf(file: object, format: str, args: va_list) -> int: ...
def vprintf(format: str, args: va_list) -> int: ...
def vsnprintf(string: str, n: int, format: str, args: va_list) -> int: ...
def vsprintf(string: str, format: str, args: va_list) -> int: ...
def warn_message(domain: str, file: str, line: int, func: str, warnexpr: str) -> None: ...

class AsciiType(GObject.GFlag): 
    ALNUM = ...
    ALPHA = ...
    CNTRL = ...
    DIGIT = ...
    GRAPH = ...
    LOWER = ...
    PRINT = ...
    PUNCT = ...
    SPACE = ...
    UPPER = ...
    XDIGIT = ...

class FileSetContentsFlags(GObject.GFlag): 
    NONE = ...
    CONSISTENT = ...
    DURABLE = ...
    ONLY_EXISTING = ...

class FileTest(GObject.GFlag): 
    IS_REGULAR = ...
    IS_SYMLINK = ...
    IS_DIR = ...
    IS_EXECUTABLE = ...
    EXISTS = ...

class FormatSizeFlags(GObject.GFlag): 
    DEFAULT = ...
    LONG_FORMAT = ...
    IEC_UNITS = ...
    BITS = ...
    ONLY_VALUE = ...
    ONLY_UNIT = ...

class HookFlagMask(GObject.GFlag): 
    ACTIVE = ...
    IN_CALL = ...
    MASK = ...

class IOCondition(GObject.GFlag): 
    IN = ...
    OUT = ...
    PRI = ...
    ERR = ...
    HUP = ...
    NVAL = ...

class IOFlags(GObject.GFlag): 
    NONE = ...
    APPEND = ...
    NONBLOCK = ...
    IS_READABLE = ...
    IS_WRITABLE = ...
    IS_WRITEABLE = ...
    IS_SEEKABLE = ...
    MASK = ...
    GET_MASK = ...
    SET_MASK = ...

class KeyFileFlags(GObject.GFlag): 
    NONE = ...
    KEEP_COMMENTS = ...
    KEEP_TRANSLATIONS = ...

class LogLevelFlags(GObject.GFlag): 
    FLAG_RECURSION = ...
    FLAG_FATAL = ...
    LEVEL_ERROR = ...
    LEVEL_CRITICAL = ...
    LEVEL_WARNING = ...
    LEVEL_MESSAGE = ...
    LEVEL_INFO = ...
    LEVEL_DEBUG = ...
    LEVEL_MASK = ...

class MainContextFlags(GObject.GFlag): 
    NONE = ...
    OWNERLESS_POLLING = ...

class MarkupCollectType(GObject.GFlag): 
    INVALID = ...
    STRING = ...
    STRDUP = ...
    BOOLEAN = ...
    TRISTATE = ...
    OPTIONAL = ...

class MarkupParseFlags(GObject.GFlag): 
    DEFAULT_FLAGS = ...
    DO_NOT_USE_THIS_UNSUPPORTED_FLAG = ...
    TREAT_CDATA_AS_TEXT = ...
    PREFIX_ERROR_POSITION = ...
    IGNORE_QUALIFIED = ...

class OptionFlags(GObject.GFlag): 
    NONE = ...
    HIDDEN = ...
    IN_MAIN = ...
    REVERSE = ...
    NO_ARG = ...
    FILENAME = ...
    OPTIONAL_ARG = ...
    NOALIAS = ...

class RegexCompileFlags(GObject.GFlag): 
    DEFAULT = ...
    CASELESS = ...
    MULTILINE = ...
    DOTALL = ...
    EXTENDED = ...
    ANCHORED = ...
    DOLLAR_ENDONLY = ...
    UNGREEDY = ...
    RAW = ...
    NO_AUTO_CAPTURE = ...
    OPTIMIZE = ...
    FIRSTLINE = ...
    DUPNAMES = ...
    NEWLINE_CR = ...
    NEWLINE_LF = ...
    NEWLINE_CRLF = ...
    NEWLINE_ANYCRLF = ...
    BSR_ANYCRLF = ...
    JAVASCRIPT_COMPAT = ...

class RegexMatchFlags(GObject.GFlag): 
    DEFAULT = ...
    ANCHORED = ...
    NOTBOL = ...
    NOTEOL = ...
    NOTEMPTY = ...
    PARTIAL = ...
    NEWLINE_CR = ...
    NEWLINE_LF = ...
    NEWLINE_CRLF = ...
    NEWLINE_ANY = ...
    NEWLINE_ANYCRLF = ...
    BSR_ANYCRLF = ...
    BSR_ANY = ...
    PARTIAL_SOFT = ...
    PARTIAL_HARD = ...
    NOTEMPTY_ATSTART = ...

class SpawnFlags(GObject.GFlag): 
    DEFAULT = ...
    LEAVE_DESCRIPTORS_OPEN = ...
    DO_NOT_REAP_CHILD = ...
    SEARCH_PATH = ...
    STDOUT_TO_DEV_NULL = ...
    STDERR_TO_DEV_NULL = ...
    CHILD_INHERITS_STDIN = ...
    FILE_AND_ARGV_ZERO = ...
    SEARCH_PATH_FROM_ENVP = ...
    CLOEXEC_PIPES = ...
    CHILD_INHERITS_STDOUT = ...
    CHILD_INHERITS_STDERR = ...
    STDIN_FROM_DEV_NULL = ...

class TestSubprocessFlags(GObject.GFlag): 
    DEFAULT = ...
    INHERIT_STDIN = ...
    INHERIT_STDOUT = ...
    INHERIT_STDERR = ...

class TestTrapFlags(GObject.GFlag): 
    DEFAULT = ...
    SILENCE_STDOUT = ...
    SILENCE_STDERR = ...
    INHERIT_STDIN = ...

class TraverseFlags(GObject.GFlag): 
    LEAVES = ...
    NON_LEAVES = ...
    ALL = ...
    MASK = ...
    LEAFS = ...
    NON_LEAFS = ...

class UriFlags(GObject.GFlag): 
    NONE = ...
    PARSE_RELAXED = ...
    HAS_PASSWORD = ...
    HAS_AUTH_PARAMS = ...
    ENCODED = ...
    NON_DNS = ...
    ENCODED_QUERY = ...
    ENCODED_PATH = ...
    ENCODED_FRAGMENT = ...
    SCHEME_NORMALIZE = ...

class UriHideFlags(GObject.GFlag): 
    NONE = ...
    USERINFO = ...
    PASSWORD = ...
    AUTH_PARAMS = ...
    QUERY = ...
    FRAGMENT = ...

class UriParamsFlags(GObject.GFlag): 
    NONE = ...
    CASE_INSENSITIVE = ...
    WWW_FORM = ...
    PARSE_RELAXED = ...

class BookmarkFileError(GObject.GEnum): 
    INVALID_URI = ...
    INVALID_VALUE = ...
    APP_NOT_REGISTERED = ...
    URI_NOT_FOUND = ...
    READ = ...
    UNKNOWN_ENCODING = ...
    WRITE = ...
    FILE_NOT_FOUND = ...

class ChecksumType(GObject.GEnum): 
    MD5 = ...
    SHA1 = ...
    SHA256 = ...
    SHA512 = ...
    SHA384 = ...

class ConvertError(GObject.GEnum): 
    NO_CONVERSION = ...
    ILLEGAL_SEQUENCE = ...
    FAILED = ...
    PARTIAL_INPUT = ...
    BAD_URI = ...
    NOT_ABSOLUTE_PATH = ...
    NO_MEMORY = ...
    EMBEDDED_NUL = ...

class DateDMY(GObject.GEnum): 
    DAY = ...
    MONTH = ...
    YEAR = ...

class DateMonth(GObject.GEnum): 
    BAD_MONTH = ...
    JANUARY = ...
    FEBRUARY = ...
    MARCH = ...
    APRIL = ...
    MAY = ...
    JUNE = ...
    JULY = ...
    AUGUST = ...
    SEPTEMBER = ...
    OCTOBER = ...
    NOVEMBER = ...
    DECEMBER = ...

class DateWeekday(GObject.GEnum): 
    BAD_WEEKDAY = ...
    MONDAY = ...
    TUESDAY = ...
    WEDNESDAY = ...
    THURSDAY = ...
    FRIDAY = ...
    SATURDAY = ...
    SUNDAY = ...

class ErrorType(GObject.GEnum): 
    UNKNOWN = ...
    UNEXP_EOF = ...
    UNEXP_EOF_IN_STRING = ...
    UNEXP_EOF_IN_COMMENT = ...
    NON_DIGIT_IN_CONST = ...
    DIGIT_RADIX = ...
    FLOAT_RADIX = ...
    FLOAT_MALFORMED = ...

class FileError(GObject.GEnum): 
    EXIST = ...
    ISDIR = ...
    ACCES = ...
    NAMETOOLONG = ...
    NOENT = ...
    NOTDIR = ...
    NXIO = ...
    NODEV = ...
    ROFS = ...
    TXTBSY = ...
    FAULT = ...
    LOOP = ...
    NOSPC = ...
    NOMEM = ...
    MFILE = ...
    NFILE = ...
    BADF = ...
    INVAL = ...
    PIPE = ...
    AGAIN = ...
    INTR = ...
    IO = ...
    PERM = ...
    NOSYS = ...
    FAILED = ...

class IOChannelError(GObject.GEnum): 
    FBIG = ...
    INVAL = ...
    IO = ...
    ISDIR = ...
    NOSPC = ...
    NXIO = ...
    OVERFLOW = ...
    PIPE = ...
    FAILED = ...

class IOError(GObject.GEnum): 
    NONE = ...
    AGAIN = ...
    INVAL = ...
    UNKNOWN = ...

class IOStatus(GObject.GEnum): 
    ERROR = ...
    NORMAL = ...
    EOF = ...
    AGAIN = ...

class KeyFileError(GObject.GEnum): 
    UNKNOWN_ENCODING = ...
    PARSE = ...
    NOT_FOUND = ...
    KEY_NOT_FOUND = ...
    GROUP_NOT_FOUND = ...
    INVALID_VALUE = ...

class LogWriterOutput(GObject.GEnum): 
    HANDLED = ...
    UNHANDLED = ...

class MarkupError(GObject.GEnum): 
    BAD_UTF8 = ...
    EMPTY = ...
    PARSE = ...
    UNKNOWN_ELEMENT = ...
    UNKNOWN_ATTRIBUTE = ...
    INVALID_CONTENT = ...
    MISSING_ATTRIBUTE = ...

class NormalizeMode(GObject.GEnum): 
    DEFAULT = ...
    NFD = ...
    DEFAULT_COMPOSE = ...
    NFC = ...
    ALL = ...
    NFKD = ...
    ALL_COMPOSE = ...
    NFKC = ...

class NumberParserError(GObject.GEnum): 
    INVALID = ...
    OUT_OF_BOUNDS = ...

class OnceStatus(GObject.GEnum): 
    NOTCALLED = ...
    PROGRESS = ...
    READY = ...

class OptionArg(GObject.GEnum): 
    NONE = ...
    STRING = ...
    INT = ...
    CALLBACK = ...
    FILENAME = ...
    STRING_ARRAY = ...
    FILENAME_ARRAY = ...
    DOUBLE = ...
    INT64 = ...

class OptionError(GObject.GEnum): 
    UNKNOWN_OPTION = ...
    BAD_VALUE = ...
    FAILED = ...

class RegexError(GObject.GEnum): 
    COMPILE = ...
    OPTIMIZE = ...
    REPLACE = ...
    MATCH = ...
    INTERNAL = ...
    STRAY_BACKSLASH = ...
    MISSING_CONTROL_CHAR = ...
    UNRECOGNIZED_ESCAPE = ...
    QUANTIFIERS_OUT_OF_ORDER = ...
    QUANTIFIER_TOO_BIG = ...
    UNTERMINATED_CHARACTER_CLASS = ...
    INVALID_ESCAPE_IN_CHARACTER_CLASS = ...
    RANGE_OUT_OF_ORDER = ...
    NOTHING_TO_REPEAT = ...
    UNRECOGNIZED_CHARACTER = ...
    POSIX_NAMED_CLASS_OUTSIDE_CLASS = ...
    UNMATCHED_PARENTHESIS = ...
    INEXISTENT_SUBPATTERN_REFERENCE = ...
    UNTERMINATED_COMMENT = ...
    EXPRESSION_TOO_LARGE = ...
    MEMORY_ERROR = ...
    VARIABLE_LENGTH_LOOKBEHIND = ...
    MALFORMED_CONDITION = ...
    TOO_MANY_CONDITIONAL_BRANCHES = ...
    ASSERTION_EXPECTED = ...
    UNKNOWN_POSIX_CLASS_NAME = ...
    POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED = ...
    HEX_CODE_TOO_LARGE = ...
    INVALID_CONDITION = ...
    SINGLE_BYTE_MATCH_IN_LOOKBEHIND = ...
    INFINITE_LOOP = ...
    MISSING_SUBPATTERN_NAME_TERMINATOR = ...
    DUPLICATE_SUBPATTERN_NAME = ...
    MALFORMED_PROPERTY = ...
    UNKNOWN_PROPERTY = ...
    SUBPATTERN_NAME_TOO_LONG = ...
    TOO_MANY_SUBPATTERNS = ...
    INVALID_OCTAL_VALUE = ...
    TOO_MANY_BRANCHES_IN_DEFINE = ...
    DEFINE_REPETION = ...
    INCONSISTENT_NEWLINE_OPTIONS = ...
    MISSING_BACK_REFERENCE = ...
    INVALID_RELATIVE_REFERENCE = ...
    BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN = ...
    UNKNOWN_BACKTRACKING_CONTROL_VERB = ...
    NUMBER_TOO_BIG = ...
    MISSING_SUBPATTERN_NAME = ...
    MISSING_DIGIT = ...
    INVALID_DATA_CHARACTER = ...
    EXTRA_SUBPATTERN_NAME = ...
    BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED = ...
    INVALID_CONTROL_CHAR = ...
    MISSING_NAME = ...
    NOT_SUPPORTED_IN_CLASS = ...
    TOO_MANY_FORWARD_REFERENCES = ...
    NAME_TOO_LONG = ...
    CHARACTER_VALUE_TOO_LARGE = ...

class SeekType(GObject.GEnum): 
    CUR = ...
    SET = ...
    END = ...

class ShellError(GObject.GEnum): 
    BAD_QUOTING = ...
    EMPTY_STRING = ...
    FAILED = ...

class SliceConfig(GObject.GEnum): 
    ALWAYS_MALLOC = ...
    BYPASS_MAGAZINES = ...
    WORKING_SET_MSECS = ...
    COLOR_INCREMENT = ...
    CHUNK_SIZES = ...
    CONTENTION_COUNTER = ...

class SpawnError(GObject.GEnum): 
    FORK = ...
    READ = ...
    CHDIR = ...
    ACCES = ...
    PERM = ...
    TOO_BIG = ...
    2BIG = ...
    NOEXEC = ...
    NAMETOOLONG = ...
    NOENT = ...
    NOMEM = ...
    NOTDIR = ...
    LOOP = ...
    TXTBUSY = ...
    IO = ...
    NFILE = ...
    MFILE = ...
    INVAL = ...
    ISDIR = ...
    LIBBAD = ...
    FAILED = ...

class TestFileType(GObject.GEnum): 
    DIST = ...
    BUILT = ...

class TestLogType(GObject.GEnum): 
    NONE = ...
    ERROR = ...
    START_BINARY = ...
    LIST_CASE = ...
    SKIP_CASE = ...
    START_CASE = ...
    STOP_CASE = ...
    MIN_RESULT = ...
    MAX_RESULT = ...
    MESSAGE = ...
    START_SUITE = ...
    STOP_SUITE = ...

class TestResult(GObject.GEnum): 
    SUCCESS = ...
    SKIPPED = ...
    FAILURE = ...
    INCOMPLETE = ...

class ThreadError(GObject.GEnum): 
    THREAD_ERROR_AGAIN = ...

class TimeType(GObject.GEnum): 
    STANDARD = ...
    DAYLIGHT = ...
    UNIVERSAL = ...

class TokenType(GObject.GEnum): 
    EOF = ...
    LEFT_PAREN = ...
    RIGHT_PAREN = ...
    LEFT_CURLY = ...
    RIGHT_CURLY = ...
    LEFT_BRACE = ...
    RIGHT_BRACE = ...
    EQUAL_SIGN = ...
    COMMA = ...
    NONE = ...
    ERROR = ...
    CHAR = ...
    BINARY = ...
    OCTAL = ...
    INT = ...
    HEX = ...
    FLOAT = ...
    STRING = ...
    SYMBOL = ...
    IDENTIFIER = ...
    IDENTIFIER_NULL = ...
    COMMENT_SINGLE = ...
    COMMENT_MULTI = ...

class TraverseType(GObject.GEnum): 
    IN_ORDER = ...
    PRE_ORDER = ...
    POST_ORDER = ...
    LEVEL_ORDER = ...

class UnicodeBreakType(GObject.GEnum): 
    MANDATORY = ...
    CARRIAGE_RETURN = ...
    LINE_FEED = ...
    COMBINING_MARK = ...
    SURROGATE = ...
    ZERO_WIDTH_SPACE = ...
    INSEPARABLE = ...
    NON_BREAKING_GLUE = ...
    CONTINGENT = ...
    SPACE = ...
    AFTER = ...
    BEFORE = ...
    BEFORE_AND_AFTER = ...
    HYPHEN = ...
    NON_STARTER = ...
    OPEN_PUNCTUATION = ...
    CLOSE_PUNCTUATION = ...
    QUOTATION = ...
    EXCLAMATION = ...
    IDEOGRAPHIC = ...
    NUMERIC = ...
    INFIX_SEPARATOR = ...
    SYMBOL = ...
    ALPHABETIC = ...
    PREFIX = ...
    POSTFIX = ...
    COMPLEX_CONTEXT = ...
    AMBIGUOUS = ...
    UNKNOWN = ...
    NEXT_LINE = ...
    WORD_JOINER = ...
    HANGUL_L_JAMO = ...
    HANGUL_V_JAMO = ...
    HANGUL_T_JAMO = ...
    HANGUL_LV_SYLLABLE = ...
    HANGUL_LVT_SYLLABLE = ...
    CLOSE_PARANTHESIS = ...
    CLOSE_PARENTHESIS = ...
    CONDITIONAL_JAPANESE_STARTER = ...
    HEBREW_LETTER = ...
    REGIONAL_INDICATOR = ...
    EMOJI_BASE = ...
    EMOJI_MODIFIER = ...
    ZERO_WIDTH_JOINER = ...

class UnicodeScript(GObject.GEnum): 
    INVALID_CODE = ...
    COMMON = ...
    INHERITED = ...
    ARABIC = ...
    ARMENIAN = ...
    BENGALI = ...
    BOPOMOFO = ...
    CHEROKEE = ...
    COPTIC = ...
    CYRILLIC = ...
    DESERET = ...
    DEVANAGARI = ...
    ETHIOPIC = ...
    GEORGIAN = ...
    GOTHIC = ...
    GREEK = ...
    GUJARATI = ...
    GURMUKHI = ...
    HAN = ...
    HANGUL = ...
    HEBREW = ...
    HIRAGANA = ...
    KANNADA = ...
    KATAKANA = ...
    KHMER = ...
    LAO = ...
    LATIN = ...
    MALAYALAM = ...
    MONGOLIAN = ...
    MYANMAR = ...
    OGHAM = ...
    OLD_ITALIC = ...
    ORIYA = ...
    RUNIC = ...
    SINHALA = ...
    SYRIAC = ...
    TAMIL = ...
    TELUGU = ...
    THAANA = ...
    THAI = ...
    TIBETAN = ...
    CANADIAN_ABORIGINAL = ...
    YI = ...
    TAGALOG = ...
    HANUNOO = ...
    BUHID = ...
    TAGBANWA = ...
    BRAILLE = ...
    CYPRIOT = ...
    LIMBU = ...
    OSMANYA = ...
    SHAVIAN = ...
    LINEAR_B = ...
    TAI_LE = ...
    UGARITIC = ...
    NEW_TAI_LUE = ...
    BUGINESE = ...
    GLAGOLITIC = ...
    TIFINAGH = ...
    SYLOTI_NAGRI = ...
    OLD_PERSIAN = ...
    KHAROSHTHI = ...
    UNKNOWN = ...
    BALINESE = ...
    CUNEIFORM = ...
    PHOENICIAN = ...
    PHAGS_PA = ...
    NKO = ...
    KAYAH_LI = ...
    LEPCHA = ...
    REJANG = ...
    SUNDANESE = ...
    SAURASHTRA = ...
    CHAM = ...
    OL_CHIKI = ...
    VAI = ...
    CARIAN = ...
    LYCIAN = ...
    LYDIAN = ...
    AVESTAN = ...
    BAMUM = ...
    EGYPTIAN_HIEROGLYPHS = ...
    IMPERIAL_ARAMAIC = ...
    INSCRIPTIONAL_PAHLAVI = ...
    INSCRIPTIONAL_PARTHIAN = ...
    JAVANESE = ...
    KAITHI = ...
    LISU = ...
    MEETEI_MAYEK = ...
    OLD_SOUTH_ARABIAN = ...
    OLD_TURKIC = ...
    SAMARITAN = ...
    TAI_THAM = ...
    TAI_VIET = ...
    BATAK = ...
    BRAHMI = ...
    MANDAIC = ...
    CHAKMA = ...
    MEROITIC_CURSIVE = ...
    MEROITIC_HIEROGLYPHS = ...
    MIAO = ...
    SHARADA = ...
    SORA_SOMPENG = ...
    TAKRI = ...
    BASSA_VAH = ...
    CAUCASIAN_ALBANIAN = ...
    DUPLOYAN = ...
    ELBASAN = ...
    GRANTHA = ...
    KHOJKI = ...
    KHUDAWADI = ...
    LINEAR_A = ...
    MAHAJANI = ...
    MANICHAEAN = ...
    MENDE_KIKAKUI = ...
    MODI = ...
    MRO = ...
    NABATAEAN = ...
    OLD_NORTH_ARABIAN = ...
    OLD_PERMIC = ...
    PAHAWH_HMONG = ...
    PALMYRENE = ...
    PAU_CIN_HAU = ...
    PSALTER_PAHLAVI = ...
    SIDDHAM = ...
    TIRHUTA = ...
    WARANG_CITI = ...
    AHOM = ...
    ANATOLIAN_HIEROGLYPHS = ...
    HATRAN = ...
    MULTANI = ...
    OLD_HUNGARIAN = ...
    SIGNWRITING = ...
    ADLAM = ...
    BHAIKSUKI = ...
    MARCHEN = ...
    NEWA = ...
    OSAGE = ...
    TANGUT = ...
    MASARAM_GONDI = ...
    NUSHU = ...
    SOYOMBO = ...
    ZANABAZAR_SQUARE = ...
    DOGRA = ...
    GUNJALA_GONDI = ...
    HANIFI_ROHINGYA = ...
    MAKASAR = ...
    MEDEFAIDRIN = ...
    OLD_SOGDIAN = ...
    SOGDIAN = ...
    ELYMAIC = ...
    NANDINAGARI = ...
    NYIAKENG_PUACHUE_HMONG = ...
    WANCHO = ...
    CHORASMIAN = ...
    DIVES_AKURU = ...
    KHITAN_SMALL_SCRIPT = ...
    YEZIDI = ...
    CYPRO_MINOAN = ...
    OLD_UYGHUR = ...
    TANGSA = ...
    TOTO = ...
    VITHKUQI = ...
    MATH = ...

class UnicodeType(GObject.GEnum): 
    CONTROL = ...
    FORMAT = ...
    UNASSIGNED = ...
    PRIVATE_USE = ...
    SURROGATE = ...
    LOWERCASE_LETTER = ...
    MODIFIER_LETTER = ...
    OTHER_LETTER = ...
    TITLECASE_LETTER = ...
    UPPERCASE_LETTER = ...
    SPACING_MARK = ...
    ENCLOSING_MARK = ...
    NON_SPACING_MARK = ...
    DECIMAL_NUMBER = ...
    LETTER_NUMBER = ...
    OTHER_NUMBER = ...
    CONNECT_PUNCTUATION = ...
    DASH_PUNCTUATION = ...
    CLOSE_PUNCTUATION = ...
    FINAL_PUNCTUATION = ...
    INITIAL_PUNCTUATION = ...
    OTHER_PUNCTUATION = ...
    OPEN_PUNCTUATION = ...
    CURRENCY_SYMBOL = ...
    MODIFIER_SYMBOL = ...
    MATH_SYMBOL = ...
    OTHER_SYMBOL = ...
    LINE_SEPARATOR = ...
    PARAGRAPH_SEPARATOR = ...
    SPACE_SEPARATOR = ...

class UriError(GObject.GEnum): 
    FAILED = ...
    BAD_SCHEME = ...
    BAD_USER = ...
    BAD_PASSWORD = ...
    BAD_AUTH_PARAMS = ...
    BAD_HOST = ...
    BAD_PORT = ...
    BAD_PATH = ...
    BAD_QUERY = ...
    BAD_FRAGMENT = ...

class UserDirectory(GObject.GEnum): 
    DIRECTORY_DESKTOP = ...
    DIRECTORY_DOCUMENTS = ...
    DIRECTORY_DOWNLOAD = ...
    DIRECTORY_MUSIC = ...
    DIRECTORY_PICTURES = ...
    DIRECTORY_PUBLIC_SHARE = ...
    DIRECTORY_TEMPLATES = ...
    DIRECTORY_VIDEOS = ...
    N_DIRECTORIES = ...

class VariantClass(GObject.GEnum): 
    BOOLEAN = ...
    BYTE = ...
    INT16 = ...
    UINT16 = ...
    INT32 = ...
    UINT32 = ...
    INT64 = ...
    UINT64 = ...
    HANDLE = ...
    DOUBLE = ...
    STRING = ...
    OBJECT_PATH = ...
    SIGNATURE = ...
    VARIANT = ...
    MAYBE = ...
    ARRAY = ...
    TUPLE = ...
    DICT_ENTRY = ...

class VariantParseError(GObject.GEnum): 
    FAILED = ...
    BASIC_TYPE_EXPECTED = ...
    CANNOT_INFER_TYPE = ...
    DEFINITE_TYPE_EXPECTED = ...
    INPUT_NOT_AT_END = ...
    INVALID_CHARACTER = ...
    INVALID_FORMAT_STRING = ...
    INVALID_OBJECT_PATH = ...
    INVALID_SIGNATURE = ...
    INVALID_TYPE_STRING = ...
    NO_COMMON_TYPE = ...
    NUMBER_OUT_OF_RANGE = ...
    NUMBER_TOO_BIG = ...
    TYPE_ERROR = ...
    UNEXPECTED_TOKEN = ...
    UNKNOWN_KEYWORD = ...
    UNTERMINATED_STRING_CONSTANT = ...
    VALUE_EXPECTED = ...
    RECURSION = ...

