from gi.repository import DBus, GLib, DBus, GLib, GObject

COMPONENTLAYER_COUNT: int
COORD_TYPE_COUNT: int
DBUS_INTERFACE_ACCESSIBLE: str
DBUS_INTERFACE_ACTION: str
DBUS_INTERFACE_APPLICATION: str
DBUS_INTERFACE_CACHE: str
DBUS_INTERFACE_COLLECTION: str
DBUS_INTERFACE_COMPONENT: str
DBUS_INTERFACE_DEC: str
DBUS_INTERFACE_DEVICE_EVENT_LISTENER: str
DBUS_INTERFACE_DOCUMENT: str
DBUS_INTERFACE_EDITABLE_TEXT: str
DBUS_INTERFACE_EVENT_KEYBOARD: str
DBUS_INTERFACE_EVENT_MOUSE: str
DBUS_INTERFACE_EVENT_OBJECT: str
DBUS_INTERFACE_EVENT_SCREEN_READER: str
DBUS_INTERFACE_HYPERLINK: str
DBUS_INTERFACE_HYPERTEXT: str
DBUS_INTERFACE_IMAGE: str
DBUS_INTERFACE_REGISTRY: str
DBUS_INTERFACE_SELECTION: str
DBUS_INTERFACE_SOCKET: str
DBUS_INTERFACE_TABLE: str
DBUS_INTERFACE_TABLE_CELL: str
DBUS_INTERFACE_TEXT: str
DBUS_INTERFACE_VALUE: str
DBUS_NAME_REGISTRY: str
DBUS_PATH_DEC: str
DBUS_PATH_NULL: str
DBUS_PATH_REGISTRY: str
DBUS_PATH_ROOT: str
DBUS_PATH_SCREEN_READER: str
EVENTTYPE_COUNT: int
KEYEVENTTYPE_COUNT: int
KEYSYNTHTYPE_COUNT: int
LOCALE_TYPE_COUNT: int
MATCHTYPES_COUNT: int
MODIFIERTYPE_COUNT: int
RELATIONTYPE_COUNT: int
ROLE_COUNT: int
SCROLLTYPE_COUNT: int
SORTORDER_COUNT: int
STATETYPE_COUNT: int
TEXT_BOUNDARY_TYPE_COUNT: int
TEXT_CLIP_TYPE_COUNT: int
TREETRAVERSALTYPE_COUNT: int

def dbus_connection_setup_with_g_main(connection: DBus.Connection, context: GLib.MainContext) -> None: ...
def deregister_device_event_listener(listener: DeviceListener, filter: object | None) -> bool: ...
def deregister_keystroke_listener(listener: DeviceListener, key_set: list[KeyDefinition] | None, modmask: KeyMaskType, event_types: KeyEventMask) -> bool: ...
def event_main() -> None: ...
def event_quit() -> None: ...
def exit() -> int: ...
def generate_keyboard_event(keyval: int, keystring: str | None, synth_type: KeySynthType) -> bool: ...
def generate_mouse_event(x: int, y: int, name: str) -> bool: ...
def get_a11y_bus() -> DBus.Connection: ...
def get_desktop(i: int) -> Accessible: ...
def get_desktop_count() -> int: ...
def get_desktop_list() -> list[Accessible]: ...
def init() -> int: ...
def is_initialized() -> bool: ...
def register_device_event_listener(listener: DeviceListener, event_types: DeviceEventMask, filter: object | None) -> bool: ...
def register_keystroke_listener(listener: DeviceListener, key_set: list[KeyDefinition] | None, modmask: KeyMaskType, event_types: KeyEventMask, sync_type: KeyListenerSyncType) -> bool: ...
def role_get_name(role: Role) -> str: ...
def set_main_context(cnx: GLib.MainContext) -> None: ...
def set_reference_window(accessible: Accessible) -> None: ...
def set_timeout(val: int, startup_time: int) -> None: ...

class Accessible(Object, Action, Collection, Component, Document, EditableText, Hypertext, Image, Selection, Table, TableCell, Text, Value): 
    def clear_cache(self) -> None: ...
    def get_accessible_id(self) -> str: ...
    def get_action(self) -> Action: ...
    def get_action_iface(self) -> Action: ...
    def get_application(self) -> Accessible: ...
    def get_atspi_version(self) -> str: ...
    def get_attributes(self) -> GLib.HashTable: ...
    def get_attributes_as_array(self) -> list[str]: ...
    def get_child_at_index(self, child_index: int) -> Accessible: ...
    def get_child_count(self) -> int: ...
    def get_collection(self) -> Collection: ...
    def get_collection_iface(self) -> Collection: ...
    def get_component(self) -> Component: ...
    def get_component_iface(self) -> Component: ...
    def get_description(self) -> str: ...
    def get_document(self) -> Document: ...
    def get_document_iface(self) -> Document: ...
    def get_editable_text(self) -> EditableText: ...
    def get_editable_text_iface(self) -> EditableText: ...
    def get_hyperlink(self) -> Hyperlink: ...
    def get_hypertext(self) -> Hypertext: ...
    def get_hypertext_iface(self) -> Hypertext: ...
    def get_id(self) -> int: ...
    def get_image(self) -> Image: ...
    def get_image_iface(self) -> Image: ...
    def get_index_in_parent(self) -> int: ...
    def get_interfaces(self) -> list[str]: ...
    def get_localized_role_name(self) -> str: ...
    def get_name(self) -> str: ...
    def get_object_locale(self) -> str: ...
    def get_parent(self) -> Accessible | None: ...
    def get_process_id(self) -> int: ...
    def get_relation_set(self) -> list[Relation]: ...
    def get_role(self) -> Role: ...
    def get_role_name(self) -> str: ...
    def get_selection(self) -> Selection: ...
    def get_selection_iface(self) -> Selection: ...
    def get_state_set(self) -> StateSet: ...
    def get_table(self) -> Table: ...
    def get_table_cell(self) -> TableCell: ...
    def get_table_iface(self) -> Table: ...
    def get_text(self) -> Text: ...
    def get_text_iface(self) -> Text: ...
    def get_toolkit_name(self) -> str: ...
    def get_toolkit_version(self) -> str: ...
    def get_value(self) -> Value: ...
    def get_value_iface(self) -> Value: ...
    def set_cache_mask(self, mask: Cache) -> None: ...

class Application(GObject.Object): ...

class Device(GObject.Object): 
    @classmethod
    def new(cls) -> Device: ...
    def add_key_grab(self, kd: KeyDefinition, callback: KeyCallback | None, user_data: object | None, callback_destroyed: GLib.DestroyNotify) -> int: ...
    def add_key_watcher(self, callback: KeyCallback | None, user_data: object | None, callback_destroyed: GLib.DestroyNotify) -> None: ...
    def get_grab_by_id(self, id: int) -> KeyDefinition: ...
    def get_locked_modifiers(self) -> int: ...
    def get_modifier(self, keycode: int) -> int: ...
    def grab_keyboard(self) -> bool: ...
    def map_modifier(self, keycode: int) -> int: ...
    def notify_key(self, pressed: bool, keycode: int, keysym: int, state: int, text: str) -> bool: ...
    def remove_key_grab(self, id: int) -> None: ...
    def ungrab_keyboard(self) -> None: ...
    def unmap_modifier(self, keycode: int) -> None: ...

class DeviceLegacy(Device): 
    @classmethod
    def new(cls) -> DeviceLegacy: ...

class DeviceListener(GObject.Object): 
    @classmethod
    def new(cls, callback: DeviceListenerCB, user_data: object | None, callback_destroyed: GLib.DestroyNotify) -> DeviceListener: ...
    def add_callback(self, callback: DeviceListenerCB, callback_destroyed: GLib.DestroyNotify, user_data: object | None) -> None: ...
    def remove_callback(self, callback: DeviceListenerCB) -> None: ...

class DeviceX11(Device): 
    @classmethod
    def new(cls) -> DeviceX11: ...

class EventListener(GObject.Object): 
    @classmethod
    def new(cls, callback: EventListenerCB, user_data: object | None, callback_destroyed: GLib.DestroyNotify) -> EventListener: ...
    @classmethod
    def deregister_from_callback(cls, callback: EventListenerCB, user_data: object | None, event_type: str) -> bool: ...
    @classmethod
    def deregister_no_data(cls, callback: EventListenerSimpleCB, event_type: str) -> bool: ...
    @classmethod
    def register_from_callback(cls, callback: EventListenerCB, user_data: object | None, callback_destroyed: GLib.DestroyNotify, event_type: str) -> bool: ...
    @classmethod
    def register_from_callback_full(cls, callback: EventListenerCB | None, user_data: object | None, callback_destroyed: GLib.DestroyNotify, event_type: str, properties: list[str]) -> bool: ...
    @classmethod
    def register_no_data(cls, callback: EventListenerSimpleCB, callback_destroyed: GLib.DestroyNotify, event_type: str) -> bool: ...
    def deregister(self, event_type: str) -> bool: ...
    def register(self, event_type: str) -> bool: ...
    def register_full(self, event_type: str, properties: list[str] | None) -> bool: ...

class Hyperlink(Object): 
    def get_end_index(self) -> int: ...
    def get_index_range(self) -> Range: ...
    def get_n_anchors(self) -> int: ...
    def get_object(self, i: int) -> Accessible: ...
    def get_start_index(self) -> int: ...
    def get_uri(self, i: int) -> str: ...
    def is_valid(self) -> bool: ...

class MatchRule(GObject.Object): 
    @classmethod
    def new(cls, states: StateSet, statematchtype: CollectionMatchType, attributes: GLib.HashTable, attributematchtype: CollectionMatchType, roles: list[Role], rolematchtype: CollectionMatchType, interfaces: list[str], interfacematchtype: CollectionMatchType, invert: bool) -> MatchRule: ...

class Object(GObject.Object): ...

class Relation(GObject.Object): 
    def get_n_targets(self) -> int: ...
    def get_relation_type(self) -> RelationType: ...
    def get_target(self, i: int) -> Accessible: ...

class StateSet(GObject.Object): 
    @classmethod
    def new(cls, states: list[StateType]) -> StateSet: ...
    def add(self, state: StateType) -> None: ...
    def compare(self, set2: StateSet) -> StateSet: ...
    def contains(self, state: StateType) -> bool: ...
    def equals(self, set2: StateSet) -> bool: ...
    def get_states(self) -> list[StateType]: ...
    def is_empty(self) -> bool: ...
    def remove(self, state: StateType) -> None: ...
    def set_by_name(self, name: str, enabled: bool) -> None: ...

class Action: 
    def do_action(self, i: int) -> bool: ...
    def get_action_description(self, i: int) -> str: ...
    def get_action_name(self, i: int) -> str: ...
    def get_description(self, i: int) -> str: ...
    def get_key_binding(self, i: int) -> str: ...
    def get_localized_name(self, i: int) -> str: ...
    def get_n_actions(self) -> int: ...
    def get_name(self, i: int) -> str: ...
class Collection: 
    def get_active_descendant(self) -> Accessible: ...
    def get_matches(self, rule: MatchRule, sortby: CollectionSortOrder, count: int, traverse: bool) -> list[Accessible]: ...
    def get_matches_from(self, current_object: Accessible, rule: MatchRule, sortby: CollectionSortOrder, tree: CollectionTreeTraversalType, count: int, traverse: bool) -> list[Accessible]: ...
    def get_matches_to(self, current_object: Accessible, rule: MatchRule, sortby: CollectionSortOrder, tree: CollectionTreeTraversalType, limit_scope: bool, count: int, traverse: bool) -> list[Accessible]: ...
    def is_ancestor_of(self, test: Accessible) -> bool: ...
class Component: 
    def contains(self, x: int, y: int, ctype: CoordType) -> bool: ...
    def get_accessible_at_point(self, x: int, y: int, ctype: CoordType) -> Accessible | None: ...
    def get_alpha(self) -> float: ...
    def get_extents(self, ctype: CoordType) -> Rect: ...
    def get_layer(self) -> ComponentLayer: ...
    def get_mdi_z_order(self) -> gshort: ...
    def get_position(self, ctype: CoordType) -> Point: ...
    def get_size(self) -> Point: ...
    def grab_focus(self) -> bool: ...
    def scroll_to(self, type: ScrollType) -> bool: ...
    def scroll_to_point(self, coords: CoordType, x: int, y: int) -> bool: ...
    def set_extents(self, x: int, y: int, width: int, height: int, ctype: CoordType) -> bool: ...
    def set_position(self, x: int, y: int, ctype: CoordType) -> bool: ...
    def set_size(self, width: int, height: int) -> bool: ...
class Document: 
    def get_attribute_value(self, attribute: str) -> str: ...
    def get_attributes(self) -> GLib.HashTable: ...
    def get_current_page_number(self) -> int: ...
    def get_document_attribute_value(self, attribute: str) -> str: ...
    def get_document_attributes(self) -> GLib.HashTable: ...
    def get_locale(self) -> str: ...
    def get_page_count(self) -> int: ...
class EditableText: 
    def copy_text(self, start_pos: int, end_pos: int) -> bool: ...
    def cut_text(self, start_pos: int, end_pos: int) -> bool: ...
    def delete_text(self, start_pos: int, end_pos: int) -> bool: ...
    def insert_text(self, position: int, text: str, length: int) -> bool: ...
    def paste_text(self, position: int) -> bool: ...
    def set_text_contents(self, new_contents: str) -> bool: ...
class Hypertext: 
    def get_link(self, link_index: int) -> Hyperlink | None: ...
    def get_link_index(self, character_offset: int) -> int: ...
    def get_n_links(self) -> int: ...
class Image: 
    def get_image_description(self) -> str: ...
    def get_image_extents(self, ctype: CoordType) -> Rect: ...
    def get_image_locale(self) -> str: ...
    def get_image_position(self, ctype: CoordType) -> Point: ...
    def get_image_size(self) -> Point: ...
class Selection: 
    def clear_selection(self) -> bool: ...
    def deselect_child(self, child_index: int) -> bool: ...
    def deselect_selected_child(self, selected_child_index: int) -> bool: ...
    def get_n_selected_children(self) -> int: ...
    def get_selected_child(self, selected_child_index: int) -> Accessible: ...
    def is_child_selected(self, child_index: int) -> bool: ...
    def select_all(self) -> bool: ...
    def select_child(self, child_index: int) -> bool: ...
class Table: 
    def add_column_selection(self, column: int) -> bool: ...
    def add_row_selection(self, row: int) -> bool: ...
    def get_accessible_at(self, row: int, column: int) -> Accessible: ...
    def get_caption(self) -> Accessible: ...
    def get_column_at_index(self, index: int) -> int: ...
    def get_column_description(self, column: int) -> str: ...
    def get_column_extent_at(self, row: int, column: int) -> int: ...
    def get_column_header(self, column: int) -> Accessible: ...
    def get_index_at(self, row: int, column: int) -> int: ...
    def get_n_columns(self) -> int: ...
    def get_n_rows(self) -> int: ...
    def get_n_selected_columns(self) -> int: ...
    def get_n_selected_rows(self) -> int: ...
    def get_row_at_index(self, index: int) -> int: ...
    def get_row_column_extents_at_index(self, index: int, row: int, col: int, row_extents: int, col_extents: int, is_selected: bool) -> bool: ...
    def get_row_description(self, row: int) -> str: ...
    def get_row_extent_at(self, row: int, column: int) -> int: ...
    def get_row_header(self, row: int) -> Accessible: ...
    def get_selected_columns(self) -> list[int]: ...
    def get_selected_rows(self) -> list[int]: ...
    def get_summary(self) -> Accessible: ...
    def is_column_selected(self, column: int) -> bool: ...
    def is_row_selected(self, row: int) -> bool: ...
    def is_selected(self, row: int, column: int) -> bool: ...
    def remove_column_selection(self, column: int) -> bool: ...
    def remove_row_selection(self, row: int) -> bool: ...
class TableCell: 
    def get_column_header_cells(self) -> list[Accessible]: ...
    def get_column_index(self) -> int: ...
    def get_column_span(self) -> int: ...
    def get_position(self, row: int, column: int) -> int: ...
    def get_row_column_span(self, row: int, column: int, row_span: int, column_span: int) -> None: ...
    def get_row_header_cells(self) -> list[Accessible]: ...
    def get_row_span(self) -> int: ...
    def get_table(self) -> Accessible: ...
class Text: 
    def add_selection(self, start_offset: int, end_offset: int) -> bool: ...
    def get_attribute_run(self, offset: int, include_defaults: bool, start_offset: int, end_offset: int) -> GLib.HashTable: ...
    def get_attribute_value(self, offset: int, attribute_name: str) -> str | None: ...
    def get_attributes(self, offset: int, start_offset: int, end_offset: int) -> GLib.HashTable: ...
    def get_bounded_ranges(self, x: int, y: int, width: int, height: int, type: CoordType, clipTypeX: TextClipType, clipTypeY: TextClipType) -> list[TextRange]: ...
    def get_caret_offset(self) -> int: ...
    def get_character_at_offset(self, offset: int) -> int: ...
    def get_character_count(self) -> int: ...
    def get_character_extents(self, offset: int, type: CoordType) -> Rect: ...
    def get_default_attributes(self) -> GLib.HashTable: ...
    def get_n_selections(self) -> int: ...
    def get_offset_at_point(self, x: int, y: int, type: CoordType) -> int: ...
    def get_range_extents(self, start_offset: int, end_offset: int, type: CoordType) -> Rect: ...
    def get_selection(self, selection_num: int) -> Range: ...
    def get_string_at_offset(self, offset: int, granularity: TextGranularity) -> TextRange: ...
    def get_text(self, start_offset: int, end_offset: int) -> str: ...
    def get_text_after_offset(self, offset: int, type: TextBoundaryType) -> TextRange: ...
    def get_text_at_offset(self, offset: int, type: TextBoundaryType) -> TextRange: ...
    def get_text_attribute_value(self, offset: int, attribute_name: str) -> str | None: ...
    def get_text_attributes(self, offset: int, start_offset: int, end_offset: int) -> GLib.HashTable: ...
    def get_text_before_offset(self, offset: int, type: TextBoundaryType) -> TextRange: ...
    def remove_selection(self, selection_num: int) -> bool: ...
    def scroll_substring_to(self, start_offset: int, end_offset: int, type: ScrollType) -> bool: ...
    def scroll_substring_to_point(self, start_offset: int, end_offset: int, coords: CoordType, x: int, y: int) -> bool: ...
    def set_caret_offset(self, new_offset: int) -> bool: ...
    def set_selection(self, selection_num: int, start_offset: int, end_offset: int) -> bool: ...
class Value: 
    def get_current_value(self) -> float: ...
    def get_maximum_value(self) -> float: ...
    def get_minimum_increment(self) -> float: ...
    def get_minimum_value(self) -> float: ...
    def set_current_value(self, new_value: float) -> bool: ...

class Cache(GObject.GFlag): 
    NONE = ...
    PARENT = ...
    CHILDREN = ...
    NAME = ...
    DESCRIPTION = ...
    STATES = ...
    ROLE = ...
    INTERFACES = ...
    ATTRIBUTES = ...
    ALL = ...
    DEFAULT = ...
    UNDEFINED = ...

class KeyListenerSyncType(GObject.GFlag): 
    NOSYNC = ...
    SYNCHRONOUS = ...
    CANCONSUME = ...
    ALL_WINDOWS = ...

class CollectionMatchType(GObject.GEnum): 
    INVALID = ...
    ALL = ...
    ANY = ...
    NONE = ...
    EMPTY = ...
    LAST_DEFINED = ...

class CollectionSortOrder(GObject.GEnum): 
    INVALID = ...
    CANONICAL = ...
    FLOW = ...
    TAB = ...
    REVERSE_CANONICAL = ...
    REVERSE_FLOW = ...
    REVERSE_TAB = ...
    LAST_DEFINED = ...

class CollectionTreeTraversalType(GObject.GEnum): 
    RESTRICT_CHILDREN = ...
    RESTRICT_SIBLING = ...
    INORDER = ...
    LAST_DEFINED = ...

class ComponentLayer(GObject.GEnum): 
    INVALID = ...
    BACKGROUND = ...
    CANVAS = ...
    WIDGET = ...
    MDI = ...
    POPUP = ...
    OVERLAY = ...
    WINDOW = ...
    LAST_DEFINED = ...

class CoordType(GObject.GEnum): 
    SCREEN = ...
    WINDOW = ...
    PARENT = ...

class EventType(GObject.GEnum): 
    KEY_PRESSED_EVENT = ...
    KEY_RELEASED_EVENT = ...
    BUTTON_PRESSED_EVENT = ...
    BUTTON_RELEASED_EVENT = ...

class KeyEventType(GObject.GEnum): 
    PRESSED = ...
    RELEASED = ...

class KeySynthType(GObject.GEnum): 
    PRESS = ...
    RELEASE = ...
    PRESSRELEASE = ...
    SYM = ...
    STRING = ...
    LOCKMODIFIERS = ...
    UNLOCKMODIFIERS = ...

class LocaleType(GObject.GEnum): 
    MESSAGES = ...
    COLLATE = ...
    CTYPE = ...
    MONETARY = ...
    NUMERIC = ...
    TIME = ...

class ModifierType(GObject.GEnum): 
    SHIFT = ...
    SHIFTLOCK = ...
    CONTROL = ...
    ALT = ...
    META = ...
    META2 = ...
    META3 = ...
    NUMLOCK = ...

class RelationType(GObject.GEnum): 
    NULL = ...
    LABEL_FOR = ...
    LABELLED_BY = ...
    CONTROLLER_FOR = ...
    CONTROLLED_BY = ...
    MEMBER_OF = ...
    TOOLTIP_FOR = ...
    NODE_CHILD_OF = ...
    NODE_PARENT_OF = ...
    EXTENDED = ...
    FLOWS_TO = ...
    FLOWS_FROM = ...
    SUBWINDOW_OF = ...
    EMBEDS = ...
    EMBEDDED_BY = ...
    POPUP_FOR = ...
    PARENT_WINDOW_OF = ...
    DESCRIPTION_FOR = ...
    DESCRIBED_BY = ...
    DETAILS = ...
    DETAILS_FOR = ...
    ERROR_MESSAGE = ...
    ERROR_FOR = ...
    LAST_DEFINED = ...

class Role(GObject.GEnum): 
    INVALID = ...
    ACCELERATOR_LABEL = ...
    ALERT = ...
    ANIMATION = ...
    ARROW = ...
    CALENDAR = ...
    CANVAS = ...
    CHECK_BOX = ...
    CHECK_MENU_ITEM = ...
    COLOR_CHOOSER = ...
    COLUMN_HEADER = ...
    COMBO_BOX = ...
    DATE_EDITOR = ...
    DESKTOP_ICON = ...
    DESKTOP_FRAME = ...
    DIAL = ...
    DIALOG = ...
    DIRECTORY_PANE = ...
    DRAWING_AREA = ...
    FILE_CHOOSER = ...
    FILLER = ...
    FOCUS_TRAVERSABLE = ...
    FONT_CHOOSER = ...
    FRAME = ...
    GLASS_PANE = ...
    HTML_CONTAINER = ...
    ICON = ...
    IMAGE = ...
    INTERNAL_FRAME = ...
    LABEL = ...
    LAYERED_PANE = ...
    LIST = ...
    LIST_ITEM = ...
    MENU = ...
    MENU_BAR = ...
    MENU_ITEM = ...
    OPTION_PANE = ...
    PAGE_TAB = ...
    PAGE_TAB_LIST = ...
    PANEL = ...
    PASSWORD_TEXT = ...
    POPUP_MENU = ...
    PROGRESS_BAR = ...
    PUSH_BUTTON = ...
    RADIO_BUTTON = ...
    RADIO_MENU_ITEM = ...
    ROOT_PANE = ...
    ROW_HEADER = ...
    SCROLL_BAR = ...
    SCROLL_PANE = ...
    SEPARATOR = ...
    SLIDER = ...
    SPIN_BUTTON = ...
    SPLIT_PANE = ...
    STATUS_BAR = ...
    TABLE = ...
    TABLE_CELL = ...
    TABLE_COLUMN_HEADER = ...
    TABLE_ROW_HEADER = ...
    TEAROFF_MENU_ITEM = ...
    TERMINAL = ...
    TEXT = ...
    TOGGLE_BUTTON = ...
    TOOL_BAR = ...
    TOOL_TIP = ...
    TREE = ...
    TREE_TABLE = ...
    UNKNOWN = ...
    VIEWPORT = ...
    WINDOW = ...
    EXTENDED = ...
    HEADER = ...
    FOOTER = ...
    PARAGRAPH = ...
    RULER = ...
    APPLICATION = ...
    AUTOCOMPLETE = ...
    EDITBAR = ...
    EMBEDDED = ...
    ENTRY = ...
    CHART = ...
    CAPTION = ...
    DOCUMENT_FRAME = ...
    HEADING = ...
    PAGE = ...
    SECTION = ...
    REDUNDANT_OBJECT = ...
    FORM = ...
    LINK = ...
    INPUT_METHOD_WINDOW = ...
    TABLE_ROW = ...
    TREE_ITEM = ...
    DOCUMENT_SPREADSHEET = ...
    DOCUMENT_PRESENTATION = ...
    DOCUMENT_TEXT = ...
    DOCUMENT_WEB = ...
    DOCUMENT_EMAIL = ...
    COMMENT = ...
    LIST_BOX = ...
    GROUPING = ...
    IMAGE_MAP = ...
    NOTIFICATION = ...
    INFO_BAR = ...
    LEVEL_BAR = ...
    TITLE_BAR = ...
    BLOCK_QUOTE = ...
    AUDIO = ...
    VIDEO = ...
    DEFINITION = ...
    ARTICLE = ...
    LANDMARK = ...
    LOG = ...
    MARQUEE = ...
    MATH = ...
    RATING = ...
    TIMER = ...
    STATIC = ...
    MATH_FRACTION = ...
    MATH_ROOT = ...
    SUBSCRIPT = ...
    SUPERSCRIPT = ...
    DESCRIPTION_LIST = ...
    DESCRIPTION_TERM = ...
    DESCRIPTION_VALUE = ...
    FOOTNOTE = ...
    CONTENT_DELETION = ...
    CONTENT_INSERTION = ...
    MARK = ...
    SUGGESTION = ...
    LAST_DEFINED = ...

class ScrollType(GObject.GEnum): 
    TOP_LEFT = ...
    BOTTOM_RIGHT = ...
    TOP_EDGE = ...
    BOTTOM_EDGE = ...
    LEFT_EDGE = ...
    RIGHT_EDGE = ...
    ANYWHERE = ...

class StateType(GObject.GEnum): 
    INVALID = ...
    ACTIVE = ...
    ARMED = ...
    BUSY = ...
    CHECKED = ...
    COLLAPSED = ...
    DEFUNCT = ...
    EDITABLE = ...
    ENABLED = ...
    EXPANDABLE = ...
    EXPANDED = ...
    FOCUSABLE = ...
    FOCUSED = ...
    HAS_TOOLTIP = ...
    HORIZONTAL = ...
    ICONIFIED = ...
    MODAL = ...
    MULTI_LINE = ...
    MULTISELECTABLE = ...
    OPAQUE = ...
    PRESSED = ...
    RESIZABLE = ...
    SELECTABLE = ...
    SELECTED = ...
    SENSITIVE = ...
    SHOWING = ...
    SINGLE_LINE = ...
    STALE = ...
    TRANSIENT = ...
    VERTICAL = ...
    VISIBLE = ...
    MANAGES_DESCENDANTS = ...
    INDETERMINATE = ...
    REQUIRED = ...
    TRUNCATED = ...
    ANIMATED = ...
    INVALID_ENTRY = ...
    SUPPORTS_AUTOCOMPLETION = ...
    SELECTABLE_TEXT = ...
    IS_DEFAULT = ...
    VISITED = ...
    CHECKABLE = ...
    HAS_POPUP = ...
    READ_ONLY = ...
    LAST_DEFINED = ...

class TextBoundaryType(GObject.GEnum): 
    CHAR = ...
    WORD_START = ...
    WORD_END = ...
    SENTENCE_START = ...
    SENTENCE_END = ...
    LINE_START = ...
    LINE_END = ...

class TextClipType(GObject.GEnum): 
    NONE = ...
    MIN = ...
    MAX = ...
    BOTH = ...

class TextGranularity(GObject.GEnum): 
    CHAR = ...
    WORD = ...
    SENTENCE = ...
    LINE = ...
    PARAGRAPH = ...

