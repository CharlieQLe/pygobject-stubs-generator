from gi.repository import GLib, GObject, Gdk, cairo, Graphene, Pango, Gdk, Graphene

def serialization_error_quark() -> GLib.Quark: ...
def transform_parse(string: str, out_transform: Transform) -> bool: ...
def value_dup_render_node(value: GObject.Value) -> RenderNode: ...
def value_get_render_node(value: GObject.Value) -> RenderNode: ...
def value_set_render_node(value: GObject.Value, node: RenderNode) -> None: ...
def value_take_render_node(value: GObject.Value, node: RenderNode) -> None: ...

class BlendNode(RenderNode): 
    @classmethod
    def new(cls, bottom: RenderNode, top: RenderNode, blend_mode: BlendMode) -> BlendNode: ...
    def get_blend_mode(self) -> BlendMode: ...
    def get_bottom_child(self) -> RenderNode: ...
    def get_top_child(self) -> RenderNode: ...

class BlurNode(RenderNode): 
    @classmethod
    def new(cls, child: RenderNode, radius: float) -> BlurNode: ...
    def get_child(self) -> RenderNode: ...
    def get_radius(self) -> float: ...

class BorderNode(RenderNode): 
    @classmethod
    def new(cls, outline: RoundedRect, border_width: list[float], border_color: list[Gdk.RGBA]) -> BorderNode: ...
    def get_colors(self) -> Gdk.RGBA: ...
    def get_outline(self) -> RoundedRect: ...
    def get_widths(self) -> list[float]: ...

class BroadwayRenderer(Renderer): 
    @classmethod
    def new(cls) -> Renderer: ...

class CairoNode(RenderNode): 
    @classmethod
    def new(cls, bounds: Graphene.Rect) -> CairoNode: ...
    def get_draw_context(self) -> cairo.Context: ...
    def get_surface(self) -> cairo.Surface: ...

class CairoRenderer(Renderer): 
    @classmethod
    def new(cls) -> Renderer: ...

class ClipNode(RenderNode): 
    @classmethod
    def new(cls, child: RenderNode, clip: Graphene.Rect) -> ClipNode: ...
    def get_child(self) -> RenderNode: ...
    def get_clip(self) -> Graphene.Rect: ...

class ColorMatrixNode(RenderNode): 
    @classmethod
    def new(cls, child: RenderNode, color_matrix: Graphene.Matrix, color_offset: Graphene.Vec4) -> ColorMatrixNode: ...
    def get_child(self) -> RenderNode: ...
    def get_color_matrix(self) -> Graphene.Matrix: ...
    def get_color_offset(self) -> Graphene.Vec4: ...

class ColorNode(RenderNode): 
    @classmethod
    def new(cls, rgba: Gdk.RGBA, bounds: Graphene.Rect) -> ColorNode: ...
    def get_color(self) -> Gdk.RGBA: ...

class ConicGradientNode(RenderNode): 
    @classmethod
    def new(cls, bounds: Graphene.Rect, center: Graphene.Point, rotation: float, color_stops: list[ColorStop], n_color_stops: gsize) -> ConicGradientNode: ...
    def get_angle(self) -> float: ...
    def get_center(self) -> Graphene.Point: ...
    def get_color_stops(self, n_stops: gsize) -> list[ColorStop]: ...
    def get_n_color_stops(self) -> gsize: ...
    def get_rotation(self) -> float: ...

class ContainerNode(RenderNode): 
    @classmethod
    def new(cls, children: list[RenderNode], n_children: int) -> ContainerNode: ...
    def get_child(self, idx: int) -> RenderNode: ...
    def get_n_children(self) -> int: ...

class CrossFadeNode(RenderNode): 
    @classmethod
    def new(cls, start: RenderNode, end: RenderNode, progress: float) -> CrossFadeNode: ...
    def get_end_child(self) -> RenderNode: ...
    def get_progress(self) -> float: ...
    def get_start_child(self) -> RenderNode: ...

class DebugNode(RenderNode): 
    @classmethod
    def new(cls, child: RenderNode, message: str) -> DebugNode: ...
    def get_child(self) -> RenderNode: ...
    def get_message(self) -> str: ...

class GLRenderer(Renderer): 
    @classmethod
    def new(cls) -> Renderer: ...

class GLShader(GObject.Object): 
    @classmethod
    def new_from_bytes(cls, sourcecode: GLib.Bytes) -> GLShader: ...
    def compile(self, renderer: Renderer) -> bool: ...
    def find_uniform_by_name(self, name: str) -> int: ...
    def format_args(self) -> GLib.Bytes: ...
    def format_args_va(self, uniforms: va_list) -> GLib.Bytes: ...
    def get_arg_bool(self, args: GLib.Bytes, idx: int) -> bool: ...
    def get_arg_float(self, args: GLib.Bytes, idx: int) -> float: ...
    def get_arg_int(self, args: GLib.Bytes, idx: int) -> int: ...
    def get_arg_uint(self, args: GLib.Bytes, idx: int) -> int: ...
    def get_arg_vec2(self, args: GLib.Bytes, idx: int, out_value: Graphene.Vec2) -> None: ...
    def get_arg_vec3(self, args: GLib.Bytes, idx: int, out_value: Graphene.Vec3) -> None: ...
    def get_arg_vec4(self, args: GLib.Bytes, idx: int, out_value: Graphene.Vec4) -> None: ...
    def get_args_size(self) -> gsize: ...
    def get_n_textures(self) -> int: ...
    def get_n_uniforms(self) -> int: ...
    def get_resource(self) -> str: ...
    def get_source(self) -> GLib.Bytes: ...
    def get_uniform_name(self, idx: int) -> str: ...
    def get_uniform_offset(self, idx: int) -> int: ...
    def get_uniform_type(self, idx: int) -> GLUniformType: ...

class GLShaderNode(RenderNode): 
    @classmethod
    def new(cls, shader: GLShader, bounds: Graphene.Rect, args: GLib.Bytes, children: list[RenderNode], n_children: int) -> GLShaderNode: ...
    def get_args(self) -> GLib.Bytes: ...
    def get_child(self, idx: int) -> RenderNode: ...
    def get_n_children(self) -> int: ...
    def get_shader(self) -> GLShader: ...

class InsetShadowNode(RenderNode): 
    @classmethod
    def new(cls, outline: RoundedRect, color: Gdk.RGBA, dx: float, dy: float, spread: float, blur_radius: float) -> InsetShadowNode: ...
    def get_blur_radius(self) -> float: ...
    def get_color(self) -> Gdk.RGBA: ...
    def get_dx(self) -> float: ...
    def get_dy(self) -> float: ...
    def get_outline(self) -> RoundedRect: ...
    def get_spread(self) -> float: ...

class LinearGradientNode(RenderNode): 
    @classmethod
    def new(cls, bounds: Graphene.Rect, start: Graphene.Point, end: Graphene.Point, color_stops: list[ColorStop], n_color_stops: gsize) -> LinearGradientNode: ...
    def get_color_stops(self, n_stops: gsize) -> list[ColorStop]: ...
    def get_end(self) -> Graphene.Point: ...
    def get_n_color_stops(self) -> gsize: ...
    def get_start(self) -> Graphene.Point: ...

class NglRenderer(Renderer): 
    @classmethod
    def new(cls) -> Renderer: ...

class OpacityNode(RenderNode): 
    @classmethod
    def new(cls, child: RenderNode, opacity: float) -> OpacityNode: ...
    def get_child(self) -> RenderNode: ...
    def get_opacity(self) -> float: ...

class OutsetShadowNode(RenderNode): 
    @classmethod
    def new(cls, outline: RoundedRect, color: Gdk.RGBA, dx: float, dy: float, spread: float, blur_radius: float) -> OutsetShadowNode: ...
    def get_blur_radius(self) -> float: ...
    def get_color(self) -> Gdk.RGBA: ...
    def get_dx(self) -> float: ...
    def get_dy(self) -> float: ...
    def get_outline(self) -> RoundedRect: ...
    def get_spread(self) -> float: ...

class RadialGradientNode(RenderNode): 
    @classmethod
    def new(cls, bounds: Graphene.Rect, center: Graphene.Point, hradius: float, vradius: float, start: float, end: float, color_stops: list[ColorStop], n_color_stops: gsize) -> RadialGradientNode: ...
    def get_center(self) -> Graphene.Point: ...
    def get_color_stops(self, n_stops: gsize) -> list[ColorStop]: ...
    def get_end(self) -> float: ...
    def get_hradius(self) -> float: ...
    def get_n_color_stops(self) -> gsize: ...
    def get_start(self) -> float: ...
    def get_vradius(self) -> float: ...

class RenderNode: 
    @classmethod
    def deserialize(cls, bytes: GLib.Bytes, error_func: ParseErrorFunc, user_data: object) -> RenderNode: ...
    def draw(self, cr: cairo.Context) -> None: ...
    def get_bounds(self, bounds: Graphene.Rect) -> None: ...
    def get_node_type(self) -> RenderNodeType: ...
    def ref(self) -> RenderNode: ...
    def serialize(self) -> GLib.Bytes: ...
    def unref(self) -> None: ...
    def write_to_file(self, filename: filename) -> bool: ...

class Renderer(GObject.Object): 
    @classmethod
    def new_for_surface(cls, surface: Gdk.Surface) -> Renderer: ...
    def get_surface(self) -> Gdk.Surface: ...
    def is_realized(self) -> bool: ...
    def realize(self, surface: Gdk.Surface) -> bool: ...
    def render(self, root: RenderNode, region: cairo.Region) -> None: ...
    def render_texture(self, root: RenderNode, viewport: Graphene.Rect) -> Gdk.Texture: ...
    def unrealize(self) -> None: ...

class RepeatNode(RenderNode): 
    @classmethod
    def new(cls, bounds: Graphene.Rect, child: RenderNode, child_bounds: Graphene.Rect) -> RepeatNode: ...
    def get_child(self) -> RenderNode: ...
    def get_child_bounds(self) -> Graphene.Rect: ...

class RepeatingLinearGradientNode(RenderNode): 
    @classmethod
    def new(cls, bounds: Graphene.Rect, start: Graphene.Point, end: Graphene.Point, color_stops: list[ColorStop], n_color_stops: gsize) -> RepeatingLinearGradientNode: ...

class RepeatingRadialGradientNode(RenderNode): 
    @classmethod
    def new(cls, bounds: Graphene.Rect, center: Graphene.Point, hradius: float, vradius: float, start: float, end: float, color_stops: list[ColorStop], n_color_stops: gsize) -> RepeatingRadialGradientNode: ...

class RoundedClipNode(RenderNode): 
    @classmethod
    def new(cls, child: RenderNode, clip: RoundedRect) -> RoundedClipNode: ...
    def get_child(self) -> RenderNode: ...
    def get_clip(self) -> RoundedRect: ...

class ShadowNode(RenderNode): 
    @classmethod
    def new(cls, child: RenderNode, shadows: list[Shadow], n_shadows: gsize) -> ShadowNode: ...
    def get_child(self) -> RenderNode: ...
    def get_n_shadows(self) -> gsize: ...
    def get_shadow(self, i: gsize) -> Shadow: ...

class TextNode(RenderNode): 
    @classmethod
    def new(cls, font: Pango.Font, glyphs: Pango.GlyphString, color: Gdk.RGBA, offset: Graphene.Point) -> TextNode: ...
    def get_color(self) -> Gdk.RGBA: ...
    def get_font(self) -> Pango.Font: ...
    def get_glyphs(self, n_glyphs: int) -> list[Pango.GlyphInfo]: ...
    def get_num_glyphs(self) -> int: ...
    def get_offset(self) -> Graphene.Point: ...
    def has_color_glyphs(self) -> bool: ...

class TextureNode(RenderNode): 
    @classmethod
    def new(cls, texture: Gdk.Texture, bounds: Graphene.Rect) -> TextureNode: ...
    def get_texture(self) -> Gdk.Texture: ...

class TransformNode(RenderNode): 
    @classmethod
    def new(cls, child: RenderNode, transform: Transform) -> TransformNode: ...
    def get_child(self) -> RenderNode: ...
    def get_transform(self) -> Transform: ...

class BlendMode(GObject.GEnum): 
    DEFAULT = ...
    MULTIPLY = ...
    SCREEN = ...
    OVERLAY = ...
    DARKEN = ...
    LIGHTEN = ...
    COLOR_DODGE = ...
    COLOR_BURN = ...
    HARD_LIGHT = ...
    SOFT_LIGHT = ...
    DIFFERENCE = ...
    EXCLUSION = ...
    COLOR = ...
    HUE = ...
    SATURATION = ...
    LUMINOSITY = ...

class Corner(GObject.GEnum): 
    TOP_LEFT = ...
    TOP_RIGHT = ...
    BOTTOM_RIGHT = ...
    BOTTOM_LEFT = ...

class GLUniformType(GObject.GEnum): 
    NONE = ...
    FLOAT = ...
    INT = ...
    UINT = ...
    BOOL = ...
    VEC2 = ...
    VEC3 = ...
    VEC4 = ...

class RenderNodeType(GObject.GEnum): 
    NOT_A_RENDER_NODE = ...
    CONTAINER_NODE = ...
    CAIRO_NODE = ...
    COLOR_NODE = ...
    LINEAR_GRADIENT_NODE = ...
    REPEATING_LINEAR_GRADIENT_NODE = ...
    RADIAL_GRADIENT_NODE = ...
    REPEATING_RADIAL_GRADIENT_NODE = ...
    CONIC_GRADIENT_NODE = ...
    BORDER_NODE = ...
    TEXTURE_NODE = ...
    INSET_SHADOW_NODE = ...
    OUTSET_SHADOW_NODE = ...
    TRANSFORM_NODE = ...
    OPACITY_NODE = ...
    COLOR_MATRIX_NODE = ...
    REPEAT_NODE = ...
    CLIP_NODE = ...
    ROUNDED_CLIP_NODE = ...
    SHADOW_NODE = ...
    BLEND_NODE = ...
    CROSS_FADE_NODE = ...
    TEXT_NODE = ...
    BLUR_NODE = ...
    DEBUG_NODE = ...
    GL_SHADER_NODE = ...

class ScalingFilter(GObject.GEnum): 
    LINEAR = ...
    NEAREST = ...
    TRILINEAR = ...

class SerializationError(GObject.GEnum): 
    UNSUPPORTED_FORMAT = ...
    UNSUPPORTED_VERSION = ...
    INVALID_DATA = ...

class TransformCategory(GObject.GEnum): 
    UNKNOWN = ...
    ANY = ...
    3D = ...
    2D = ...
    2D_AFFINE = ...
    2D_TRANSLATE = ...
    IDENTITY = ...

