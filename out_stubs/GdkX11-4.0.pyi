from gi.repository import xlib, Gdk, Gdk, xlib, GObject

def x11_device_get_id(device: X11DeviceXI2) -> int: ...
def x11_device_manager_lookup(device_manager: X11DeviceManagerXI2, device_id: int) -> X11DeviceXI2 | None: ...
def x11_free_compound_text(ctext: int) -> None: ...
def x11_free_text_list(list: str) -> None: ...
def x11_get_server_time(surface: X11Surface) -> int: ...
def x11_get_xatom_by_name_for_display(display: X11Display, atom_name: str) -> xlib.Atom: ...
def x11_get_xatom_name_for_display(display: X11Display, xatom: xlib.Atom) -> str: ...
def x11_lookup_xdisplay(xdisplay: xlib.Display) -> X11Display: ...
def x11_set_sm_client_id(sm_client_id: str | None) -> None: ...

class X11AppLaunchContext(Gdk.AppLaunchContext): ...

class X11DeviceManagerXI2(GObject.Object): ...

class X11DeviceXI2(Gdk.Device): ...

class X11Display(Gdk.Display): 
    @classmethod
    def open(cls, display_name: str | None) -> Gdk.Display | None: ...
    @classmethod
    def set_program_class(cls, display: Gdk.Display, program_class: str) -> None: ...
    def broadcast_startup_message(self, message_type: str) -> None: ...
    def error_trap_pop(self) -> int: ...
    def error_trap_pop_ignored(self) -> None: ...
    def error_trap_push(self) -> None: ...
    def get_default_group(self) -> Gdk.Surface: ...
    def get_egl_display(self) -> object | None: ...
    def get_egl_version(self, major: int, minor: int) -> bool: ...
    def get_glx_version(self, major: int, minor: int) -> bool: ...
    def get_primary_monitor(self) -> Gdk.Monitor: ...
    def get_screen(self) -> X11Screen: ...
    def get_startup_notification_id(self) -> str: ...
    def get_user_time(self) -> int: ...
    def get_xcursor(self, cursor: Gdk.Cursor) -> xlib.Cursor: ...
    def get_xdisplay(self) -> xlib.Display: ...
    def get_xrootwindow(self) -> xlib.Window: ...
    def get_xscreen(self) -> xlib.Screen: ...
    def grab(self) -> None: ...
    def set_cursor_theme(self, theme: str | None, size: int) -> None: ...
    def set_startup_notification_id(self, startup_id: str) -> None: ...
    def set_surface_scale(self, scale: int) -> None: ...
    def string_to_compound_text(self, str: str, encoding: str, format: int, ctext: list[int], length: int) -> int: ...
    def text_property_to_text_list(self, encoding: str, format: int, text: int, length: int, list: str) -> int: ...
    def ungrab(self) -> None: ...
    def utf8_to_compound_text(self, str: str, encoding: str, format: int, ctext: list[int], length: int) -> bool: ...

class X11Drag(Gdk.Drag): ...

class X11GLContext(Gdk.GLContext): ...

class X11Monitor(Gdk.Monitor): 
    def get_output(self) -> xlib.XID: ...
    def get_workarea(self, workarea: Gdk.Rectangle) -> None: ...

class X11Screen(GObject.Object): 
    def get_current_desktop(self) -> int: ...
    def get_monitor_output(self, monitor_num: int) -> xlib.XID: ...
    def get_number_of_desktops(self) -> int: ...
    def get_screen_number(self) -> int: ...
    def get_window_manager_name(self) -> str: ...
    def get_xscreen(self) -> xlib.Screen: ...
    def supports_net_wm_hint(self, property_name: str) -> bool: ...

class X11Surface(Gdk.Surface): 
    @classmethod
    def lookup_for_display(cls, display: X11Display, window: xlib.Window) -> X11Surface: ...
    def get_desktop(self) -> int: ...
    def get_group(self) -> Gdk.Surface | None: ...
    def get_xid(self) -> xlib.Window: ...
    def move_to_current_desktop(self) -> None: ...
    def move_to_desktop(self, desktop: int) -> None: ...
    def set_frame_sync_enabled(self, frame_sync_enabled: bool) -> None: ...
    def set_group(self, leader: Gdk.Surface) -> None: ...
    def set_skip_pager_hint(self, skips_pager: bool) -> None: ...
    def set_skip_taskbar_hint(self, skips_taskbar: bool) -> None: ...
    def set_theme_variant(self, variant: str) -> None: ...
    def set_urgency_hint(self, urgent: bool) -> None: ...
    def set_user_time(self, timestamp: int) -> None: ...
    def set_utf8_property(self, name: str, value: str | None) -> None: ...

class X11DeviceType(GObject.GEnum): 
    LOGICAL = ...
    PHYSICAL = ...
    FLOATING = ...

