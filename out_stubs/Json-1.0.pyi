from gi.repository import GObject, GLib, Gio, GObject, Gio

MAJOR_VERSION: int
MICRO_VERSION: int
MINOR_VERSION: int
VERSION_S: str

def boxed_can_deserialize(gboxed_type: GObject.Type, node_type: NodeType) -> bool: ...
def boxed_can_serialize(gboxed_type: GObject.Type, node_type: NodeType) -> bool: ...
def boxed_deserialize(gboxed_type: GObject.Type, node: Node) -> object: ...
def boxed_register_deserialize_func(gboxed_type: GObject.Type, node_type: NodeType, deserialize_func: BoxedDeserializeFunc) -> None: ...
def boxed_register_serialize_func(gboxed_type: GObject.Type, node_type: NodeType, serialize_func: BoxedSerializeFunc) -> None: ...
def boxed_serialize(gboxed_type: GObject.Type, boxed: object) -> Node: ...
def construct_gobject(gtype: GObject.Type, data: str, length: gsize) -> GObject.Object: ...
def from_string(str: str) -> Node: ...
def gobject_deserialize(gtype: GObject.Type, node: Node) -> GObject.Object: ...
def gobject_from_data(gtype: GObject.Type, data: str, length: gssize) -> GObject.Object: ...
def gobject_serialize(gobject: GObject.Object) -> Node: ...
def gobject_to_data(gobject: GObject.Object, length: gsize) -> str: ...
def gvariant_deserialize(json_node: Node, signature: str) -> GLib.Variant: ...
def gvariant_deserialize_data(json: str, length: gssize, signature: str) -> GLib.Variant: ...
def gvariant_serialize(variant: GLib.Variant) -> Node: ...
def gvariant_serialize_data(variant: GLib.Variant, length: gsize) -> str: ...
def parser_error_quark() -> GLib.Quark: ...
def path_error_quark() -> GLib.Quark: ...
def reader_error_quark() -> GLib.Quark: ...
def serialize_gobject(gobject: GObject.Object, length: gsize) -> str: ...
def string_compare(a: str, b: str) -> int: ...
def string_equal(a: str, b: str) -> bool: ...
def string_hash(key: str) -> int: ...
def to_string(node: Node, pretty: bool) -> str: ...

class Builder(GObject.Object): 
    @classmethod
    def new(cls) -> Builder: ...
    def add_boolean_value(self, value: bool) -> Builder: ...
    def add_double_value(self, value: float) -> Builder: ...
    def add_int_value(self, value: int) -> Builder: ...
    def add_null_value(self) -> Builder: ...
    def add_string_value(self, value: str) -> Builder: ...
    def add_value(self, node: Node) -> Builder: ...
    def begin_array(self) -> Builder: ...
    def begin_object(self) -> Builder: ...
    def end_array(self) -> Builder: ...
    def end_object(self) -> Builder: ...
    def get_root(self) -> Node: ...
    def reset(self) -> None: ...
    def set_member_name(self, member_name: str) -> Builder: ...

class Generator(GObject.Object): 
    @classmethod
    def new(cls) -> Generator: ...
    def get_indent(self) -> int: ...
    def get_indent_char(self) -> gunichar: ...
    def get_pretty(self) -> bool: ...
    def get_root(self) -> Node: ...
    def set_indent(self, indent_level: int) -> None: ...
    def set_indent_char(self, indent_char: gunichar) -> None: ...
    def set_pretty(self, is_pretty: bool) -> None: ...
    def set_root(self, node: Node) -> None: ...
    def to_data(self, length: gsize) -> str: ...
    def to_file(self, filename: filename) -> bool: ...
    def to_gstring(self, string: GLib.String) -> GLib.String: ...
    def to_stream(self, stream: Gio.OutputStream, cancellable: Gio.Cancellable) -> bool: ...

class Parser(GObject.Object): 
    @classmethod
    def new(cls) -> Parser: ...
    def get_current_line(self) -> int: ...
    def get_current_pos(self) -> int: ...
    def get_root(self) -> Node: ...
    def has_assignment(self, variable_name: str) -> bool: ...
    def load_from_data(self, data: str, length: gssize) -> bool: ...
    def load_from_file(self, filename: filename) -> bool: ...
    def load_from_mapped_file(self, filename: filename) -> bool: ...
    def load_from_stream(self, stream: Gio.InputStream, cancellable: Gio.Cancellable) -> bool: ...
    def load_from_stream_async(self, stream: Gio.InputStream, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: object) -> None: ...
    def load_from_stream_finish(self, result: Gio.AsyncResult) -> bool: ...
    def steal_root(self) -> Node: ...

class Path(GObject.Object): 
    @classmethod
    def new(cls) -> Path: ...
    @classmethod
    def query(cls, expression: str, root: Node) -> Node: ...
    def compile(self, expression: str) -> bool: ...
    def match(self, root: Node) -> Node: ...

class Reader(GObject.Object): 
    @classmethod
    def new(cls, node: Node) -> Reader: ...
    def count_elements(self) -> int: ...
    def count_members(self) -> int: ...
    def end_element(self) -> None: ...
    def end_member(self) -> None: ...
    def get_boolean_value(self) -> bool: ...
    def get_double_value(self) -> float: ...
    def get_error(self) -> GLib.Error: ...
    def get_int_value(self) -> int: ...
    def get_member_name(self) -> str: ...
    def get_null_value(self) -> bool: ...
    def get_string_value(self) -> str: ...
    def get_value(self) -> Node: ...
    def is_array(self) -> bool: ...
    def is_object(self) -> bool: ...
    def is_value(self) -> bool: ...
    def list_members(self) -> list[str]: ...
    def read_element(self, index_: int) -> bool: ...
    def read_member(self, member_name: str) -> bool: ...
    def set_root(self, root: Node) -> None: ...

class Serializable: 
    def deserialize_property(self, property_name: str, value: GObject.Value, pspec: GObject.ParamSpec, property_node: Node) -> bool: ...
    def find_property(self, name: str) -> GObject.ParamSpec: ...
    def get_property(self, pspec: GObject.ParamSpec, value: GObject.Value) -> None: ...
    def list_properties(self, n_pspecs: int) -> GObject.ParamSpec: ...
    def serialize_property(self, property_name: str, value: GObject.Value, pspec: GObject.ParamSpec) -> Node: ...
    def set_property(self, pspec: GObject.ParamSpec, value: GObject.Value) -> None: ...
    def default_deserialize_property(self, property_name: str, value: GObject.Value, pspec: GObject.ParamSpec, property_node: Node) -> bool: ...
    def default_serialize_property(self, property_name: str, value: GObject.Value, pspec: GObject.ParamSpec) -> Node: ...
    def deserialize_property(self, property_name: str, value: GObject.Value, pspec: GObject.ParamSpec, property_node: Node) -> bool: ...
    def find_property(self, name: str) -> GObject.ParamSpec: ...
    def get_property(self, pspec: GObject.ParamSpec, value: GObject.Value) -> None: ...
    def list_properties(self, n_pspecs: int) -> list[GObject.ParamSpec]: ...
    def serialize_property(self, property_name: str, value: GObject.Value, pspec: GObject.ParamSpec) -> Node: ...
    def set_property(self, pspec: GObject.ParamSpec, value: GObject.Value) -> None: ...

class NodeType(GObject.GEnum): 
    OBJECT = ...
    ARRAY = ...
    VALUE = ...
    NULL = ...

class ParserError(GObject.GEnum): 
    PARSE = ...
    TRAILING_COMMA = ...
    MISSING_COMMA = ...
    MISSING_COLON = ...
    INVALID_BAREWORD = ...
    EMPTY_MEMBER_NAME = ...
    INVALID_DATA = ...
    UNKNOWN = ...

class PathError(GObject.GEnum): 
    QUERY = ...

class ReaderError(GObject.GEnum): 
    NO_ARRAY = ...
    INVALID_INDEX = ...
    NO_OBJECT = ...
    INVALID_MEMBER = ...
    INVALID_NODE = ...
    NO_VALUE = ...
    INVALID_TYPE = ...

