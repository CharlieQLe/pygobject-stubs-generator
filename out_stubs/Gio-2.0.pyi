from gi.repository import GLib, GObject, GObject

DBUS_METHOD_INVOCATION_HANDLED: bool
DBUS_METHOD_INVOCATION_UNHANDLED: bool
DEBUG_CONTROLLER_EXTENSION_POINT_NAME: str
DESKTOP_APP_INFO_LOOKUP_EXTENSION_POINT_NAME: str
DRIVE_IDENTIFIER_KIND_UNIX_DEVICE: str
FILE_ATTRIBUTE_ACCESS_CAN_DELETE: str
FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE: str
FILE_ATTRIBUTE_ACCESS_CAN_READ: str
FILE_ATTRIBUTE_ACCESS_CAN_RENAME: str
FILE_ATTRIBUTE_ACCESS_CAN_TRASH: str
FILE_ATTRIBUTE_ACCESS_CAN_WRITE: str
FILE_ATTRIBUTE_DOS_IS_ARCHIVE: str
FILE_ATTRIBUTE_DOS_IS_MOUNTPOINT: str
FILE_ATTRIBUTE_DOS_IS_SYSTEM: str
FILE_ATTRIBUTE_DOS_REPARSE_POINT_TAG: str
FILE_ATTRIBUTE_ETAG_VALUE: str
FILE_ATTRIBUTE_FILESYSTEM_FREE: str
FILE_ATTRIBUTE_FILESYSTEM_READONLY: str
FILE_ATTRIBUTE_FILESYSTEM_REMOTE: str
FILE_ATTRIBUTE_FILESYSTEM_SIZE: str
FILE_ATTRIBUTE_FILESYSTEM_TYPE: str
FILE_ATTRIBUTE_FILESYSTEM_USED: str
FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW: str
FILE_ATTRIBUTE_GVFS_BACKEND: str
FILE_ATTRIBUTE_ID_FILE: str
FILE_ATTRIBUTE_ID_FILESYSTEM: str
FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT: str
FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT: str
FILE_ATTRIBUTE_MOUNTABLE_CAN_POLL: str
FILE_ATTRIBUTE_MOUNTABLE_CAN_START: str
FILE_ATTRIBUTE_MOUNTABLE_CAN_START_DEGRADED: str
FILE_ATTRIBUTE_MOUNTABLE_CAN_STOP: str
FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT: str
FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI: str
FILE_ATTRIBUTE_MOUNTABLE_IS_MEDIA_CHECK_AUTOMATIC: str
FILE_ATTRIBUTE_MOUNTABLE_START_STOP_TYPE: str
FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE: str
FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE_FILE: str
FILE_ATTRIBUTE_OWNER_GROUP: str
FILE_ATTRIBUTE_OWNER_USER: str
FILE_ATTRIBUTE_OWNER_USER_REAL: str
FILE_ATTRIBUTE_PREVIEW_ICON: str
FILE_ATTRIBUTE_RECENT_MODIFIED: str
FILE_ATTRIBUTE_SELINUX_CONTEXT: str
FILE_ATTRIBUTE_STANDARD_ALLOCATED_SIZE: str
FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE: str
FILE_ATTRIBUTE_STANDARD_COPY_NAME: str
FILE_ATTRIBUTE_STANDARD_DESCRIPTION: str
FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME: str
FILE_ATTRIBUTE_STANDARD_EDIT_NAME: str
FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE: str
FILE_ATTRIBUTE_STANDARD_ICON: str
FILE_ATTRIBUTE_STANDARD_IS_BACKUP: str
FILE_ATTRIBUTE_STANDARD_IS_HIDDEN: str
FILE_ATTRIBUTE_STANDARD_IS_SYMLINK: str
FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL: str
FILE_ATTRIBUTE_STANDARD_IS_VOLATILE: str
FILE_ATTRIBUTE_STANDARD_NAME: str
FILE_ATTRIBUTE_STANDARD_SIZE: str
FILE_ATTRIBUTE_STANDARD_SORT_ORDER: str
FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON: str
FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET: str
FILE_ATTRIBUTE_STANDARD_TARGET_URI: str
FILE_ATTRIBUTE_STANDARD_TYPE: str
FILE_ATTRIBUTE_THUMBNAILING_FAILED: str
FILE_ATTRIBUTE_THUMBNAIL_IS_VALID: str
FILE_ATTRIBUTE_THUMBNAIL_PATH: str
FILE_ATTRIBUTE_TIME_ACCESS: str
FILE_ATTRIBUTE_TIME_ACCESS_NSEC: str
FILE_ATTRIBUTE_TIME_ACCESS_USEC: str
FILE_ATTRIBUTE_TIME_CHANGED: str
FILE_ATTRIBUTE_TIME_CHANGED_NSEC: str
FILE_ATTRIBUTE_TIME_CHANGED_USEC: str
FILE_ATTRIBUTE_TIME_CREATED: str
FILE_ATTRIBUTE_TIME_CREATED_NSEC: str
FILE_ATTRIBUTE_TIME_CREATED_USEC: str
FILE_ATTRIBUTE_TIME_MODIFIED: str
FILE_ATTRIBUTE_TIME_MODIFIED_NSEC: str
FILE_ATTRIBUTE_TIME_MODIFIED_USEC: str
FILE_ATTRIBUTE_TRASH_DELETION_DATE: str
FILE_ATTRIBUTE_TRASH_ITEM_COUNT: str
FILE_ATTRIBUTE_TRASH_ORIG_PATH: str
FILE_ATTRIBUTE_UNIX_BLOCKS: str
FILE_ATTRIBUTE_UNIX_BLOCK_SIZE: str
FILE_ATTRIBUTE_UNIX_DEVICE: str
FILE_ATTRIBUTE_UNIX_GID: str
FILE_ATTRIBUTE_UNIX_INODE: str
FILE_ATTRIBUTE_UNIX_IS_MOUNTPOINT: str
FILE_ATTRIBUTE_UNIX_MODE: str
FILE_ATTRIBUTE_UNIX_NLINK: str
FILE_ATTRIBUTE_UNIX_RDEV: str
FILE_ATTRIBUTE_UNIX_UID: str
MEMORY_MONITOR_EXTENSION_POINT_NAME: str
MENU_ATTRIBUTE_ACTION: str
MENU_ATTRIBUTE_ACTION_NAMESPACE: str
MENU_ATTRIBUTE_ICON: str
MENU_ATTRIBUTE_LABEL: str
MENU_ATTRIBUTE_TARGET: str
MENU_LINK_SECTION: str
MENU_LINK_SUBMENU: str
NATIVE_VOLUME_MONITOR_EXTENSION_POINT_NAME: str
NETWORK_MONITOR_EXTENSION_POINT_NAME: str
POWER_PROFILE_MONITOR_EXTENSION_POINT_NAME: str
PROXY_EXTENSION_POINT_NAME: str
PROXY_RESOLVER_EXTENSION_POINT_NAME: str
SETTINGS_BACKEND_EXTENSION_POINT_NAME: str
TLS_BACKEND_EXTENSION_POINT_NAME: str
TLS_DATABASE_PURPOSE_AUTHENTICATE_CLIENT: str
TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER: str
VFS_EXTENSION_POINT_NAME: str
VOLUME_IDENTIFIER_KIND_CLASS: str
VOLUME_IDENTIFIER_KIND_HAL_UDI: str
VOLUME_IDENTIFIER_KIND_LABEL: str
VOLUME_IDENTIFIER_KIND_NFS_MOUNT: str
VOLUME_IDENTIFIER_KIND_UNIX_DEVICE: str
VOLUME_IDENTIFIER_KIND_UUID: str
VOLUME_MONITOR_EXTENSION_POINT_NAME: str

def action_name_is_valid(action_name: str) -> bool: ...
def action_parse_detailed_name(detailed_name: str, action_name: str, target_value: GLib.Variant) -> bool: ...
def action_print_detailed_name(action_name: str, target_value: GLib.Variant | None) -> str: ...
def app_info_create_from_commandline(commandline: filename, application_name: str | None, flags: AppInfoCreateFlags) -> AppInfo: ...
def app_info_get_all() -> GLib.List: ...
def app_info_get_all_for_type(content_type: str) -> GLib.List: ...
def app_info_get_default_for_type(content_type: str, must_support_uris: bool) -> AppInfo | None: ...
def app_info_get_default_for_type_async(content_type: str, must_support_uris: bool, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
def app_info_get_default_for_type_finish(result: AsyncResult) -> AppInfo: ...
def app_info_get_default_for_uri_scheme(uri_scheme: str) -> AppInfo | None: ...
def app_info_get_default_for_uri_scheme_async(uri_scheme: str, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
def app_info_get_default_for_uri_scheme_finish(result: AsyncResult) -> AppInfo: ...
def app_info_get_fallback_for_type(content_type: str) -> GLib.List: ...
def app_info_get_recommended_for_type(content_type: str) -> GLib.List: ...
def app_info_launch_default_for_uri(uri: str, context: AppLaunchContext | None) -> bool: ...
def app_info_launch_default_for_uri_async(uri: str, context: AppLaunchContext | None, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
def app_info_launch_default_for_uri_finish(result: AsyncResult) -> bool: ...
def app_info_reset_type_associations(content_type: str) -> None: ...
def async_initable_newv_async(object_type: GObject.Type, n_parameters: int, parameters: GObject.Parameter, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
def bus_get(bus_type: BusType, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
def bus_get_finish(res: AsyncResult) -> DBusConnection: ...
def bus_get_sync(bus_type: BusType, cancellable: Cancellable | None) -> DBusConnection: ...
def bus_own_name(bus_type: BusType, name: str, flags: BusNameOwnerFlags, bus_acquired_handler: BusAcquiredCallback | None, name_acquired_handler: BusNameAcquiredCallback | None, name_lost_handler: BusNameLostCallback | None, user_data: object | None, user_data_free_func: GLib.DestroyNotify | None) -> int: ...
def bus_own_name_on_connection(connection: DBusConnection, name: str, flags: BusNameOwnerFlags, name_acquired_handler: BusNameAcquiredCallback | None, name_lost_handler: BusNameLostCallback | None, user_data: object | None, user_data_free_func: GLib.DestroyNotify | None) -> int: ...
def bus_own_name_on_connection_with_closures(connection: DBusConnection, name: str, flags: BusNameOwnerFlags, name_acquired_closure: GObject.Closure | None, name_lost_closure: GObject.Closure | None) -> int: ...
def bus_own_name_with_closures(bus_type: BusType, name: str, flags: BusNameOwnerFlags, bus_acquired_closure: GObject.Closure | None, name_acquired_closure: GObject.Closure | None, name_lost_closure: GObject.Closure | None) -> int: ...
def bus_unown_name(owner_id: int) -> None: ...
def bus_unwatch_name(watcher_id: int) -> None: ...
def bus_watch_name(bus_type: BusType, name: str, flags: BusNameWatcherFlags, name_appeared_handler: BusNameAppearedCallback | None, name_vanished_handler: BusNameVanishedCallback | None, user_data: object | None, user_data_free_func: GLib.DestroyNotify | None) -> int: ...
def bus_watch_name_on_connection(connection: DBusConnection, name: str, flags: BusNameWatcherFlags, name_appeared_handler: BusNameAppearedCallback | None, name_vanished_handler: BusNameVanishedCallback | None, user_data: object | None, user_data_free_func: GLib.DestroyNotify | None) -> int: ...
def bus_watch_name_on_connection_with_closures(connection: DBusConnection, name: str, flags: BusNameWatcherFlags, name_appeared_closure: GObject.Closure | None, name_vanished_closure: GObject.Closure | None) -> int: ...
def bus_watch_name_with_closures(bus_type: BusType, name: str, flags: BusNameWatcherFlags, name_appeared_closure: GObject.Closure | None, name_vanished_closure: GObject.Closure | None) -> int: ...
def content_type_can_be_executable(type: str) -> bool: ...
def content_type_equals(type1: str, type2: str) -> bool: ...
def content_type_from_mime_type(mime_type: str) -> str | None: ...
def content_type_get_description(type: str) -> str: ...
def content_type_get_generic_icon_name(type: str) -> str | None: ...
def content_type_get_icon(type: str) -> Icon: ...
def content_type_get_mime_dirs() -> list[str]: ...
def content_type_get_mime_type(type: str) -> str | None: ...
def content_type_get_symbolic_icon(type: str) -> Icon: ...
def content_type_guess(filename: filename | None, data: list[int] | None, data_size: gsize, result_uncertain: bool) -> str: ...
def content_type_guess_for_tree(root: File) -> list[str]: ...
def content_type_is_a(type: str, supertype: str) -> bool: ...
def content_type_is_mime_type(type: str, mime_type: str) -> bool: ...
def content_type_is_unknown(type: str) -> bool: ...
def content_type_set_mime_dirs(dirs: list[str] | None) -> None: ...
def content_types_get_registered() -> GLib.List: ...
def dbus_address_escape_value(string: str) -> str: ...
def dbus_address_get_for_bus_sync(bus_type: BusType, cancellable: Cancellable | None) -> str: ...
def dbus_address_get_stream(address: str, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
def dbus_address_get_stream_finish(res: AsyncResult, out_guid: str | None) -> IOStream: ...
def dbus_address_get_stream_sync(address: str, out_guid: str | None, cancellable: Cancellable | None) -> IOStream: ...
def dbus_annotation_info_lookup(annotations: list[DBusAnnotationInfo] | None, name: str) -> str | None: ...
def dbus_error_encode_gerror(error: GLib.Error) -> str: ...
def dbus_error_get_remote_error(error: GLib.Error) -> str | None: ...
def dbus_error_is_remote_error(error: GLib.Error) -> bool: ...
def dbus_error_new_for_dbus_error(dbus_error_name: str, dbus_error_message: str) -> GLib.Error: ...
def dbus_error_quark() -> GLib.Quark: ...
def dbus_error_register_error(error_domain: GLib.Quark, error_code: int, dbus_error_name: str) -> bool: ...
def dbus_error_register_error_domain(error_domain_quark_name: str, quark_volatile: gsize, entries: list[DBusErrorEntry], num_entries: int) -> None: ...
def dbus_error_strip_remote_error(error: GLib.Error) -> bool: ...
def dbus_error_unregister_error(error_domain: GLib.Quark, error_code: int, dbus_error_name: str) -> bool: ...
def dbus_escape_object_path(s: str) -> str: ...
def dbus_escape_object_path_bytestring(bytes: list[int]) -> str: ...
def dbus_generate_guid() -> str: ...
def dbus_gvalue_to_gvariant(gvalue: GObject.Value, type: GLib.VariantType) -> GLib.Variant: ...
def dbus_gvariant_to_gvalue(value: GLib.Variant, out_gvalue: GObject.Value) -> None: ...
def dbus_is_address(string: str) -> bool: ...
def dbus_is_error_name(string: str) -> bool: ...
def dbus_is_guid(string: str) -> bool: ...
def dbus_is_interface_name(string: str) -> bool: ...
def dbus_is_member_name(string: str) -> bool: ...
def dbus_is_name(string: str) -> bool: ...
def dbus_is_supported_address(string: str) -> bool: ...
def dbus_is_unique_name(string: str) -> bool: ...
def dbus_unescape_object_path(s: str) -> list[int] | None: ...
def dtls_client_connection_new(base_socket: DatagramBased, server_identity: SocketConnectable | None) -> DtlsClientConnection: ...
def dtls_server_connection_new(base_socket: DatagramBased, certificate: TlsCertificate | None) -> DtlsServerConnection: ...
def file_new_for_commandline_arg(arg: filename) -> File: ...
def file_new_for_commandline_arg_and_cwd(arg: filename, cwd: filename) -> File: ...
def file_new_for_path(path: filename) -> File: ...
def file_new_for_uri(uri: str) -> File: ...
def file_new_tmp(tmpl: filename | None, iostream: FileIOStream) -> File: ...
def file_new_tmp_async(tmpl: filename | None, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
def file_new_tmp_dir_async(tmpl: filename | None, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
def file_new_tmp_dir_finish(result: AsyncResult) -> File: ...
def file_new_tmp_finish(result: AsyncResult, iostream: FileIOStream) -> File: ...
def file_parse_name(parse_name: str) -> File: ...
def icon_deserialize(value: GLib.Variant) -> Icon | None: ...
def icon_hash(icon: object) -> int: ...
def icon_new_for_string(str: str) -> Icon: ...
def initable_newv(object_type: GObject.Type, n_parameters: int, parameters: list[GObject.Parameter], cancellable: Cancellable | None) -> GObject.Object: ...
def io_error_from_errno(err_no: int) -> IOErrorEnum: ...
def io_error_from_file_error(file_error: GLib.FileError) -> IOErrorEnum: ...
def io_error_quark() -> GLib.Quark: ...
def io_extension_point_implement(extension_point_name: str, type: GObject.Type, extension_name: str, priority: int) -> IOExtension: ...
def io_extension_point_lookup(name: str) -> IOExtensionPoint: ...
def io_extension_point_register(name: str) -> IOExtensionPoint: ...
def io_modules_load_all_in_directory(dirname: filename) -> GLib.List: ...
def io_modules_load_all_in_directory_with_scope(dirname: filename, scope: IOModuleScope) -> GLib.List: ...
def io_modules_scan_all_in_directory(dirname: filename) -> None: ...
def io_modules_scan_all_in_directory_with_scope(dirname: filename, scope: IOModuleScope) -> None: ...
def io_scheduler_cancel_all_jobs() -> None: ...
def io_scheduler_push_job(job_func: IOSchedulerJobFunc, user_data: object | None, notify: GLib.DestroyNotify | None, io_priority: int, cancellable: Cancellable | None) -> None: ...
def keyfile_settings_backend_new(filename: str, root_path: str, root_group: str | None) -> SettingsBackend: ...
def memory_monitor_dup_default() -> MemoryMonitor: ...
def memory_settings_backend_new() -> SettingsBackend: ...
def network_monitor_get_default() -> NetworkMonitor: ...
def networking_init() -> None: ...
def null_settings_backend_new() -> SettingsBackend: ...
def pollable_source_new(pollable_stream: GObject.Object) -> GLib.Source: ...
def pollable_source_new_full(pollable_stream: GObject.Object, child_source: GLib.Source | None, cancellable: Cancellable | None) -> GLib.Source: ...
def pollable_stream_read(stream: InputStream, buffer: list[int], count: gsize, blocking: bool, cancellable: Cancellable | None) -> gssize: ...
def pollable_stream_write(stream: OutputStream, buffer: list[int], count: gsize, blocking: bool, cancellable: Cancellable | None) -> gssize: ...
def pollable_stream_write_all(stream: OutputStream, buffer: list[int], count: gsize, blocking: bool, bytes_written: gsize, cancellable: Cancellable | None) -> bool: ...
def power_profile_monitor_dup_default() -> PowerProfileMonitor: ...
def proxy_get_default_for_protocol(protocol: str) -> Proxy | None: ...
def proxy_resolver_get_default() -> ProxyResolver: ...
def resolver_error_quark() -> GLib.Quark: ...
def resource_error_quark() -> GLib.Quark: ...
def resource_load(filename: filename) -> Resource: ...
def resources_enumerate_children(path: str, lookup_flags: ResourceLookupFlags) -> list[str]: ...
def resources_get_info(path: str, lookup_flags: ResourceLookupFlags, size: gsize, flags: int) -> bool: ...
def resources_lookup_data(path: str, lookup_flags: ResourceLookupFlags) -> GLib.Bytes: ...
def resources_open_stream(path: str, lookup_flags: ResourceLookupFlags) -> InputStream: ...
def resources_register(resource: Resource) -> None: ...
def resources_unregister(resource: Resource) -> None: ...
def settings_schema_source_get_default() -> SettingsSchemaSource | None: ...
def simple_async_report_error_in_idle(object: GObject.Object | None, callback: AsyncReadyCallback | None, user_data: object | None, domain: GLib.Quark, code: int, format: str) -> None: ...
def simple_async_report_gerror_in_idle(object: GObject.Object | None, callback: AsyncReadyCallback | None, user_data: object | None, error: GLib.Error) -> None: ...
def simple_async_report_take_gerror_in_idle(object: GObject.Object | None, callback: AsyncReadyCallback | None, user_data: object | None, error: GLib.Error) -> None: ...
def srv_target_list_sort(targets: GLib.List) -> GLib.List: ...
def tls_backend_get_default() -> TlsBackend: ...
def tls_channel_binding_error_quark() -> GLib.Quark: ...
def tls_client_connection_new(base_io_stream: IOStream, server_identity: SocketConnectable | None) -> TlsClientConnection: ...
def tls_error_quark() -> GLib.Quark: ...
def tls_file_database_new(anchors: filename) -> TlsFileDatabase: ...
def tls_server_connection_new(base_io_stream: IOStream, certificate: TlsCertificate | None) -> TlsServerConnection: ...
def unix_is_mount_path_system_internal(mount_path: filename) -> bool: ...
def unix_is_system_device_path(device_path: str) -> bool: ...
def unix_is_system_fs_type(fs_type: str) -> bool: ...
def unix_mount_at(mount_path: filename, time_read: int) -> UnixMountEntry | None: ...
def unix_mount_compare(mount1: UnixMountEntry, mount2: UnixMountEntry) -> int: ...
def unix_mount_copy(mount_entry: UnixMountEntry) -> UnixMountEntry: ...
def unix_mount_for(file_path: filename, time_read: int) -> UnixMountEntry | None: ...
def unix_mount_free(mount_entry: UnixMountEntry) -> None: ...
def unix_mount_get_device_path(mount_entry: UnixMountEntry) -> filename: ...
def unix_mount_get_fs_type(mount_entry: UnixMountEntry) -> str: ...
def unix_mount_get_mount_path(mount_entry: UnixMountEntry) -> filename: ...
def unix_mount_get_options(mount_entry: UnixMountEntry) -> str | None: ...
def unix_mount_get_root_path(mount_entry: UnixMountEntry) -> str | None: ...
def unix_mount_guess_can_eject(mount_entry: UnixMountEntry) -> bool: ...
def unix_mount_guess_icon(mount_entry: UnixMountEntry) -> Icon: ...
def unix_mount_guess_name(mount_entry: UnixMountEntry) -> str: ...
def unix_mount_guess_should_display(mount_entry: UnixMountEntry) -> bool: ...
def unix_mount_guess_symbolic_icon(mount_entry: UnixMountEntry) -> Icon: ...
def unix_mount_is_readonly(mount_entry: UnixMountEntry) -> bool: ...
def unix_mount_is_system_internal(mount_entry: UnixMountEntry) -> bool: ...
def unix_mount_point_at(mount_path: filename, time_read: int) -> UnixMountPoint | None: ...
def unix_mount_points_changed_since(time: int) -> bool: ...
def unix_mount_points_get(time_read: int) -> GLib.List: ...
def unix_mounts_changed_since(time: int) -> bool: ...
def unix_mounts_get(time_read: int) -> GLib.List: ...

class AppInfoMonitor(GObject.Object): 
    @classmethod
    def get(cls) -> AppInfoMonitor: ...

class AppLaunchContext(GObject.Object): 
    @classmethod
    def new(cls) -> AppLaunchContext: ...
    def get_display(self, info: AppInfo, files: GLib.List) -> str | None: ...
    def get_environment(self) -> list[filename]: ...
    def get_startup_notify_id(self, info: AppInfo, files: GLib.List) -> str | None: ...
    def launch_failed(self, startup_notify_id: str) -> None: ...
    def setenv(self, variable: filename, value: filename) -> None: ...
    def unsetenv(self, variable: filename) -> None: ...

class Application(GObject.Object, ActionGroup, ActionMap): 
    @classmethod
    def new(cls, application_id: str | None, flags: ApplicationFlags) -> Application: ...
    @classmethod
    def get_default(cls) -> Application | None: ...
    @classmethod
    def id_is_valid(cls, application_id: str) -> bool: ...
    def activate(self) -> None: ...
    def add_main_option(self, long_name: str, short_name: str, flags: GLib.OptionFlags, arg: GLib.OptionArg, description: str, arg_description: str | None) -> None: ...
    def add_main_option_entries(self, entries: list[GLib.OptionEntry]) -> None: ...
    def add_option_group(self, group: GLib.OptionGroup) -> None: ...
    def bind_busy_property(self, object: GObject.Object, property: str) -> None: ...
    def get_application_id(self) -> str | None: ...
    def get_dbus_connection(self) -> DBusConnection | None: ...
    def get_dbus_object_path(self) -> str | None: ...
    def get_flags(self) -> ApplicationFlags: ...
    def get_inactivity_timeout(self) -> int: ...
    def get_is_busy(self) -> bool: ...
    def get_is_registered(self) -> bool: ...
    def get_is_remote(self) -> bool: ...
    def get_resource_base_path(self) -> str | None: ...
    def hold(self) -> None: ...
    def mark_busy(self) -> None: ...
    def open(self, files: list[File], n_files: int, hint: str) -> None: ...
    def quit(self) -> None: ...
    def register(self, cancellable: Cancellable | None) -> bool: ...
    def release(self) -> None: ...
    def run(self, argc: int, argv: list[filename] | None) -> int: ...
    def send_notification(self, id: str | None, notification: Notification) -> None: ...
    def set_action_group(self, action_group: ActionGroup | None) -> None: ...
    def set_application_id(self, application_id: str | None) -> None: ...
    def set_default(self) -> None: ...
    def set_flags(self, flags: ApplicationFlags) -> None: ...
    def set_inactivity_timeout(self, inactivity_timeout: int) -> None: ...
    def set_option_context_description(self, description: str | None) -> None: ...
    def set_option_context_parameter_string(self, parameter_string: str | None) -> None: ...
    def set_option_context_summary(self, summary: str | None) -> None: ...
    def set_resource_base_path(self, resource_path: str | None) -> None: ...
    def unbind_busy_property(self, object: GObject.Object, property: str) -> None: ...
    def unmark_busy(self) -> None: ...
    def withdraw_notification(self, id: str) -> None: ...

class ApplicationCommandLine(GObject.Object): 
    def create_file_for_arg(self, arg: filename) -> File: ...
    def get_arguments(self, argc: int) -> list[filename]: ...
    def get_cwd(self) -> filename | None: ...
    def get_environ(self) -> list[filename]: ...
    def get_exit_status(self) -> int: ...
    def get_is_remote(self) -> bool: ...
    def get_options_dict(self) -> GLib.VariantDict: ...
    def get_platform_data(self) -> GLib.Variant | None: ...
    def get_stdin(self) -> InputStream | None: ...
    def getenv(self, name: filename) -> str | None: ...
    def print(self, format: str) -> None: ...
    def printerr(self, format: str) -> None: ...
    def set_exit_status(self, exit_status: int) -> None: ...

class BufferedInputStream(FilterInputStream, Seekable): 
    @classmethod
    def new(cls, base_stream: InputStream) -> InputStream: ...
    def fill(self, count: gssize, cancellable: Cancellable | None) -> gssize: ...
    def fill_async(self, count: gssize, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def fill_finish(self, result: AsyncResult) -> gssize: ...
    def get_available(self) -> gsize: ...
    def get_buffer_size(self) -> gsize: ...
    def peek(self, buffer: list[int], offset: gsize, count: gsize) -> gsize: ...
    def peek_buffer(self, count: gsize) -> list[int]: ...
    def read_byte(self, cancellable: Cancellable | None) -> int: ...
    def set_buffer_size(self, size: gsize) -> None: ...

class BufferedOutputStream(FilterOutputStream, Seekable): 
    @classmethod
    def new(cls, base_stream: OutputStream) -> OutputStream: ...
    def get_auto_grow(self) -> bool: ...
    def get_buffer_size(self) -> gsize: ...
    def set_auto_grow(self, auto_grow: bool) -> None: ...
    def set_buffer_size(self, size: gsize) -> None: ...

class BytesIcon(GObject.Object, Icon, LoadableIcon): 
    @classmethod
    def new(cls, bytes: GLib.Bytes) -> BytesIcon: ...
    def get_bytes(self) -> GLib.Bytes: ...

class Cancellable(GObject.Object): 
    @classmethod
    def new(cls) -> Cancellable: ...
    @classmethod
    def get_current(cls) -> Cancellable | None: ...
    def cancel(self) -> None: ...
    def connect(self, callback: GObject.Callback, data: object | None, data_destroy_func: GLib.DestroyNotify | None) -> int: ...
    def disconnect(self, handler_id: int) -> None: ...
    def get_fd(self) -> int: ...
    def is_cancelled(self) -> bool: ...
    def make_pollfd(self, pollfd: GLib.PollFD) -> bool: ...
    def pop_current(self) -> None: ...
    def push_current(self) -> None: ...
    def release_fd(self) -> None: ...
    def reset(self) -> None: ...
    def set_error_if_cancelled(self) -> bool: ...
    def source_new(self) -> GLib.Source: ...

class CharsetConverter(GObject.Object, Converter, Initable): 
    @classmethod
    def new(cls, to_charset: str, from_charset: str) -> CharsetConverter: ...
    def get_num_fallbacks(self) -> int: ...
    def get_use_fallback(self) -> bool: ...
    def set_use_fallback(self, use_fallback: bool) -> None: ...

class ConverterInputStream(FilterInputStream, PollableInputStream): 
    @classmethod
    def new(cls, base_stream: InputStream, converter: Converter) -> InputStream: ...
    def get_converter(self) -> Converter: ...

class ConverterOutputStream(FilterOutputStream, PollableOutputStream): 
    @classmethod
    def new(cls, base_stream: OutputStream, converter: Converter) -> OutputStream: ...
    def get_converter(self) -> Converter: ...

class Credentials(GObject.Object): 
    @classmethod
    def new(cls) -> Credentials: ...
    def get_native(self, native_type: CredentialsType) -> object | None: ...
    def get_unix_pid(self) -> int: ...
    def get_unix_user(self) -> int: ...
    def is_same_user(self, other_credentials: Credentials) -> bool: ...
    def set_native(self, native_type: CredentialsType, native: object) -> None: ...
    def set_unix_user(self, uid: int) -> bool: ...
    def to_string(self) -> str: ...

class DBusActionGroup(GObject.Object, ActionGroup, RemoteActionGroup): 
    @classmethod
    def get(cls, connection: DBusConnection, bus_name: str | None, object_path: str) -> DBusActionGroup: ...

class DBusAuthObserver(GObject.Object): 
    @classmethod
    def new(cls) -> DBusAuthObserver: ...
    def allow_mechanism(self, mechanism: str) -> bool: ...
    def authorize_authenticated_peer(self, stream: IOStream, credentials: Credentials | None) -> bool: ...

class DBusConnection(GObject.Object, AsyncInitable, Initable): 
    @classmethod
    def new_finish(cls, res: AsyncResult) -> DBusConnection: ...
    @classmethod
    def new(cls, stream: IOStream, guid: str | None, flags: DBusConnectionFlags, observer: DBusAuthObserver | None, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    @classmethod
    def new_for_address(cls, address: str, flags: DBusConnectionFlags, observer: DBusAuthObserver | None, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def add_filter(self, filter_function: DBusMessageFilterFunction, user_data: object | None, user_data_free_func: GLib.DestroyNotify) -> int: ...
    def call(self, bus_name: str | None, object_path: str, interface_name: str, method_name: str, parameters: GLib.Variant | None, reply_type: GLib.VariantType | None, flags: DBusCallFlags, timeout_msec: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def call_finish(self, res: AsyncResult) -> GLib.Variant: ...
    def call_sync(self, bus_name: str | None, object_path: str, interface_name: str, method_name: str, parameters: GLib.Variant | None, reply_type: GLib.VariantType | None, flags: DBusCallFlags, timeout_msec: int, cancellable: Cancellable | None) -> GLib.Variant: ...
    def call_with_unix_fd_list(self, bus_name: str | None, object_path: str, interface_name: str, method_name: str, parameters: GLib.Variant | None, reply_type: GLib.VariantType | None, flags: DBusCallFlags, timeout_msec: int, fd_list: UnixFDList | None, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def call_with_unix_fd_list_finish(self, out_fd_list: UnixFDList, res: AsyncResult) -> GLib.Variant: ...
    def call_with_unix_fd_list_sync(self, bus_name: str | None, object_path: str, interface_name: str, method_name: str, parameters: GLib.Variant | None, reply_type: GLib.VariantType | None, flags: DBusCallFlags, timeout_msec: int, fd_list: UnixFDList | None, out_fd_list: UnixFDList, cancellable: Cancellable | None) -> GLib.Variant: ...
    def close(self, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def close_finish(self, res: AsyncResult) -> bool: ...
    def close_sync(self, cancellable: Cancellable | None) -> bool: ...
    def emit_signal(self, destination_bus_name: str | None, object_path: str, interface_name: str, signal_name: str, parameters: GLib.Variant | None) -> bool: ...
    def export_action_group(self, object_path: str, action_group: ActionGroup) -> int: ...
    def export_menu_model(self, object_path: str, menu: MenuModel) -> int: ...
    def flush(self, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def flush_finish(self, res: AsyncResult) -> bool: ...
    def flush_sync(self, cancellable: Cancellable | None) -> bool: ...
    def get_capabilities(self) -> DBusCapabilityFlags: ...
    def get_exit_on_close(self) -> bool: ...
    def get_flags(self) -> DBusConnectionFlags: ...
    def get_guid(self) -> str: ...
    def get_last_serial(self) -> int: ...
    def get_peer_credentials(self) -> Credentials | None: ...
    def get_stream(self) -> IOStream: ...
    def get_unique_name(self) -> str | None: ...
    def is_closed(self) -> bool: ...
    def register_object(self, object_path: str, interface_info: DBusInterfaceInfo, vtable: DBusInterfaceVTable | None, user_data: object | None, user_data_free_func: GLib.DestroyNotify) -> int: ...
    def register_object_with_closures(self, object_path: str, interface_info: DBusInterfaceInfo, method_call_closure: GObject.Closure | None, get_property_closure: GObject.Closure | None, set_property_closure: GObject.Closure | None) -> int: ...
    def register_subtree(self, object_path: str, vtable: DBusSubtreeVTable, flags: DBusSubtreeFlags, user_data: object | None, user_data_free_func: GLib.DestroyNotify) -> int: ...
    def remove_filter(self, filter_id: int) -> None: ...
    def send_message(self, message: DBusMessage, flags: DBusSendMessageFlags, out_serial: int) -> bool: ...
    def send_message_with_reply(self, message: DBusMessage, flags: DBusSendMessageFlags, timeout_msec: int, out_serial: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def send_message_with_reply_finish(self, res: AsyncResult) -> DBusMessage: ...
    def send_message_with_reply_sync(self, message: DBusMessage, flags: DBusSendMessageFlags, timeout_msec: int, out_serial: int, cancellable: Cancellable | None) -> DBusMessage: ...
    def set_exit_on_close(self, exit_on_close: bool) -> None: ...
    def signal_subscribe(self, sender: str | None, interface_name: str | None, member: str | None, object_path: str | None, arg0: str | None, flags: DBusSignalFlags, callback: DBusSignalCallback, user_data: object | None, user_data_free_func: GLib.DestroyNotify | None) -> int: ...
    def signal_unsubscribe(self, subscription_id: int) -> None: ...
    def start_message_processing(self) -> None: ...
    def unexport_action_group(self, export_id: int) -> None: ...
    def unexport_menu_model(self, export_id: int) -> None: ...
    def unregister_object(self, registration_id: int) -> bool: ...
    def unregister_subtree(self, registration_id: int) -> bool: ...

class DBusInterfaceSkeleton(GObject.Object, DBusInterface): 
    def export(self, connection: DBusConnection, object_path: str) -> bool: ...
    def flush(self) -> None: ...
    def get_connection(self) -> DBusConnection | None: ...
    def get_connections(self) -> GLib.List: ...
    def get_flags(self) -> DBusInterfaceSkeletonFlags: ...
    def get_info(self) -> DBusInterfaceInfo: ...
    def get_object_path(self) -> str | None: ...
    def get_properties(self) -> GLib.Variant: ...
    def get_vtable(self) -> DBusInterfaceVTable: ...
    def has_connection(self, connection: DBusConnection) -> bool: ...
    def set_flags(self, flags: DBusInterfaceSkeletonFlags) -> None: ...
    def unexport(self) -> None: ...
    def unexport_from_connection(self, connection: DBusConnection) -> None: ...

class DBusMenuModel(MenuModel): 
    @classmethod
    def get(cls, connection: DBusConnection, bus_name: str | None, object_path: str) -> DBusMenuModel: ...

class DBusMessage(GObject.Object): 
    @classmethod
    def new(cls) -> DBusMessage: ...
    @classmethod
    def bytes_needed(cls, blob: list[int], blob_len: gsize) -> gssize: ...
    def copy(self) -> DBusMessage: ...
    def get_arg0(self) -> str | None: ...
    def get_body(self) -> GLib.Variant | None: ...
    def get_byte_order(self) -> DBusMessageByteOrder: ...
    def get_destination(self) -> str | None: ...
    def get_error_name(self) -> str | None: ...
    def get_flags(self) -> DBusMessageFlags: ...
    def get_header(self, header_field: DBusMessageHeaderField) -> GLib.Variant | None: ...
    def get_header_fields(self) -> list[int]: ...
    def get_interface(self) -> str | None: ...
    def get_locked(self) -> bool: ...
    def get_member(self) -> str | None: ...
    def get_message_type(self) -> DBusMessageType: ...
    def get_num_unix_fds(self) -> int: ...
    def get_path(self) -> str | None: ...
    def get_reply_serial(self) -> int: ...
    def get_sender(self) -> str | None: ...
    def get_serial(self) -> int: ...
    def get_signature(self) -> str: ...
    def get_unix_fd_list(self) -> UnixFDList | None: ...
    def lock(self) -> None: ...
    def new_method_error(self, error_name: str, error_message_format: str) -> DBusMessage: ...
    def new_method_error_literal(self, error_name: str, error_message: str) -> DBusMessage: ...
    def new_method_error_valist(self, error_name: str, error_message_format: str, var_args: va_list) -> DBusMessage: ...
    def new_method_reply(self) -> DBusMessage: ...
    def print(self, indent: int) -> str: ...
    def set_body(self, body: GLib.Variant) -> None: ...
    def set_byte_order(self, byte_order: DBusMessageByteOrder) -> None: ...
    def set_destination(self, value: str | None) -> None: ...
    def set_error_name(self, value: str) -> None: ...
    def set_flags(self, flags: DBusMessageFlags) -> None: ...
    def set_header(self, header_field: DBusMessageHeaderField, value: GLib.Variant | None) -> None: ...
    def set_interface(self, value: str | None) -> None: ...
    def set_member(self, value: str | None) -> None: ...
    def set_message_type(self, type: DBusMessageType) -> None: ...
    def set_num_unix_fds(self, value: int) -> None: ...
    def set_path(self, value: str | None) -> None: ...
    def set_reply_serial(self, value: int) -> None: ...
    def set_sender(self, value: str | None) -> None: ...
    def set_serial(self, serial: int) -> None: ...
    def set_signature(self, value: str | None) -> None: ...
    def set_unix_fd_list(self, fd_list: UnixFDList | None) -> None: ...
    def to_blob(self, out_size: gsize, capabilities: DBusCapabilityFlags) -> list[int]: ...
    def to_gerror(self) -> bool: ...

class DBusMethodInvocation(GObject.Object): 
    def get_connection(self) -> DBusConnection: ...
    def get_interface_name(self) -> str: ...
    def get_message(self) -> DBusMessage: ...
    def get_method_info(self) -> DBusMethodInfo | None: ...
    def get_method_name(self) -> str: ...
    def get_object_path(self) -> str: ...
    def get_parameters(self) -> GLib.Variant: ...
    def get_property_info(self) -> DBusPropertyInfo | None: ...
    def get_sender(self) -> str: ...
    def get_user_data(self) -> object | None: ...
    def return_dbus_error(self, error_name: str, error_message: str) -> None: ...
    def return_error(self, domain: GLib.Quark, code: int, format: str) -> None: ...
    def return_error_literal(self, domain: GLib.Quark, code: int, message: str) -> None: ...
    def return_error_valist(self, domain: GLib.Quark, code: int, format: str, var_args: va_list) -> None: ...
    def return_gerror(self, error: GLib.Error) -> None: ...
    def return_value(self, parameters: GLib.Variant | None) -> None: ...
    def return_value_with_unix_fd_list(self, parameters: GLib.Variant | None, fd_list: UnixFDList | None) -> None: ...
    def take_error(self, error: GLib.Error) -> None: ...

class DBusObjectManagerClient(GObject.Object, AsyncInitable, DBusObjectManager, Initable): 
    @classmethod
    def new_finish(cls, res: AsyncResult) -> DBusObjectManagerClient: ...
    @classmethod
    def new(cls, connection: DBusConnection, flags: DBusObjectManagerClientFlags, name: str, object_path: str, get_proxy_type_func: DBusProxyTypeFunc | None, get_proxy_type_user_data: object | None, get_proxy_type_destroy_notify: GLib.DestroyNotify | None, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    @classmethod
    def new_for_bus(cls, bus_type: BusType, flags: DBusObjectManagerClientFlags, name: str, object_path: str, get_proxy_type_func: DBusProxyTypeFunc | None, get_proxy_type_user_data: object | None, get_proxy_type_destroy_notify: GLib.DestroyNotify | None, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def get_connection(self) -> DBusConnection: ...
    def get_flags(self) -> DBusObjectManagerClientFlags: ...
    def get_name(self) -> str: ...
    def get_name_owner(self) -> str | None: ...

class DBusObjectManagerServer(GObject.Object, DBusObjectManager): 
    @classmethod
    def new(cls, object_path: str) -> DBusObjectManagerServer: ...
    def export(self, object: DBusObjectSkeleton) -> None: ...
    def export_uniquely(self, object: DBusObjectSkeleton) -> None: ...
    def get_connection(self) -> DBusConnection | None: ...
    def is_exported(self, object: DBusObjectSkeleton) -> bool: ...
    def set_connection(self, connection: DBusConnection | None) -> None: ...
    def unexport(self, object_path: str) -> bool: ...

class DBusObjectProxy(GObject.Object, DBusObject): 
    @classmethod
    def new(cls, connection: DBusConnection, object_path: str) -> DBusObjectProxy: ...
    def get_connection(self) -> DBusConnection: ...

class DBusObjectSkeleton(GObject.Object, DBusObject): 
    @classmethod
    def new(cls, object_path: str) -> DBusObjectSkeleton: ...
    def add_interface(self, interface_: DBusInterfaceSkeleton) -> None: ...
    def flush(self) -> None: ...
    def remove_interface(self, interface_: DBusInterfaceSkeleton) -> None: ...
    def remove_interface_by_name(self, interface_name: str) -> None: ...
    def set_object_path(self, object_path: str) -> None: ...

class DBusProxy(GObject.Object, AsyncInitable, DBusInterface, Initable): 
    @classmethod
    def new_finish(cls, res: AsyncResult) -> DBusProxy: ...
    @classmethod
    def new(cls, connection: DBusConnection, flags: DBusProxyFlags, info: DBusInterfaceInfo | None, name: str | None, object_path: str, interface_name: str, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    @classmethod
    def new_for_bus(cls, bus_type: BusType, flags: DBusProxyFlags, info: DBusInterfaceInfo | None, name: str, object_path: str, interface_name: str, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def call(self, method_name: str, parameters: GLib.Variant | None, flags: DBusCallFlags, timeout_msec: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def call_finish(self, res: AsyncResult) -> GLib.Variant: ...
    def call_sync(self, method_name: str, parameters: GLib.Variant | None, flags: DBusCallFlags, timeout_msec: int, cancellable: Cancellable | None) -> GLib.Variant: ...
    def call_with_unix_fd_list(self, method_name: str, parameters: GLib.Variant | None, flags: DBusCallFlags, timeout_msec: int, fd_list: UnixFDList | None, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def call_with_unix_fd_list_finish(self, out_fd_list: UnixFDList, res: AsyncResult) -> GLib.Variant: ...
    def call_with_unix_fd_list_sync(self, method_name: str, parameters: GLib.Variant | None, flags: DBusCallFlags, timeout_msec: int, fd_list: UnixFDList | None, out_fd_list: UnixFDList, cancellable: Cancellable | None) -> GLib.Variant: ...
    def get_cached_property(self, property_name: str) -> GLib.Variant | None: ...
    def get_cached_property_names(self) -> list[str] | None: ...
    def get_connection(self) -> DBusConnection: ...
    def get_default_timeout(self) -> int: ...
    def get_flags(self) -> DBusProxyFlags: ...
    def get_interface_info(self) -> DBusInterfaceInfo | None: ...
    def get_interface_name(self) -> str: ...
    def get_name(self) -> str | None: ...
    def get_name_owner(self) -> str | None: ...
    def get_object_path(self) -> str: ...
    def set_cached_property(self, property_name: str, value: GLib.Variant | None) -> None: ...
    def set_default_timeout(self, timeout_msec: int) -> None: ...
    def set_interface_info(self, info: DBusInterfaceInfo | None) -> None: ...

class DBusServer(GObject.Object, Initable): 
    @classmethod
    def new_sync(cls, address: str, flags: DBusServerFlags, guid: str, observer: DBusAuthObserver | None, cancellable: Cancellable | None) -> DBusServer: ...
    def get_client_address(self) -> str: ...
    def get_flags(self) -> DBusServerFlags: ...
    def get_guid(self) -> str: ...
    def is_active(self) -> bool: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...

class DataInputStream(BufferedInputStream, Seekable): 
    @classmethod
    def new(cls, base_stream: InputStream) -> DataInputStream: ...
    def get_byte_order(self) -> DataStreamByteOrder: ...
    def get_newline_type(self) -> DataStreamNewlineType: ...
    def read_byte(self, cancellable: Cancellable | None) -> int: ...
    def read_int16(self, cancellable: Cancellable | None) -> int: ...
    def read_int32(self, cancellable: Cancellable | None) -> int: ...
    def read_int64(self, cancellable: Cancellable | None) -> int: ...
    def read_line(self, length: gsize, cancellable: Cancellable | None) -> list[int] | None: ...
    def read_line_async(self, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def read_line_finish(self, result: AsyncResult, length: gsize) -> list[int] | None: ...
    def read_line_finish_utf8(self, result: AsyncResult, length: gsize) -> str | None: ...
    def read_line_utf8(self, length: gsize, cancellable: Cancellable | None) -> str | None: ...
    def read_uint16(self, cancellable: Cancellable | None) -> int: ...
    def read_uint32(self, cancellable: Cancellable | None) -> int: ...
    def read_uint64(self, cancellable: Cancellable | None) -> int: ...
    def read_until(self, stop_chars: str, length: gsize, cancellable: Cancellable | None) -> str: ...
    def read_until_async(self, stop_chars: str, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def read_until_finish(self, result: AsyncResult, length: gsize) -> str: ...
    def read_upto(self, stop_chars: str, stop_chars_len: gssize, length: gsize, cancellable: Cancellable | None) -> str: ...
    def read_upto_async(self, stop_chars: str, stop_chars_len: gssize, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def read_upto_finish(self, result: AsyncResult, length: gsize) -> str: ...
    def set_byte_order(self, order: DataStreamByteOrder) -> None: ...
    def set_newline_type(self, type: DataStreamNewlineType) -> None: ...

class DataOutputStream(FilterOutputStream, Seekable): 
    @classmethod
    def new(cls, base_stream: OutputStream) -> DataOutputStream: ...
    def get_byte_order(self) -> DataStreamByteOrder: ...
    def put_byte(self, data: int, cancellable: Cancellable | None) -> bool: ...
    def put_int16(self, data: int, cancellable: Cancellable | None) -> bool: ...
    def put_int32(self, data: int, cancellable: Cancellable | None) -> bool: ...
    def put_int64(self, data: int, cancellable: Cancellable | None) -> bool: ...
    def put_string(self, str: str, cancellable: Cancellable | None) -> bool: ...
    def put_uint16(self, data: int, cancellable: Cancellable | None) -> bool: ...
    def put_uint32(self, data: int, cancellable: Cancellable | None) -> bool: ...
    def put_uint64(self, data: int, cancellable: Cancellable | None) -> bool: ...
    def set_byte_order(self, order: DataStreamByteOrder) -> None: ...

class DebugControllerDBus(GObject.Object, DebugController, Initable): 
    @classmethod
    def new(cls, connection: DBusConnection, cancellable: Cancellable | None) -> DebugControllerDBus | None: ...
    def stop(self) -> None: ...

class DesktopAppInfo(GObject.Object, AppInfo): 
    @classmethod
    def new(cls, desktop_id: str) -> DesktopAppInfo | None: ...
    @classmethod
    def get_implementations(cls, interface: str) -> GLib.List: ...
    @classmethod
    def search(cls, search_string: str) -> list[None]: ...
    @classmethod
    def set_desktop_env(cls, desktop_env: str) -> None: ...
    def get_action_name(self, action_name: str) -> str: ...
    def get_boolean(self, key: str) -> bool: ...
    def get_categories(self) -> str | None: ...
    def get_filename(self) -> filename | None: ...
    def get_generic_name(self) -> str | None: ...
    def get_is_hidden(self) -> bool: ...
    def get_keywords(self) -> list[str]: ...
    def get_locale_string(self, key: str) -> str | None: ...
    def get_nodisplay(self) -> bool: ...
    def get_show_in(self, desktop_env: str | None) -> bool: ...
    def get_startup_wm_class(self) -> str | None: ...
    def get_string(self, key: str) -> str | None: ...
    def get_string_list(self, key: str, length: gsize) -> list[str]: ...
    def has_key(self, key: str) -> bool: ...
    def launch_action(self, action_name: str, launch_context: AppLaunchContext | None) -> None: ...
    def launch_uris_as_manager(self, uris: GLib.List, launch_context: AppLaunchContext | None, spawn_flags: GLib.SpawnFlags, user_setup: GLib.SpawnChildSetupFunc | None, user_setup_data: object | None, pid_callback: DesktopAppLaunchCallback | None, pid_callback_data: object | None) -> bool: ...
    def launch_uris_as_manager_with_fds(self, uris: GLib.List, launch_context: AppLaunchContext | None, spawn_flags: GLib.SpawnFlags, user_setup: GLib.SpawnChildSetupFunc | None, user_setup_data: object | None, pid_callback: DesktopAppLaunchCallback | None, pid_callback_data: object | None, stdin_fd: int, stdout_fd: int, stderr_fd: int) -> bool: ...
    def list_actions(self) -> list[str]: ...

class Emblem(GObject.Object, Icon): 
    @classmethod
    def new(cls, icon: Icon) -> Emblem: ...
    def get_icon(self) -> Icon: ...
    def get_origin(self) -> EmblemOrigin: ...

class EmblemedIcon(GObject.Object, Icon): 
    @classmethod
    def new(cls, icon: Icon, emblem: Emblem | None) -> EmblemedIcon: ...
    def add_emblem(self, emblem: Emblem) -> None: ...
    def clear_emblems(self) -> None: ...
    def get_emblems(self) -> GLib.List: ...
    def get_icon(self) -> Icon: ...

class FileEnumerator(GObject.Object): 
    def close(self, cancellable: Cancellable | None) -> bool: ...
    def close_async(self, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def close_finish(self, result: AsyncResult) -> bool: ...
    def get_child(self, info: FileInfo) -> File: ...
    def get_container(self) -> File: ...
    def has_pending(self) -> bool: ...
    def is_closed(self) -> bool: ...
    def iterate(self, out_info: FileInfo, out_child: File, cancellable: Cancellable | None) -> bool: ...
    def next_file(self, cancellable: Cancellable | None) -> FileInfo | None: ...
    def next_files_async(self, num_files: int, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def next_files_finish(self, result: AsyncResult) -> GLib.List: ...
    def set_pending(self, pending: bool) -> None: ...

class FileIOStream(IOStream, Seekable): 
    def get_etag(self) -> str | None: ...
    def query_info(self, attributes: str, cancellable: Cancellable | None) -> FileInfo: ...
    def query_info_async(self, attributes: str, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def query_info_finish(self, result: AsyncResult) -> FileInfo: ...

class FileIcon(GObject.Object, Icon, LoadableIcon): 
    @classmethod
    def new(cls, file: File) -> FileIcon: ...
    def get_file(self) -> File: ...

class FileInfo(GObject.Object): 
    @classmethod
    def new(cls) -> FileInfo: ...
    def clear_status(self) -> None: ...
    def copy_into(self, dest_info: FileInfo) -> None: ...
    def dup(self) -> FileInfo: ...
    def get_access_date_time(self) -> GLib.DateTime | None: ...
    def get_attribute_as_string(self, attribute: str) -> str | None: ...
    def get_attribute_boolean(self, attribute: str) -> bool: ...
    def get_attribute_byte_string(self, attribute: str) -> str | None: ...
    def get_attribute_data(self, attribute: str, type: FileAttributeType, value_pp: object, status: FileAttributeStatus) -> bool: ...
    def get_attribute_int32(self, attribute: str) -> int: ...
    def get_attribute_int64(self, attribute: str) -> int: ...
    def get_attribute_object(self, attribute: str) -> GObject.Object | None: ...
    def get_attribute_status(self, attribute: str) -> FileAttributeStatus: ...
    def get_attribute_string(self, attribute: str) -> str | None: ...
    def get_attribute_stringv(self, attribute: str) -> list[str] | None: ...
    def get_attribute_type(self, attribute: str) -> FileAttributeType: ...
    def get_attribute_uint32(self, attribute: str) -> int: ...
    def get_attribute_uint64(self, attribute: str) -> int: ...
    def get_content_type(self) -> str | None: ...
    def get_creation_date_time(self) -> GLib.DateTime | None: ...
    def get_deletion_date(self) -> GLib.DateTime | None: ...
    def get_display_name(self) -> str: ...
    def get_edit_name(self) -> str: ...
    def get_etag(self) -> str | None: ...
    def get_file_type(self) -> FileType: ...
    def get_icon(self) -> Icon | None: ...
    def get_is_backup(self) -> bool: ...
    def get_is_hidden(self) -> bool: ...
    def get_is_symlink(self) -> bool: ...
    def get_modification_date_time(self) -> GLib.DateTime | None: ...
    def get_modification_time(self, result: GLib.TimeVal) -> None: ...
    def get_name(self) -> filename: ...
    def get_size(self) -> int: ...
    def get_sort_order(self) -> int: ...
    def get_symbolic_icon(self) -> Icon | None: ...
    def get_symlink_target(self) -> str | None: ...
    def has_attribute(self, attribute: str) -> bool: ...
    def has_namespace(self, name_space: str) -> bool: ...
    def list_attributes(self, name_space: str | None) -> list[str] | None: ...
    def remove_attribute(self, attribute: str) -> None: ...
    def set_access_date_time(self, atime: GLib.DateTime) -> None: ...
    def set_attribute(self, attribute: str, type: FileAttributeType, value_p: object) -> None: ...
    def set_attribute_boolean(self, attribute: str, attr_value: bool) -> None: ...
    def set_attribute_byte_string(self, attribute: str, attr_value: str) -> None: ...
    def set_attribute_int32(self, attribute: str, attr_value: int) -> None: ...
    def set_attribute_int64(self, attribute: str, attr_value: int) -> None: ...
    def set_attribute_mask(self, mask: FileAttributeMatcher) -> None: ...
    def set_attribute_object(self, attribute: str, attr_value: GObject.Object) -> None: ...
    def set_attribute_status(self, attribute: str, status: FileAttributeStatus) -> bool: ...
    def set_attribute_string(self, attribute: str, attr_value: str) -> None: ...
    def set_attribute_stringv(self, attribute: str, attr_value: list[str]) -> None: ...
    def set_attribute_uint32(self, attribute: str, attr_value: int) -> None: ...
    def set_attribute_uint64(self, attribute: str, attr_value: int) -> None: ...
    def set_content_type(self, content_type: str) -> None: ...
    def set_creation_date_time(self, creation_time: GLib.DateTime) -> None: ...
    def set_display_name(self, display_name: str) -> None: ...
    def set_edit_name(self, edit_name: str) -> None: ...
    def set_file_type(self, type: FileType) -> None: ...
    def set_icon(self, icon: Icon) -> None: ...
    def set_is_hidden(self, is_hidden: bool) -> None: ...
    def set_is_symlink(self, is_symlink: bool) -> None: ...
    def set_modification_date_time(self, mtime: GLib.DateTime) -> None: ...
    def set_modification_time(self, mtime: GLib.TimeVal) -> None: ...
    def set_name(self, name: filename) -> None: ...
    def set_size(self, size: int) -> None: ...
    def set_sort_order(self, sort_order: int) -> None: ...
    def set_symbolic_icon(self, icon: Icon) -> None: ...
    def set_symlink_target(self, symlink_target: str) -> None: ...
    def unset_attribute_mask(self) -> None: ...

class FileInputStream(InputStream, Seekable): 
    def query_info(self, attributes: str, cancellable: Cancellable | None) -> FileInfo: ...
    def query_info_async(self, attributes: str, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def query_info_finish(self, result: AsyncResult) -> FileInfo: ...

class FileMonitor(GObject.Object): 
    def cancel(self) -> bool: ...
    def emit_event(self, child: File, other_file: File, event_type: FileMonitorEvent) -> None: ...
    def is_cancelled(self) -> bool: ...
    def set_rate_limit(self, limit_msecs: int) -> None: ...

class FileOutputStream(OutputStream, Seekable): 
    def get_etag(self) -> str | None: ...
    def query_info(self, attributes: str, cancellable: Cancellable | None) -> FileInfo: ...
    def query_info_async(self, attributes: str, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def query_info_finish(self, result: AsyncResult) -> FileInfo: ...

class FilenameCompleter(GObject.Object): 
    @classmethod
    def new(cls) -> FilenameCompleter: ...
    def get_completion_suffix(self, initial_text: str) -> str | None: ...
    def get_completions(self, initial_text: str) -> list[str]: ...
    def set_dirs_only(self, dirs_only: bool) -> None: ...

class FilterInputStream(InputStream): 
    def get_base_stream(self) -> InputStream: ...
    def get_close_base_stream(self) -> bool: ...
    def set_close_base_stream(self, close_base: bool) -> None: ...

class FilterOutputStream(OutputStream): 
    def get_base_stream(self) -> OutputStream: ...
    def get_close_base_stream(self) -> bool: ...
    def set_close_base_stream(self, close_base: bool) -> None: ...

class IOModule(GObject.TypeModule, GObject.TypePlugin): 
    @classmethod
    def new(cls, filename: filename) -> IOModule: ...
    @classmethod
    def query(cls) -> list[str]: ...
    def load(self) -> None: ...
    def unload(self) -> None: ...

class IOStream(GObject.Object): 
    @classmethod
    def splice_finish(cls, result: AsyncResult) -> bool: ...
    def clear_pending(self) -> None: ...
    def close(self, cancellable: Cancellable | None) -> bool: ...
    def close_async(self, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def close_finish(self, result: AsyncResult) -> bool: ...
    def get_input_stream(self) -> InputStream: ...
    def get_output_stream(self) -> OutputStream: ...
    def has_pending(self) -> bool: ...
    def is_closed(self) -> bool: ...
    def set_pending(self) -> bool: ...
    def splice_async(self, stream2: IOStream, flags: IOStreamSpliceFlags, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...

class InetAddress(GObject.Object): 
    @classmethod
    def new_any(cls, family: SocketFamily) -> InetAddress: ...
    def equal(self, other_address: InetAddress) -> bool: ...
    def get_family(self) -> SocketFamily: ...
    def get_is_any(self) -> bool: ...
    def get_is_link_local(self) -> bool: ...
    def get_is_loopback(self) -> bool: ...
    def get_is_mc_global(self) -> bool: ...
    def get_is_mc_link_local(self) -> bool: ...
    def get_is_mc_node_local(self) -> bool: ...
    def get_is_mc_org_local(self) -> bool: ...
    def get_is_mc_site_local(self) -> bool: ...
    def get_is_multicast(self) -> bool: ...
    def get_is_site_local(self) -> bool: ...
    def get_native_size(self) -> gsize: ...
    def to_bytes(self) -> int: ...
    def to_string(self) -> str: ...

class InetAddressMask(GObject.Object, Initable): 
    @classmethod
    def new(cls, addr: InetAddress, length: int) -> InetAddressMask: ...
    def equal(self, mask2: InetAddressMask) -> bool: ...
    def get_address(self) -> InetAddress: ...
    def get_family(self) -> SocketFamily: ...
    def get_length(self) -> int: ...
    def matches(self, address: InetAddress) -> bool: ...
    def to_string(self) -> str: ...

class InetSocketAddress(SocketAddress, SocketConnectable): 
    @classmethod
    def new(cls, address: InetAddress, port: int) -> SocketAddress: ...
    def get_address(self) -> InetAddress: ...
    def get_flowinfo(self) -> int: ...
    def get_port(self) -> int: ...
    def get_scope_id(self) -> int: ...

class InputStream(GObject.Object): 
    def clear_pending(self) -> None: ...
    def close(self, cancellable: Cancellable | None) -> bool: ...
    def close_async(self, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def close_finish(self, result: AsyncResult) -> bool: ...
    def has_pending(self) -> bool: ...
    def is_closed(self) -> bool: ...
    def read(self, buffer: list[int], count: gsize, cancellable: Cancellable | None) -> gssize: ...
    def read_all(self, buffer: list[int], count: gsize, bytes_read: gsize, cancellable: Cancellable | None) -> bool: ...
    def read_all_async(self, buffer: list[int], count: gsize, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def read_all_finish(self, result: AsyncResult, bytes_read: gsize) -> bool: ...
    def read_async(self, buffer: list[int], count: gsize, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def read_bytes(self, count: gsize, cancellable: Cancellable | None) -> GLib.Bytes: ...
    def read_bytes_async(self, count: gsize, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def read_bytes_finish(self, result: AsyncResult) -> GLib.Bytes: ...
    def read_finish(self, result: AsyncResult) -> gssize: ...
    def set_pending(self) -> bool: ...
    def skip(self, count: gsize, cancellable: Cancellable | None) -> gssize: ...
    def skip_async(self, count: gsize, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def skip_finish(self, result: AsyncResult) -> gssize: ...

class ListStore(GObject.Object, ListModel): 
    @classmethod
    def new(cls, item_type: GObject.Type) -> ListStore: ...
    def append(self, item: GObject.Object) -> None: ...
    def find(self, item: GObject.Object, position: int) -> bool: ...
    def find_with_equal_func(self, item: GObject.Object, equal_func: GLib.EqualFunc, position: int) -> bool: ...
    def find_with_equal_func_full(self, item: GObject.Object, equal_func: GLib.EqualFuncFull, user_data: object | None, position: int) -> bool: ...
    def insert(self, position: int, item: GObject.Object) -> None: ...
    def insert_sorted(self, item: GObject.Object, compare_func: GLib.CompareDataFunc, user_data: object | None) -> int: ...
    def remove(self, position: int) -> None: ...
    def remove_all(self) -> None: ...
    def sort(self, compare_func: GLib.CompareDataFunc, user_data: object | None) -> None: ...
    def splice(self, position: int, n_removals: int, additions: list[GObject.Object], n_additions: int) -> None: ...

class MemoryInputStream(InputStream, PollableInputStream, Seekable): 
    @classmethod
    def new(cls) -> InputStream: ...
    def add_bytes(self, bytes: GLib.Bytes) -> None: ...
    def add_data(self, data: list[int], len: gssize, destroy: GLib.DestroyNotify | None) -> None: ...

class MemoryOutputStream(OutputStream, PollableOutputStream, Seekable): 
    @classmethod
    def new(cls, data: object | None, size: gsize, realloc_function: ReallocFunc | None, destroy_function: GLib.DestroyNotify | None) -> OutputStream: ...
    def get_data(self) -> object | None: ...
    def get_data_size(self) -> gsize: ...
    def get_size(self) -> gsize: ...
    def steal_as_bytes(self) -> GLib.Bytes: ...
    def steal_data(self) -> object | None: ...

class Menu(MenuModel): 
    @classmethod
    def new(cls) -> Menu: ...
    def append(self, label: str | None, detailed_action: str | None) -> None: ...
    def append_item(self, item: MenuItem) -> None: ...
    def append_section(self, label: str | None, section: MenuModel) -> None: ...
    def append_submenu(self, label: str | None, submenu: MenuModel) -> None: ...
    def freeze(self) -> None: ...
    def insert(self, position: int, label: str | None, detailed_action: str | None) -> None: ...
    def insert_item(self, position: int, item: MenuItem) -> None: ...
    def insert_section(self, position: int, label: str | None, section: MenuModel) -> None: ...
    def insert_submenu(self, position: int, label: str | None, submenu: MenuModel) -> None: ...
    def prepend(self, label: str | None, detailed_action: str | None) -> None: ...
    def prepend_item(self, item: MenuItem) -> None: ...
    def prepend_section(self, label: str | None, section: MenuModel) -> None: ...
    def prepend_submenu(self, label: str | None, submenu: MenuModel) -> None: ...
    def remove(self, position: int) -> None: ...
    def remove_all(self) -> None: ...

class MenuAttributeIter(GObject.Object): 
    def get_name(self) -> str: ...
    def get_next(self, out_name: str, value: GLib.Variant) -> bool: ...
    def get_value(self) -> GLib.Variant: ...
    def next(self) -> bool: ...

class MenuItem(GObject.Object): 
    @classmethod
    def new(cls, label: str | None, detailed_action: str | None) -> MenuItem: ...
    def get_attribute(self, attribute: str, format_string: str) -> bool: ...
    def get_attribute_value(self, attribute: str, expected_type: GLib.VariantType | None) -> GLib.Variant | None: ...
    def get_link(self, link: str) -> MenuModel | None: ...
    def set_action_and_target(self, action: str | None, format_string: str | None) -> None: ...
    def set_action_and_target_value(self, action: str | None, target_value: GLib.Variant | None) -> None: ...
    def set_attribute(self, attribute: str, format_string: str | None) -> None: ...
    def set_attribute_value(self, attribute: str, value: GLib.Variant | None) -> None: ...
    def set_detailed_action(self, detailed_action: str) -> None: ...
    def set_icon(self, icon: Icon) -> None: ...
    def set_label(self, label: str | None) -> None: ...
    def set_link(self, link: str, model: MenuModel | None) -> None: ...
    def set_section(self, section: MenuModel | None) -> None: ...
    def set_submenu(self, submenu: MenuModel | None) -> None: ...

class MenuLinkIter(GObject.Object): 
    def get_name(self) -> str: ...
    def get_next(self, out_link: str, value: MenuModel) -> bool: ...
    def get_value(self) -> MenuModel: ...
    def next(self) -> bool: ...

class MenuModel(GObject.Object): 
    def get_item_attribute(self, item_index: int, attribute: str, format_string: str) -> bool: ...
    def get_item_attribute_value(self, item_index: int, attribute: str, expected_type: GLib.VariantType | None) -> GLib.Variant | None: ...
    def get_item_link(self, item_index: int, link: str) -> MenuModel | None: ...
    def get_n_items(self) -> int: ...
    def is_mutable(self) -> bool: ...
    def items_changed(self, position: int, removed: int, added: int) -> None: ...
    def iterate_item_attributes(self, item_index: int) -> MenuAttributeIter: ...
    def iterate_item_links(self, item_index: int) -> MenuLinkIter: ...

class MountOperation(GObject.Object): 
    @classmethod
    def new(cls) -> MountOperation: ...
    def get_anonymous(self) -> bool: ...
    def get_choice(self) -> int: ...
    def get_domain(self) -> str | None: ...
    def get_is_tcrypt_hidden_volume(self) -> bool: ...
    def get_is_tcrypt_system_volume(self) -> bool: ...
    def get_password(self) -> str | None: ...
    def get_password_save(self) -> PasswordSave: ...
    def get_pim(self) -> int: ...
    def get_username(self) -> str | None: ...
    def reply(self, result: MountOperationResult) -> None: ...
    def set_anonymous(self, anonymous: bool) -> None: ...
    def set_choice(self, choice: int) -> None: ...
    def set_domain(self, domain: str | None) -> None: ...
    def set_is_tcrypt_hidden_volume(self, hidden_volume: bool) -> None: ...
    def set_is_tcrypt_system_volume(self, system_volume: bool) -> None: ...
    def set_password(self, password: str | None) -> None: ...
    def set_password_save(self, save: PasswordSave) -> None: ...
    def set_pim(self, pim: int) -> None: ...
    def set_username(self, username: str | None) -> None: ...

class NativeSocketAddress(SocketAddress, SocketConnectable): 
    @classmethod
    def new(cls, native: object | None, len: gsize) -> SocketAddress: ...

class NativeVolumeMonitor(VolumeMonitor): ...

class NetworkAddress(GObject.Object, SocketConnectable): 
    @classmethod
    def new(cls, hostname: str, port: int) -> NetworkAddress: ...
    @classmethod
    def parse(cls, host_and_port: str, default_port: int) -> NetworkAddress: ...
    @classmethod
    def parse_uri(cls, uri: str, default_port: int) -> NetworkAddress: ...
    def get_hostname(self) -> str: ...
    def get_port(self) -> int: ...
    def get_scheme(self) -> str | None: ...

class NetworkService(GObject.Object, SocketConnectable): 
    @classmethod
    def new(cls, service: str, protocol: str, domain: str) -> NetworkService: ...
    def get_domain(self) -> str: ...
    def get_protocol(self) -> str: ...
    def get_scheme(self) -> str: ...
    def get_service(self) -> str: ...
    def set_scheme(self, scheme: str) -> None: ...

class Notification(GObject.Object): 
    @classmethod
    def new(cls, title: str) -> Notification: ...
    def add_button(self, label: str, detailed_action: str) -> None: ...
    def add_button_with_target(self, label: str, action: str, target_format: str | None) -> None: ...
    def add_button_with_target_value(self, label: str, action: str, target: GLib.Variant | None) -> None: ...
    def set_body(self, body: str | None) -> None: ...
    def set_category(self, category: str | None) -> None: ...
    def set_default_action(self, detailed_action: str) -> None: ...
    def set_default_action_and_target(self, action: str, target_format: str | None) -> None: ...
    def set_default_action_and_target_value(self, action: str, target: GLib.Variant | None) -> None: ...
    def set_icon(self, icon: Icon) -> None: ...
    def set_priority(self, priority: NotificationPriority) -> None: ...
    def set_title(self, title: str) -> None: ...
    def set_urgent(self, urgent: bool) -> None: ...

class OutputStream(GObject.Object): 
    def clear_pending(self) -> None: ...
    def close(self, cancellable: Cancellable | None) -> bool: ...
    def close_async(self, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def close_finish(self, result: AsyncResult) -> bool: ...
    def flush(self, cancellable: Cancellable | None) -> bool: ...
    def flush_async(self, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def flush_finish(self, result: AsyncResult) -> bool: ...
    def has_pending(self) -> bool: ...
    def is_closed(self) -> bool: ...
    def is_closing(self) -> bool: ...
    def printf(self, bytes_written: gsize, cancellable: Cancellable | None, error: GLib.Error, format: str) -> bool: ...
    def set_pending(self) -> bool: ...
    def splice(self, source: InputStream, flags: OutputStreamSpliceFlags, cancellable: Cancellable | None) -> gssize: ...
    def splice_async(self, source: InputStream, flags: OutputStreamSpliceFlags, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def splice_finish(self, result: AsyncResult) -> gssize: ...
    def vprintf(self, bytes_written: gsize, cancellable: Cancellable | None, error: GLib.Error, format: str, args: va_list) -> bool: ...
    def write(self, buffer: list[int], count: gsize, cancellable: Cancellable | None) -> gssize: ...
    def write_all(self, buffer: list[int], count: gsize, bytes_written: gsize, cancellable: Cancellable | None) -> bool: ...
    def write_all_async(self, buffer: list[int], count: gsize, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def write_all_finish(self, result: AsyncResult, bytes_written: gsize) -> bool: ...
    def write_async(self, buffer: list[int], count: gsize, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def write_bytes(self, bytes: GLib.Bytes, cancellable: Cancellable | None) -> gssize: ...
    def write_bytes_async(self, bytes: GLib.Bytes, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def write_bytes_finish(self, result: AsyncResult) -> gssize: ...
    def write_finish(self, result: AsyncResult) -> gssize: ...
    def writev(self, vectors: list[OutputVector], n_vectors: gsize, bytes_written: gsize, cancellable: Cancellable | None) -> bool: ...
    def writev_all(self, vectors: list[OutputVector], n_vectors: gsize, bytes_written: gsize, cancellable: Cancellable | None) -> bool: ...
    def writev_all_async(self, vectors: list[OutputVector], n_vectors: gsize, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def writev_all_finish(self, result: AsyncResult, bytes_written: gsize) -> bool: ...
    def writev_async(self, vectors: list[OutputVector], n_vectors: gsize, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def writev_finish(self, result: AsyncResult, bytes_written: gsize) -> bool: ...

class Permission(GObject.Object): 
    def acquire(self, cancellable: Cancellable | None) -> bool: ...
    def acquire_async(self, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def acquire_finish(self, result: AsyncResult) -> bool: ...
    def get_allowed(self) -> bool: ...
    def get_can_acquire(self) -> bool: ...
    def get_can_release(self) -> bool: ...
    def impl_update(self, allowed: bool, can_acquire: bool, can_release: bool) -> None: ...
    def release(self, cancellable: Cancellable | None) -> bool: ...
    def release_async(self, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def release_finish(self, result: AsyncResult) -> bool: ...

class PropertyAction(GObject.Object, Action): 
    @classmethod
    def new(cls, name: str, object: GObject.Object, property_name: str) -> PropertyAction: ...

class ProxyAddress(InetSocketAddress, SocketConnectable): 
    @classmethod
    def new(cls, inetaddr: InetAddress, port: int, protocol: str, dest_hostname: str, dest_port: int, username: str | None, password: str | None) -> SocketAddress: ...
    def get_destination_hostname(self) -> str: ...
    def get_destination_port(self) -> int: ...
    def get_destination_protocol(self) -> str: ...
    def get_password(self) -> str | None: ...
    def get_protocol(self) -> str: ...
    def get_uri(self) -> str | None: ...
    def get_username(self) -> str | None: ...

class ProxyAddressEnumerator(SocketAddressEnumerator): ...

class Resolver(GObject.Object): 
    @classmethod
    def free_addresses(cls, addresses: GLib.List) -> None: ...
    @classmethod
    def free_targets(cls, targets: GLib.List) -> None: ...
    @classmethod
    def get_default(cls) -> Resolver: ...
    def lookup_by_address(self, address: InetAddress, cancellable: Cancellable | None) -> str: ...
    def lookup_by_address_async(self, address: InetAddress, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def lookup_by_address_finish(self, result: AsyncResult) -> str: ...
    def lookup_by_name(self, hostname: str, cancellable: Cancellable | None) -> GLib.List: ...
    def lookup_by_name_async(self, hostname: str, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def lookup_by_name_finish(self, result: AsyncResult) -> GLib.List: ...
    def lookup_by_name_with_flags(self, hostname: str, flags: ResolverNameLookupFlags, cancellable: Cancellable | None) -> GLib.List: ...
    def lookup_by_name_with_flags_async(self, hostname: str, flags: ResolverNameLookupFlags, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def lookup_by_name_with_flags_finish(self, result: AsyncResult) -> GLib.List: ...
    def lookup_records(self, rrname: str, record_type: ResolverRecordType, cancellable: Cancellable | None) -> GLib.List: ...
    def lookup_records_async(self, rrname: str, record_type: ResolverRecordType, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def lookup_records_finish(self, result: AsyncResult) -> GLib.List: ...
    def lookup_service(self, service: str, protocol: str, domain: str, cancellable: Cancellable | None) -> GLib.List: ...
    def lookup_service_async(self, service: str, protocol: str, domain: str, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def lookup_service_finish(self, result: AsyncResult) -> GLib.List: ...
    def set_default(self) -> None: ...

class Settings(GObject.Object): 
    @classmethod
    def new(cls, schema_id: str) -> Settings: ...
    @classmethod
    def list_relocatable_schemas(cls) -> list[str]: ...
    @classmethod
    def list_schemas(cls) -> list[str]: ...
    @classmethod
    def sync(cls) -> None: ...
    @classmethod
    def unbind(cls, object: GObject.Object, property: str) -> None: ...
    def apply(self) -> None: ...
    def bind(self, key: str, object: GObject.Object, property: str, flags: SettingsBindFlags) -> None: ...
    def bind_with_mapping(self, key: str, object: GObject.Object, property: str, flags: SettingsBindFlags, get_mapping: SettingsBindGetMapping, set_mapping: SettingsBindSetMapping, user_data: object | None, destroy: GLib.DestroyNotify) -> None: ...
    def bind_writable(self, key: str, object: GObject.Object, property: str, inverted: bool) -> None: ...
    def create_action(self, key: str) -> Action: ...
    def delay(self) -> None: ...
    def get(self, key: str, format: str) -> None: ...
    def get_boolean(self, key: str) -> bool: ...
    def get_child(self, name: str) -> Settings: ...
    def get_default_value(self, key: str) -> GLib.Variant | None: ...
    def get_double(self, key: str) -> float: ...
    def get_enum(self, key: str) -> int: ...
    def get_flags(self, key: str) -> int: ...
    def get_has_unapplied(self) -> bool: ...
    def get_int(self, key: str) -> int: ...
    def get_int64(self, key: str) -> int: ...
    def get_mapped(self, key: str, mapping: SettingsGetMapping, user_data: object | None) -> object | None: ...
    def get_range(self, key: str) -> GLib.Variant: ...
    def get_string(self, key: str) -> str: ...
    def get_strv(self, key: str) -> list[str]: ...
    def get_uint(self, key: str) -> int: ...
    def get_uint64(self, key: str) -> int: ...
    def get_user_value(self, key: str) -> GLib.Variant | None: ...
    def get_value(self, key: str) -> GLib.Variant: ...
    def is_writable(self, name: str) -> bool: ...
    def list_children(self) -> list[str]: ...
    def list_keys(self) -> list[str]: ...
    def range_check(self, key: str, value: GLib.Variant) -> bool: ...
    def reset(self, key: str) -> None: ...
    def revert(self) -> None: ...
    def set(self, key: str, format: str) -> bool: ...
    def set_boolean(self, key: str, value: bool) -> bool: ...
    def set_double(self, key: str, value: float) -> bool: ...
    def set_enum(self, key: str, value: int) -> bool: ...
    def set_flags(self, key: str, value: int) -> bool: ...
    def set_int(self, key: str, value: int) -> bool: ...
    def set_int64(self, key: str, value: int) -> bool: ...
    def set_string(self, key: str, value: str) -> bool: ...
    def set_strv(self, key: str, value: list[str] | None) -> bool: ...
    def set_uint(self, key: str, value: int) -> bool: ...
    def set_uint64(self, key: str, value: int) -> bool: ...
    def set_value(self, key: str, value: GLib.Variant) -> bool: ...

class SettingsBackend(GObject.Object): 
    @classmethod
    def flatten_tree(cls, tree: GLib.Tree, path: str, keys: list[str], values: list[GLib.Variant]) -> None: ...
    @classmethod
    def get_default(cls) -> SettingsBackend: ...
    def changed(self, key: str, origin_tag: object | None) -> None: ...
    def changed_tree(self, tree: GLib.Tree, origin_tag: object | None) -> None: ...
    def keys_changed(self, path: str, items: list[str], origin_tag: object | None) -> None: ...
    def path_changed(self, path: str, origin_tag: object | None) -> None: ...
    def path_writable_changed(self, path: str) -> None: ...
    def writable_changed(self, key: str) -> None: ...

class SimpleAction(GObject.Object, Action): 
    @classmethod
    def new(cls, name: str, parameter_type: GLib.VariantType | None) -> SimpleAction: ...
    def set_enabled(self, enabled: bool) -> None: ...
    def set_state(self, value: GLib.Variant) -> None: ...
    def set_state_hint(self, state_hint: GLib.Variant | None) -> None: ...

class SimpleActionGroup(GObject.Object, ActionGroup, ActionMap): 
    @classmethod
    def new(cls) -> SimpleActionGroup: ...
    def add_entries(self, entries: list[ActionEntry], n_entries: int, user_data: object | None) -> None: ...
    def insert(self, action: Action) -> None: ...
    def lookup(self, action_name: str) -> Action: ...
    def remove(self, action_name: str) -> None: ...

class SimpleAsyncResult(GObject.Object, AsyncResult): 
    @classmethod
    def new(cls, source_object: GObject.Object | None, callback: AsyncReadyCallback | None, user_data: object | None, source_tag: object | None) -> SimpleAsyncResult: ...
    @classmethod
    def is_valid(cls, result: AsyncResult, source: GObject.Object | None, source_tag: object | None) -> bool: ...
    def complete(self) -> None: ...
    def complete_in_idle(self) -> None: ...
    def get_op_res_gboolean(self) -> bool: ...
    def get_op_res_gpointer(self) -> object | None: ...
    def get_op_res_gssize(self) -> gssize: ...
    def get_source_tag(self) -> object | None: ...
    def propagate_error(self) -> bool: ...
    def run_in_thread(self, func: SimpleAsyncThreadFunc, io_priority: int, cancellable: Cancellable | None) -> None: ...
    def set_check_cancellable(self, check_cancellable: Cancellable | None) -> None: ...
    def set_error(self, domain: GLib.Quark, code: int, format: str) -> None: ...
    def set_error_va(self, domain: GLib.Quark, code: int, format: str, args: va_list) -> None: ...
    def set_from_error(self, error: GLib.Error) -> None: ...
    def set_handle_cancellation(self, handle_cancellation: bool) -> None: ...
    def set_op_res_gboolean(self, op_res: bool) -> None: ...
    def set_op_res_gpointer(self, op_res: object | None, destroy_op_res: GLib.DestroyNotify) -> None: ...
    def set_op_res_gssize(self, op_res: gssize) -> None: ...
    def take_error(self, error: GLib.Error) -> None: ...

class SimpleIOStream(IOStream): 
    @classmethod
    def new(cls, input_stream: InputStream, output_stream: OutputStream) -> IOStream: ...

class SimplePermission(Permission): 
    @classmethod
    def new(cls, allowed: bool) -> Permission: ...

class SimpleProxyResolver(GObject.Object, ProxyResolver): 
    @classmethod
    def new(cls, default_proxy: str | None, ignore_hosts: list[str] | None) -> ProxyResolver: ...
    def set_default_proxy(self, default_proxy: str | None) -> None: ...
    def set_ignore_hosts(self, ignore_hosts: list[str]) -> None: ...
    def set_uri_proxy(self, uri_scheme: str, proxy: str) -> None: ...

class Socket(GObject.Object, DatagramBased, Initable): 
    @classmethod
    def new(cls, family: SocketFamily, type: SocketType, protocol: SocketProtocol) -> Socket: ...
    def accept(self, cancellable: Cancellable | None) -> Socket: ...
    def bind(self, address: SocketAddress, allow_reuse: bool) -> bool: ...
    def check_connect_result(self) -> bool: ...
    def close(self) -> bool: ...
    def condition_check(self, condition: GLib.IOCondition) -> GLib.IOCondition: ...
    def condition_timed_wait(self, condition: GLib.IOCondition, timeout_us: int, cancellable: Cancellable | None) -> bool: ...
    def condition_wait(self, condition: GLib.IOCondition, cancellable: Cancellable | None) -> bool: ...
    def connect(self, address: SocketAddress, cancellable: Cancellable | None) -> bool: ...
    def connection_factory_create_connection(self) -> SocketConnection: ...
    def create_source(self, condition: GLib.IOCondition, cancellable: Cancellable | None) -> GLib.Source: ...
    def get_available_bytes(self) -> gssize: ...
    def get_blocking(self) -> bool: ...
    def get_broadcast(self) -> bool: ...
    def get_credentials(self) -> Credentials: ...
    def get_family(self) -> SocketFamily: ...
    def get_fd(self) -> int: ...
    def get_keepalive(self) -> bool: ...
    def get_listen_backlog(self) -> int: ...
    def get_local_address(self) -> SocketAddress: ...
    def get_multicast_loopback(self) -> bool: ...
    def get_multicast_ttl(self) -> int: ...
    def get_option(self, level: int, optname: int, value: int) -> bool: ...
    def get_protocol(self) -> SocketProtocol: ...
    def get_remote_address(self) -> SocketAddress: ...
    def get_socket_type(self) -> SocketType: ...
    def get_timeout(self) -> int: ...
    def get_ttl(self) -> int: ...
    def is_closed(self) -> bool: ...
    def is_connected(self) -> bool: ...
    def join_multicast_group(self, group: InetAddress, source_specific: bool, iface: str | None) -> bool: ...
    def join_multicast_group_ssm(self, group: InetAddress, source_specific: InetAddress | None, iface: str | None) -> bool: ...
    def leave_multicast_group(self, group: InetAddress, source_specific: bool, iface: str | None) -> bool: ...
    def leave_multicast_group_ssm(self, group: InetAddress, source_specific: InetAddress | None, iface: str | None) -> bool: ...
    def listen(self) -> bool: ...
    def receive(self, buffer: list[int], size: gsize, cancellable: Cancellable | None) -> gssize: ...
    def receive_from(self, address: SocketAddress, buffer: list[int], size: gsize, cancellable: Cancellable | None) -> gssize: ...
    def receive_message(self, address: SocketAddress, vectors: list[InputVector], num_vectors: int, messages: list[SocketControlMessage] | None, num_messages: int, flags: int, cancellable: Cancellable | None) -> gssize: ...
    def receive_messages(self, messages: list[InputMessage], num_messages: int, flags: int, cancellable: Cancellable | None) -> int: ...
    def receive_with_blocking(self, buffer: list[int], size: gsize, blocking: bool, cancellable: Cancellable | None) -> gssize: ...
    def send(self, buffer: list[int], size: gsize, cancellable: Cancellable | None) -> gssize: ...
    def send_message(self, address: SocketAddress | None, vectors: list[OutputVector], num_vectors: int, messages: list[SocketControlMessage] | None, num_messages: int, flags: int, cancellable: Cancellable | None) -> gssize: ...
    def send_message_with_timeout(self, address: SocketAddress | None, vectors: list[OutputVector], num_vectors: int, messages: list[SocketControlMessage] | None, num_messages: int, flags: int, timeout_us: int, bytes_written: gsize, cancellable: Cancellable | None) -> PollableReturn: ...
    def send_messages(self, messages: list[OutputMessage], num_messages: int, flags: int, cancellable: Cancellable | None) -> int: ...
    def send_to(self, address: SocketAddress | None, buffer: list[int], size: gsize, cancellable: Cancellable | None) -> gssize: ...
    def send_with_blocking(self, buffer: list[int], size: gsize, blocking: bool, cancellable: Cancellable | None) -> gssize: ...
    def set_blocking(self, blocking: bool) -> None: ...
    def set_broadcast(self, broadcast: bool) -> None: ...
    def set_keepalive(self, keepalive: bool) -> None: ...
    def set_listen_backlog(self, backlog: int) -> None: ...
    def set_multicast_loopback(self, loopback: bool) -> None: ...
    def set_multicast_ttl(self, ttl: int) -> None: ...
    def set_option(self, level: int, optname: int, value: int) -> bool: ...
    def set_timeout(self, timeout: int) -> None: ...
    def set_ttl(self, ttl: int) -> None: ...
    def shutdown(self, shutdown_read: bool, shutdown_write: bool) -> bool: ...
    def speaks_ipv4(self) -> bool: ...

class SocketAddress(GObject.Object, SocketConnectable): 
    @classmethod
    def new_from_native(cls, native: object, len: gsize) -> SocketAddress: ...
    def get_family(self) -> SocketFamily: ...
    def get_native_size(self) -> gssize: ...
    def to_native(self, dest: object | None, destlen: gsize) -> bool: ...

class SocketAddressEnumerator(GObject.Object): 
    def next(self, cancellable: Cancellable | None) -> SocketAddress | None: ...
    def next_async(self, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def next_finish(self, result: AsyncResult) -> SocketAddress | None: ...

class SocketClient(GObject.Object): 
    @classmethod
    def new(cls) -> SocketClient: ...
    def add_application_proxy(self, protocol: str) -> None: ...
    def connect(self, connectable: SocketConnectable, cancellable: Cancellable | None) -> SocketConnection: ...
    def connect_async(self, connectable: SocketConnectable, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def connect_finish(self, result: AsyncResult) -> SocketConnection: ...
    def connect_to_host(self, host_and_port: str, default_port: int, cancellable: Cancellable | None) -> SocketConnection: ...
    def connect_to_host_async(self, host_and_port: str, default_port: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def connect_to_host_finish(self, result: AsyncResult) -> SocketConnection: ...
    def connect_to_service(self, domain: str, service: str, cancellable: Cancellable | None) -> SocketConnection: ...
    def connect_to_service_async(self, domain: str, service: str, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def connect_to_service_finish(self, result: AsyncResult) -> SocketConnection: ...
    def connect_to_uri(self, uri: str, default_port: int, cancellable: Cancellable | None) -> SocketConnection: ...
    def connect_to_uri_async(self, uri: str, default_port: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def connect_to_uri_finish(self, result: AsyncResult) -> SocketConnection: ...
    def get_enable_proxy(self) -> bool: ...
    def get_family(self) -> SocketFamily: ...
    def get_local_address(self) -> SocketAddress | None: ...
    def get_protocol(self) -> SocketProtocol: ...
    def get_proxy_resolver(self) -> ProxyResolver: ...
    def get_socket_type(self) -> SocketType: ...
    def get_timeout(self) -> int: ...
    def get_tls(self) -> bool: ...
    def get_tls_validation_flags(self) -> TlsCertificateFlags: ...
    def set_enable_proxy(self, enable: bool) -> None: ...
    def set_family(self, family: SocketFamily) -> None: ...
    def set_local_address(self, address: SocketAddress | None) -> None: ...
    def set_protocol(self, protocol: SocketProtocol) -> None: ...
    def set_proxy_resolver(self, proxy_resolver: ProxyResolver | None) -> None: ...
    def set_socket_type(self, type: SocketType) -> None: ...
    def set_timeout(self, timeout: int) -> None: ...
    def set_tls(self, tls: bool) -> None: ...
    def set_tls_validation_flags(self, flags: TlsCertificateFlags) -> None: ...

class SocketConnection(IOStream): 
    @classmethod
    def factory_lookup_type(cls, family: SocketFamily, type: SocketType, protocol_id: int) -> GObject.Type: ...
    @classmethod
    def factory_register_type(cls, g_type: GObject.Type, family: SocketFamily, type: SocketType, protocol: int) -> None: ...
    def connect(self, address: SocketAddress, cancellable: Cancellable | None) -> bool: ...
    def connect_async(self, address: SocketAddress, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def connect_finish(self, result: AsyncResult) -> bool: ...
    def get_local_address(self) -> SocketAddress: ...
    def get_remote_address(self) -> SocketAddress: ...
    def get_socket(self) -> Socket: ...
    def is_connected(self) -> bool: ...

class SocketControlMessage(GObject.Object): 
    @classmethod
    def deserialize(cls, level: int, type: int, size: gsize, data: list[int]) -> SocketControlMessage: ...
    def get_level(self) -> int: ...
    def get_msg_type(self) -> int: ...
    def get_size(self) -> gsize: ...
    def serialize(self, data: object) -> None: ...

class SocketListener(GObject.Object): 
    @classmethod
    def new(cls) -> SocketListener: ...
    def accept(self, source_object: GObject.Object | None, cancellable: Cancellable | None) -> SocketConnection: ...
    def accept_async(self, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def accept_finish(self, result: AsyncResult, source_object: GObject.Object | None) -> SocketConnection: ...
    def accept_socket(self, source_object: GObject.Object | None, cancellable: Cancellable | None) -> Socket: ...
    def accept_socket_async(self, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def accept_socket_finish(self, result: AsyncResult, source_object: GObject.Object | None) -> Socket: ...
    def add_address(self, address: SocketAddress, type: SocketType, protocol: SocketProtocol, source_object: GObject.Object | None, effective_address: SocketAddress) -> bool: ...
    def add_any_inet_port(self, source_object: GObject.Object | None) -> int: ...
    def add_inet_port(self, port: int, source_object: GObject.Object | None) -> bool: ...
    def add_socket(self, socket: Socket, source_object: GObject.Object | None) -> bool: ...
    def close(self) -> None: ...
    def set_backlog(self, listen_backlog: int) -> None: ...

class SocketService(SocketListener): 
    @classmethod
    def new(cls) -> SocketService: ...
    def is_active(self) -> bool: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...

class Subprocess(GObject.Object, Initable): 
    @classmethod
    def new(cls, flags: SubprocessFlags, error: GLib.Error | None, argv0: str) -> Subprocess: ...
    def communicate(self, stdin_buf: GLib.Bytes | None, cancellable: Cancellable | None, stdout_buf: GLib.Bytes | None, stderr_buf: GLib.Bytes | None) -> bool: ...
    def communicate_async(self, stdin_buf: GLib.Bytes | None, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def communicate_finish(self, result: AsyncResult, stdout_buf: GLib.Bytes | None, stderr_buf: GLib.Bytes | None) -> bool: ...
    def communicate_utf8(self, stdin_buf: str | None, cancellable: Cancellable | None, stdout_buf: str | None, stderr_buf: str | None) -> bool: ...
    def communicate_utf8_async(self, stdin_buf: str | None, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def communicate_utf8_finish(self, result: AsyncResult, stdout_buf: str | None, stderr_buf: str | None) -> bool: ...
    def force_exit(self) -> None: ...
    def get_exit_status(self) -> int: ...
    def get_identifier(self) -> str | None: ...
    def get_if_exited(self) -> bool: ...
    def get_if_signaled(self) -> bool: ...
    def get_status(self) -> int: ...
    def get_stderr_pipe(self) -> InputStream | None: ...
    def get_stdin_pipe(self) -> OutputStream | None: ...
    def get_stdout_pipe(self) -> InputStream | None: ...
    def get_successful(self) -> bool: ...
    def get_term_sig(self) -> int: ...
    def send_signal(self, signal_num: int) -> None: ...
    def wait(self, cancellable: Cancellable | None) -> bool: ...
    def wait_async(self, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def wait_check(self, cancellable: Cancellable | None) -> bool: ...
    def wait_check_async(self, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def wait_check_finish(self, result: AsyncResult) -> bool: ...
    def wait_finish(self, result: AsyncResult) -> bool: ...

class SubprocessLauncher(GObject.Object): 
    @classmethod
    def new(cls, flags: SubprocessFlags) -> SubprocessLauncher: ...
    def close(self) -> None: ...
    def getenv(self, variable: filename) -> filename | None: ...
    def set_child_setup(self, child_setup: GLib.SpawnChildSetupFunc, user_data: object | None, destroy_notify: GLib.DestroyNotify) -> None: ...
    def set_cwd(self, cwd: filename) -> None: ...
    def set_environ(self, env: list[filename]) -> None: ...
    def set_flags(self, flags: SubprocessFlags) -> None: ...
    def set_stderr_file_path(self, path: filename | None) -> None: ...
    def set_stdin_file_path(self, path: str) -> None: ...
    def set_stdout_file_path(self, path: filename | None) -> None: ...
    def setenv(self, variable: filename, value: filename, overwrite: bool) -> None: ...
    def spawn(self, error: GLib.Error, argv0: str) -> Subprocess: ...
    def spawnv(self, argv: list[filename]) -> Subprocess: ...
    def take_fd(self, source_fd: int, target_fd: int) -> None: ...
    def take_stderr_fd(self, fd: int) -> None: ...
    def take_stdin_fd(self, fd: int) -> None: ...
    def take_stdout_fd(self, fd: int) -> None: ...
    def unsetenv(self, variable: filename) -> None: ...

class Task(GObject.Object, AsyncResult): 
    @classmethod
    def new(cls, source_object: GObject.Object | None, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, callback_data: object | None) -> Task: ...
    @classmethod
    def is_valid(cls, result: AsyncResult, source_object: GObject.Object | None) -> bool: ...
    @classmethod
    def report_error(cls, source_object: GObject.Object | None, callback: AsyncReadyCallback | None, callback_data: object | None, source_tag: object | None, error: GLib.Error) -> None: ...
    @classmethod
    def report_new_error(cls, source_object: GObject.Object | None, callback: AsyncReadyCallback | None, callback_data: object | None, source_tag: object | None, domain: GLib.Quark, code: int, format: str) -> None: ...
    def attach_source(self, source: GLib.Source, callback: GLib.SourceFunc) -> None: ...
    def get_cancellable(self) -> Cancellable: ...
    def get_check_cancellable(self) -> bool: ...
    def get_completed(self) -> bool: ...
    def get_context(self) -> GLib.MainContext: ...
    def get_name(self) -> str | None: ...
    def get_priority(self) -> int: ...
    def get_return_on_cancel(self) -> bool: ...
    def get_source_object(self) -> GObject.Object | None: ...
    def get_source_tag(self) -> object | None: ...
    def get_task_data(self) -> object | None: ...
    def had_error(self) -> bool: ...
    def propagate_boolean(self) -> bool: ...
    def propagate_int(self) -> gssize: ...
    def propagate_pointer(self) -> object | None: ...
    def propagate_value(self, value: GObject.Value) -> bool: ...
    def return_boolean(self, result: bool) -> None: ...
    def return_error(self, error: GLib.Error) -> None: ...
    def return_error_if_cancelled(self) -> bool: ...
    def return_int(self, result: gssize) -> None: ...
    def return_new_error(self, domain: GLib.Quark, code: int, format: str) -> None: ...
    def return_pointer(self, result: object | None, result_destroy: GLib.DestroyNotify | None) -> None: ...
    def return_value(self, result: GObject.Value | None) -> None: ...
    def run_in_thread(self, task_func: TaskThreadFunc) -> None: ...
    def run_in_thread_sync(self, task_func: TaskThreadFunc) -> None: ...
    def set_check_cancellable(self, check_cancellable: bool) -> None: ...
    def set_name(self, name: str | None) -> None: ...
    def set_priority(self, priority: int) -> None: ...
    def set_return_on_cancel(self, return_on_cancel: bool) -> bool: ...
    def set_source_tag(self, source_tag: object | None) -> None: ...
    def set_task_data(self, task_data: object | None, task_data_destroy: GLib.DestroyNotify | None) -> None: ...

class TcpConnection(SocketConnection): 
    def get_graceful_disconnect(self) -> bool: ...
    def set_graceful_disconnect(self, graceful_disconnect: bool) -> None: ...

class TcpWrapperConnection(TcpConnection): 
    @classmethod
    def new(cls, base_io_stream: IOStream, socket: Socket) -> SocketConnection: ...
    def get_base_io_stream(self) -> IOStream: ...

class TestDBus(GObject.Object): 
    @classmethod
    def new(cls, flags: TestDBusFlags) -> TestDBus: ...
    @classmethod
    def unset(cls) -> None: ...
    def add_service_dir(self, path: str) -> None: ...
    def down(self) -> None: ...
    def get_bus_address(self) -> str | None: ...
    def get_flags(self) -> TestDBusFlags: ...
    def stop(self) -> None: ...
    def up(self) -> None: ...

class ThemedIcon(GObject.Object, Icon): 
    @classmethod
    def new(cls, iconname: str) -> ThemedIcon: ...
    def append_name(self, iconname: str) -> None: ...
    def get_names(self) -> list[str]: ...
    def prepend_name(self, iconname: str) -> None: ...

class ThreadedSocketService(SocketService): 
    @classmethod
    def new(cls, max_threads: int) -> SocketService: ...

class TlsCertificate(GObject.Object): 
    @classmethod
    def new_from_file(cls, file: filename) -> TlsCertificate: ...
    @classmethod
    def list_new_from_file(cls, file: filename) -> GLib.List: ...
    def get_dns_names(self) -> list[GLib.Bytes] | None: ...
    def get_ip_addresses(self) -> list[InetAddress] | None: ...
    def get_issuer(self) -> TlsCertificate | None: ...
    def get_issuer_name(self) -> str | None: ...
    def get_not_valid_after(self) -> GLib.DateTime | None: ...
    def get_not_valid_before(self) -> GLib.DateTime | None: ...
    def get_subject_name(self) -> str | None: ...
    def is_same(self, cert_two: TlsCertificate) -> bool: ...
    def verify(self, identity: SocketConnectable | None, trusted_ca: TlsCertificate | None) -> TlsCertificateFlags: ...

class TlsConnection(IOStream): 
    def emit_accept_certificate(self, peer_cert: TlsCertificate, errors: TlsCertificateFlags) -> bool: ...
    def get_certificate(self) -> TlsCertificate | None: ...
    def get_channel_binding_data(self, type: TlsChannelBindingType, data: list[int]) -> bool: ...
    def get_ciphersuite_name(self) -> str | None: ...
    def get_database(self) -> TlsDatabase | None: ...
    def get_interaction(self) -> TlsInteraction | None: ...
    def get_negotiated_protocol(self) -> str | None: ...
    def get_peer_certificate(self) -> TlsCertificate | None: ...
    def get_peer_certificate_errors(self) -> TlsCertificateFlags: ...
    def get_protocol_version(self) -> TlsProtocolVersion: ...
    def get_rehandshake_mode(self) -> TlsRehandshakeMode: ...
    def get_require_close_notify(self) -> bool: ...
    def get_use_system_certdb(self) -> bool: ...
    def handshake(self, cancellable: Cancellable | None) -> bool: ...
    def handshake_async(self, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def handshake_finish(self, result: AsyncResult) -> bool: ...
    def set_advertised_protocols(self, protocols: list[str] | None) -> None: ...
    def set_certificate(self, certificate: TlsCertificate) -> None: ...
    def set_database(self, database: TlsDatabase | None) -> None: ...
    def set_interaction(self, interaction: TlsInteraction | None) -> None: ...
    def set_rehandshake_mode(self, mode: TlsRehandshakeMode) -> None: ...
    def set_require_close_notify(self, require_close_notify: bool) -> None: ...
    def set_use_system_certdb(self, use_system_certdb: bool) -> None: ...

class TlsDatabase(GObject.Object): 
    def create_certificate_handle(self, certificate: TlsCertificate) -> str | None: ...
    def lookup_certificate_for_handle(self, handle: str, interaction: TlsInteraction | None, flags: TlsDatabaseLookupFlags, cancellable: Cancellable | None) -> TlsCertificate | None: ...
    def lookup_certificate_for_handle_async(self, handle: str, interaction: TlsInteraction | None, flags: TlsDatabaseLookupFlags, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def lookup_certificate_for_handle_finish(self, result: AsyncResult) -> TlsCertificate: ...
    def lookup_certificate_issuer(self, certificate: TlsCertificate, interaction: TlsInteraction | None, flags: TlsDatabaseLookupFlags, cancellable: Cancellable | None) -> TlsCertificate: ...
    def lookup_certificate_issuer_async(self, certificate: TlsCertificate, interaction: TlsInteraction | None, flags: TlsDatabaseLookupFlags, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def lookup_certificate_issuer_finish(self, result: AsyncResult) -> TlsCertificate: ...
    def lookup_certificates_issued_by(self, issuer_raw_dn: list[int], interaction: TlsInteraction | None, flags: TlsDatabaseLookupFlags, cancellable: Cancellable | None) -> GLib.List: ...
    def lookup_certificates_issued_by_async(self, issuer_raw_dn: list[int], interaction: TlsInteraction | None, flags: TlsDatabaseLookupFlags, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def lookup_certificates_issued_by_finish(self, result: AsyncResult) -> GLib.List: ...
    def verify_chain(self, chain: TlsCertificate, purpose: str, identity: SocketConnectable | None, interaction: TlsInteraction | None, flags: TlsDatabaseVerifyFlags, cancellable: Cancellable | None) -> TlsCertificateFlags: ...
    def verify_chain_async(self, chain: TlsCertificate, purpose: str, identity: SocketConnectable | None, interaction: TlsInteraction | None, flags: TlsDatabaseVerifyFlags, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def verify_chain_finish(self, result: AsyncResult) -> TlsCertificateFlags: ...

class TlsInteraction(GObject.Object): 
    def ask_password(self, password: TlsPassword, cancellable: Cancellable | None) -> TlsInteractionResult: ...
    def ask_password_async(self, password: TlsPassword, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def ask_password_finish(self, result: AsyncResult) -> TlsInteractionResult: ...
    def invoke_ask_password(self, password: TlsPassword, cancellable: Cancellable | None) -> TlsInteractionResult: ...
    def invoke_request_certificate(self, connection: TlsConnection, flags: TlsCertificateRequestFlags, cancellable: Cancellable | None) -> TlsInteractionResult: ...
    def request_certificate(self, connection: TlsConnection, flags: TlsCertificateRequestFlags, cancellable: Cancellable | None) -> TlsInteractionResult: ...
    def request_certificate_async(self, connection: TlsConnection, flags: TlsCertificateRequestFlags, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def request_certificate_finish(self, result: AsyncResult) -> TlsInteractionResult: ...

class TlsPassword(GObject.Object): 
    @classmethod
    def new(cls, flags: TlsPasswordFlags, description: str) -> TlsPassword: ...
    def get_description(self) -> str: ...
    def get_flags(self) -> TlsPasswordFlags: ...
    def get_value(self, length: gsize) -> list[int]: ...
    def get_warning(self) -> str: ...
    def set_description(self, description: str) -> None: ...
    def set_flags(self, flags: TlsPasswordFlags) -> None: ...
    def set_value(self, value: list[int], length: gssize) -> None: ...
    def set_value_full(self, value: list[int], length: gssize, destroy: GLib.DestroyNotify | None) -> None: ...
    def set_warning(self, warning: str) -> None: ...

class UnixConnection(SocketConnection): 
    def receive_credentials(self, cancellable: Cancellable | None) -> Credentials: ...
    def receive_credentials_async(self, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def receive_credentials_finish(self, result: AsyncResult) -> Credentials: ...
    def receive_fd(self, cancellable: Cancellable | None) -> int: ...
    def send_credentials(self, cancellable: Cancellable | None) -> bool: ...
    def send_credentials_async(self, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def send_credentials_finish(self, result: AsyncResult) -> bool: ...
    def send_fd(self, fd: int, cancellable: Cancellable | None) -> bool: ...

class UnixCredentialsMessage(SocketControlMessage): 
    @classmethod
    def new(cls) -> SocketControlMessage: ...
    @classmethod
    def is_supported(cls) -> bool: ...
    def get_credentials(self) -> Credentials: ...

class UnixFDList(GObject.Object): 
    @classmethod
    def new(cls) -> UnixFDList: ...
    def append(self, fd: int) -> int: ...
    def get(self, index_: int) -> int: ...
    def get_length(self) -> int: ...
    def peek_fds(self, length: int) -> list[int]: ...
    def steal_fds(self, length: int) -> list[int]: ...

class UnixFDMessage(SocketControlMessage): 
    @classmethod
    def new(cls) -> SocketControlMessage: ...
    def append_fd(self, fd: int) -> bool: ...
    def get_fd_list(self) -> UnixFDList: ...
    def steal_fds(self, length: int) -> list[int]: ...

class UnixInputStream(InputStream, FileDescriptorBased, PollableInputStream): 
    @classmethod
    def new(cls, fd: int, close_fd: bool) -> InputStream: ...
    def get_close_fd(self) -> bool: ...
    def get_fd(self) -> int: ...
    def set_close_fd(self, close_fd: bool) -> None: ...

class UnixMountMonitor(GObject.Object): 
    @classmethod
    def new(cls) -> UnixMountMonitor: ...
    @classmethod
    def get(cls) -> UnixMountMonitor: ...
    def set_rate_limit(self, limit_msec: int) -> None: ...

class UnixOutputStream(OutputStream, FileDescriptorBased, PollableOutputStream): 
    @classmethod
    def new(cls, fd: int, close_fd: bool) -> OutputStream: ...
    def get_close_fd(self) -> bool: ...
    def get_fd(self) -> int: ...
    def set_close_fd(self, close_fd: bool) -> None: ...

class UnixSocketAddress(SocketAddress, SocketConnectable): 
    @classmethod
    def new(cls, path: str) -> SocketAddress: ...
    @classmethod
    def abstract_names_supported(cls) -> bool: ...
    def get_address_type(self) -> UnixSocketAddressType: ...
    def get_is_abstract(self) -> bool: ...
    def get_path(self) -> str: ...
    def get_path_len(self) -> gsize: ...

class Vfs(GObject.Object): 
    @classmethod
    def get_default(cls) -> Vfs: ...
    @classmethod
    def get_local(cls) -> Vfs: ...
    def get_file_for_path(self, path: str) -> File: ...
    def get_file_for_uri(self, uri: str) -> File: ...
    def get_supported_uri_schemes(self) -> list[str]: ...
    def is_active(self) -> bool: ...
    def parse_name(self, parse_name: str) -> File: ...
    def register_uri_scheme(self, scheme: str, uri_func: VfsFileLookupFunc | None, uri_data: object | None, uri_destroy: GLib.DestroyNotify | None, parse_name_func: VfsFileLookupFunc | None, parse_name_data: object | None, parse_name_destroy: GLib.DestroyNotify | None) -> bool: ...
    def unregister_uri_scheme(self, scheme: str) -> bool: ...

class VolumeMonitor(GObject.Object): 
    @classmethod
    def adopt_orphan_mount(cls, mount: Mount) -> Volume: ...
    @classmethod
    def get(cls) -> VolumeMonitor: ...
    def get_connected_drives(self) -> GLib.List: ...
    def get_mount_for_uuid(self, uuid: str) -> Mount | None: ...
    def get_mounts(self) -> GLib.List: ...
    def get_volume_for_uuid(self, uuid: str) -> Volume | None: ...
    def get_volumes(self) -> GLib.List: ...

class ZlibCompressor(GObject.Object, Converter): 
    @classmethod
    def new(cls, format: ZlibCompressorFormat, level: int) -> ZlibCompressor: ...
    def get_file_info(self) -> FileInfo | None: ...
    def set_file_info(self, file_info: FileInfo | None) -> None: ...

class ZlibDecompressor(GObject.Object, Converter): 
    @classmethod
    def new(cls, format: ZlibCompressorFormat) -> ZlibDecompressor: ...
    def get_file_info(self) -> FileInfo | None: ...

class Action: 
    def activate(self, parameter: GLib.Variant | None) -> None: ...
    def change_state(self, value: GLib.Variant) -> None: ...
    def get_enabled(self) -> bool: ...
    def get_name(self) -> str: ...
    def get_parameter_type(self) -> GLib.VariantType | None: ...
    def get_state(self) -> GLib.Variant | None: ...
    def get_state_hint(self) -> GLib.Variant | None: ...
    def get_state_type(self) -> GLib.VariantType | None: ...
    def activate(self, parameter: GLib.Variant | None) -> None: ...
    def change_state(self, value: GLib.Variant) -> None: ...
    def get_enabled(self) -> bool: ...
    def get_name(self) -> str: ...
    def get_parameter_type(self) -> GLib.VariantType | None: ...
    def get_state(self) -> GLib.Variant | None: ...
    def get_state_hint(self) -> GLib.Variant | None: ...
    def get_state_type(self) -> GLib.VariantType | None: ...
class ActionGroup: 
    def action_added(self, action_name: str) -> None: ...
    def action_enabled_changed(self, action_name: str, enabled: bool) -> None: ...
    def action_removed(self, action_name: str) -> None: ...
    def action_state_changed(self, action_name: str, state: GLib.Variant) -> None: ...
    def activate_action(self, action_name: str, parameter: GLib.Variant | None) -> None: ...
    def change_action_state(self, action_name: str, value: GLib.Variant) -> None: ...
    def get_action_enabled(self, action_name: str) -> bool: ...
    def get_action_parameter_type(self, action_name: str) -> GLib.VariantType | None: ...
    def get_action_state(self, action_name: str) -> GLib.Variant | None: ...
    def get_action_state_hint(self, action_name: str) -> GLib.Variant | None: ...
    def get_action_state_type(self, action_name: str) -> GLib.VariantType | None: ...
    def has_action(self, action_name: str) -> bool: ...
    def list_actions(self) -> list[str]: ...
    def query_action(self, action_name: str, enabled: bool, parameter_type: GLib.VariantType, state_type: GLib.VariantType, state_hint: GLib.Variant, state: GLib.Variant) -> bool: ...
    def action_added(self, action_name: str) -> None: ...
    def action_enabled_changed(self, action_name: str, enabled: bool) -> None: ...
    def action_removed(self, action_name: str) -> None: ...
    def action_state_changed(self, action_name: str, state: GLib.Variant) -> None: ...
    def activate_action(self, action_name: str, parameter: GLib.Variant | None) -> None: ...
    def change_action_state(self, action_name: str, value: GLib.Variant) -> None: ...
    def get_action_enabled(self, action_name: str) -> bool: ...
    def get_action_parameter_type(self, action_name: str) -> GLib.VariantType | None: ...
    def get_action_state(self, action_name: str) -> GLib.Variant | None: ...
    def get_action_state_hint(self, action_name: str) -> GLib.Variant | None: ...
    def get_action_state_type(self, action_name: str) -> GLib.VariantType | None: ...
    def has_action(self, action_name: str) -> bool: ...
    def list_actions(self) -> list[str]: ...
    def query_action(self, action_name: str, enabled: bool, parameter_type: GLib.VariantType, state_type: GLib.VariantType, state_hint: GLib.Variant, state: GLib.Variant) -> bool: ...
class ActionMap: 
    def add_action(self, action: Action) -> None: ...
    def lookup_action(self, action_name: str) -> Action | None: ...
    def remove_action(self, action_name: str) -> None: ...
    def add_action(self, action: Action) -> None: ...
    def add_action_entries(self, entries: list[ActionEntry], n_entries: int, user_data: object | None) -> None: ...
    def lookup_action(self, action_name: str) -> Action | None: ...
    def remove_action(self, action_name: str) -> None: ...
class AppInfo: 
    def add_supports_type(self, content_type: str) -> bool: ...
    def can_delete(self) -> bool: ...
    def can_remove_supports_type(self) -> bool: ...
    def do_delete(self) -> bool: ...
    def dup(self) -> AppInfo: ...
    def equal(self, appinfo2: AppInfo) -> bool: ...
    def get_commandline(self) -> filename | None: ...
    def get_description(self) -> str | None: ...
    def get_display_name(self) -> str: ...
    def get_executable(self) -> filename: ...
    def get_icon(self) -> Icon | None: ...
    def get_id(self) -> str | None: ...
    def get_name(self) -> str: ...
    def get_supported_types(self) -> list[str]: ...
    def launch(self, files: GLib.List | None, context: AppLaunchContext | None) -> bool: ...
    def launch_uris(self, uris: GLib.List | None, context: AppLaunchContext | None) -> bool: ...
    def launch_uris_async(self, uris: GLib.List | None, context: AppLaunchContext | None, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def launch_uris_finish(self, result: AsyncResult) -> bool: ...
    def remove_supports_type(self, content_type: str) -> bool: ...
    def set_as_default_for_extension(self, extension: filename) -> bool: ...
    def set_as_default_for_type(self, content_type: str) -> bool: ...
    def set_as_last_used_for_type(self, content_type: str) -> bool: ...
    def should_show(self) -> bool: ...
    def supports_files(self) -> bool: ...
    def supports_uris(self) -> bool: ...
    def add_supports_type(self, content_type: str) -> bool: ...
    def can_delete(self) -> bool: ...
    def can_remove_supports_type(self) -> bool: ...
    def delete(self) -> bool: ...
    def dup(self) -> AppInfo: ...
    def equal(self, appinfo2: AppInfo) -> bool: ...
    def get_commandline(self) -> filename | None: ...
    def get_description(self) -> str | None: ...
    def get_display_name(self) -> str: ...
    def get_executable(self) -> filename: ...
    def get_icon(self) -> Icon | None: ...
    def get_id(self) -> str | None: ...
    def get_name(self) -> str: ...
    def get_supported_types(self) -> list[str]: ...
    def launch(self, files: GLib.List | None, context: AppLaunchContext | None) -> bool: ...
    def launch_uris(self, uris: GLib.List | None, context: AppLaunchContext | None) -> bool: ...
    def launch_uris_async(self, uris: GLib.List | None, context: AppLaunchContext | None, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def launch_uris_finish(self, result: AsyncResult) -> bool: ...
    def remove_supports_type(self, content_type: str) -> bool: ...
    def set_as_default_for_extension(self, extension: filename) -> bool: ...
    def set_as_default_for_type(self, content_type: str) -> bool: ...
    def set_as_last_used_for_type(self, content_type: str) -> bool: ...
    def should_show(self) -> bool: ...
    def supports_files(self) -> bool: ...
    def supports_uris(self) -> bool: ...
class AsyncInitable: 
    def init_async(self, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def init_finish(self, res: AsyncResult) -> bool: ...
    def init_async(self, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def init_finish(self, res: AsyncResult) -> bool: ...
    def new_finish(self, res: AsyncResult) -> GObject.Object: ...
class AsyncResult: 
    def get_source_object(self) -> GObject.Object | None: ...
    def get_user_data(self) -> object | None: ...
    def is_tagged(self, source_tag: object | None) -> bool: ...
    def get_source_object(self) -> GObject.Object | None: ...
    def get_user_data(self) -> object | None: ...
    def is_tagged(self, source_tag: object | None) -> bool: ...
    def legacy_propagate_error(self) -> bool: ...
class Converter: 
    def convert(self, inbuf: list[int] | None, inbuf_size: gsize, outbuf: list[int] | None, outbuf_size: gsize, flags: ConverterFlags, bytes_read: gsize, bytes_written: gsize) -> ConverterResult: ...
    def reset(self) -> None: ...
    def convert(self, inbuf: list[int], inbuf_size: gsize, outbuf: list[int], outbuf_size: gsize, flags: ConverterFlags, bytes_read: gsize, bytes_written: gsize) -> ConverterResult: ...
    def reset(self) -> None: ...
class DBusInterface: 
    def dup_object(self) -> DBusObject | None: ...
    def get_info(self) -> DBusInterfaceInfo: ...
    def get_object(self) -> DBusObject | None: ...
    def set_object(self, object: DBusObject | None) -> None: ...
    def dup_object(self) -> DBusObject | None: ...
    def get_info(self) -> DBusInterfaceInfo: ...
    def get_object(self) -> DBusObject | None: ...
    def set_object(self, object: DBusObject | None) -> None: ...
class DBusObject: 
    def get_interface(self, interface_name: str) -> DBusInterface | None: ...
    def get_interfaces(self) -> GLib.List: ...
    def get_object_path(self) -> str: ...
    def interface_added(self, interface_: DBusInterface) -> None: ...
    def interface_removed(self, interface_: DBusInterface) -> None: ...
    def get_interface(self, interface_name: str) -> DBusInterface | None: ...
    def get_interfaces(self) -> GLib.List: ...
    def get_object_path(self) -> str: ...
class DBusObjectManager: 
    def get_interface(self, object_path: str, interface_name: str) -> DBusInterface | None: ...
    def get_object(self, object_path: str) -> DBusObject | None: ...
    def get_object_path(self) -> str: ...
    def get_objects(self) -> GLib.List: ...
    def interface_added(self, object: DBusObject, interface_: DBusInterface) -> None: ...
    def interface_removed(self, object: DBusObject, interface_: DBusInterface) -> None: ...
    def object_added(self, object: DBusObject) -> None: ...
    def object_removed(self, object: DBusObject) -> None: ...
    def get_interface(self, object_path: str, interface_name: str) -> DBusInterface | None: ...
    def get_object(self, object_path: str) -> DBusObject | None: ...
    def get_object_path(self) -> str: ...
    def get_objects(self) -> GLib.List: ...
class DatagramBased: 
    def condition_check(self, condition: GLib.IOCondition) -> GLib.IOCondition: ...
    def condition_wait(self, condition: GLib.IOCondition, timeout: int, cancellable: Cancellable | None) -> bool: ...
    def create_source(self, condition: GLib.IOCondition, cancellable: Cancellable | None) -> GLib.Source: ...
    def receive_messages(self, messages: list[InputMessage], num_messages: int, flags: int, timeout: int, cancellable: Cancellable | None) -> int: ...
    def send_messages(self, messages: list[OutputMessage], num_messages: int, flags: int, timeout: int, cancellable: Cancellable | None) -> int: ...
    def condition_check(self, condition: GLib.IOCondition) -> GLib.IOCondition: ...
    def condition_wait(self, condition: GLib.IOCondition, timeout: int, cancellable: Cancellable | None) -> bool: ...
    def create_source(self, condition: GLib.IOCondition, cancellable: Cancellable | None) -> GLib.Source: ...
    def receive_messages(self, messages: list[InputMessage], num_messages: int, flags: int, timeout: int, cancellable: Cancellable | None) -> int: ...
    def send_messages(self, messages: list[OutputMessage], num_messages: int, flags: int, timeout: int, cancellable: Cancellable | None) -> int: ...
class DebugController(Initable): 
    def get_debug_enabled(self) -> bool: ...
    def set_debug_enabled(self, debug_enabled: bool) -> None: ...
class DesktopAppInfoLookup: 
    def get_default_for_uri_scheme(self, uri_scheme: str) -> AppInfo | None: ...
    def get_default_for_uri_scheme(self, uri_scheme: str) -> AppInfo | None: ...
class Drive: 
    def can_eject(self) -> bool: ...
    def can_poll_for_media(self) -> bool: ...
    def can_start(self) -> bool: ...
    def can_start_degraded(self) -> bool: ...
    def can_stop(self) -> bool: ...
    def changed(self) -> None: ...
    def disconnected(self) -> None: ...
    def eject(self, flags: MountUnmountFlags, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def eject_button(self) -> None: ...
    def eject_finish(self, result: AsyncResult) -> bool: ...
    def eject_with_operation(self, flags: MountUnmountFlags, mount_operation: MountOperation | None, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def eject_with_operation_finish(self, result: AsyncResult) -> bool: ...
    def enumerate_identifiers(self) -> list[str]: ...
    def get_icon(self) -> Icon: ...
    def get_identifier(self, kind: str) -> str | None: ...
    def get_name(self) -> str: ...
    def get_sort_key(self) -> str | None: ...
    def get_start_stop_type(self) -> DriveStartStopType: ...
    def get_symbolic_icon(self) -> Icon: ...
    def get_volumes(self) -> GLib.List: ...
    def has_media(self) -> bool: ...
    def has_volumes(self) -> bool: ...
    def is_media_check_automatic(self) -> bool: ...
    def is_media_removable(self) -> bool: ...
    def is_removable(self) -> bool: ...
    def poll_for_media(self, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def poll_for_media_finish(self, result: AsyncResult) -> bool: ...
    def start(self, flags: DriveStartFlags, mount_operation: MountOperation | None, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def start_finish(self, result: AsyncResult) -> bool: ...
    def stop(self, flags: MountUnmountFlags, mount_operation: MountOperation | None, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def stop_button(self) -> None: ...
    def stop_finish(self, result: AsyncResult) -> bool: ...
    def can_eject(self) -> bool: ...
    def can_poll_for_media(self) -> bool: ...
    def can_start(self) -> bool: ...
    def can_start_degraded(self) -> bool: ...
    def can_stop(self) -> bool: ...
    def eject(self, flags: MountUnmountFlags, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def eject_finish(self, result: AsyncResult) -> bool: ...
    def eject_with_operation(self, flags: MountUnmountFlags, mount_operation: MountOperation | None, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def eject_with_operation_finish(self, result: AsyncResult) -> bool: ...
    def enumerate_identifiers(self) -> list[str]: ...
    def get_icon(self) -> Icon: ...
    def get_identifier(self, kind: str) -> str | None: ...
    def get_name(self) -> str: ...
    def get_sort_key(self) -> str | None: ...
    def get_start_stop_type(self) -> DriveStartStopType: ...
    def get_symbolic_icon(self) -> Icon: ...
    def get_volumes(self) -> GLib.List: ...
    def has_media(self) -> bool: ...
    def has_volumes(self) -> bool: ...
    def is_media_check_automatic(self) -> bool: ...
    def is_media_removable(self) -> bool: ...
    def is_removable(self) -> bool: ...
    def poll_for_media(self, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def poll_for_media_finish(self, result: AsyncResult) -> bool: ...
    def start(self, flags: DriveStartFlags, mount_operation: MountOperation | None, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def start_finish(self, result: AsyncResult) -> bool: ...
    def stop(self, flags: MountUnmountFlags, mount_operation: MountOperation | None, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def stop_finish(self, result: AsyncResult) -> bool: ...
class DtlsClientConnection(DatagramBased): 
    def get_accepted_cas(self) -> GLib.List: ...
    def get_server_identity(self) -> SocketConnectable: ...
    def get_validation_flags(self) -> TlsCertificateFlags: ...
    def set_server_identity(self, identity: SocketConnectable) -> None: ...
    def set_validation_flags(self, flags: TlsCertificateFlags) -> None: ...
class DtlsConnection(DatagramBased): 
    def accept_certificate(self, peer_cert: TlsCertificate, errors: TlsCertificateFlags) -> bool: ...
    def get_binding_data(self, type: TlsChannelBindingType, data: list[int]) -> bool: ...
    def get_negotiated_protocol(self) -> str | None: ...
    def handshake(self, cancellable: Cancellable | None) -> bool: ...
    def handshake_async(self, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def handshake_finish(self, result: AsyncResult) -> bool: ...
    def set_advertised_protocols(self, protocols: list[str] | None) -> None: ...
    def shutdown(self, shutdown_read: bool, shutdown_write: bool, cancellable: Cancellable | None) -> bool: ...
    def shutdown_async(self, shutdown_read: bool, shutdown_write: bool, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def shutdown_finish(self, result: AsyncResult) -> bool: ...
    def close(self, cancellable: Cancellable | None) -> bool: ...
    def close_async(self, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def close_finish(self, result: AsyncResult) -> bool: ...
    def emit_accept_certificate(self, peer_cert: TlsCertificate, errors: TlsCertificateFlags) -> bool: ...
    def get_certificate(self) -> TlsCertificate | None: ...
    def get_channel_binding_data(self, type: TlsChannelBindingType, data: list[int]) -> bool: ...
    def get_ciphersuite_name(self) -> str | None: ...
    def get_database(self) -> TlsDatabase | None: ...
    def get_interaction(self) -> TlsInteraction | None: ...
    def get_negotiated_protocol(self) -> str | None: ...
    def get_peer_certificate(self) -> TlsCertificate | None: ...
    def get_peer_certificate_errors(self) -> TlsCertificateFlags: ...
    def get_protocol_version(self) -> TlsProtocolVersion: ...
    def get_rehandshake_mode(self) -> TlsRehandshakeMode: ...
    def get_require_close_notify(self) -> bool: ...
    def handshake(self, cancellable: Cancellable | None) -> bool: ...
    def handshake_async(self, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def handshake_finish(self, result: AsyncResult) -> bool: ...
    def set_advertised_protocols(self, protocols: list[str] | None) -> None: ...
    def set_certificate(self, certificate: TlsCertificate) -> None: ...
    def set_database(self, database: TlsDatabase | None) -> None: ...
    def set_interaction(self, interaction: TlsInteraction | None) -> None: ...
    def set_rehandshake_mode(self, mode: TlsRehandshakeMode) -> None: ...
    def set_require_close_notify(self, require_close_notify: bool) -> None: ...
    def shutdown(self, shutdown_read: bool, shutdown_write: bool, cancellable: Cancellable | None) -> bool: ...
    def shutdown_async(self, shutdown_read: bool, shutdown_write: bool, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def shutdown_finish(self, result: AsyncResult) -> bool: ...
class DtlsServerConnection(DatagramBased): ...
class File: 
    def append_to(self, flags: FileCreateFlags, cancellable: Cancellable | None) -> FileOutputStream: ...
    def append_to_async(self, flags: FileCreateFlags, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def append_to_finish(self, res: AsyncResult) -> FileOutputStream: ...
    def copy(self, destination: File, flags: FileCopyFlags, cancellable: Cancellable | None, progress_callback: FileProgressCallback | None, progress_callback_data: object | None) -> bool: ...
    def copy_async(self, destination: File, flags: FileCopyFlags, io_priority: int, cancellable: Cancellable | None, progress_callback: FileProgressCallback | None, progress_callback_data: object | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def copy_finish(self, res: AsyncResult) -> bool: ...
    def create(self, flags: FileCreateFlags, cancellable: Cancellable | None) -> FileOutputStream: ...
    def create_async(self, flags: FileCreateFlags, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def create_finish(self, res: AsyncResult) -> FileOutputStream: ...
    def create_readwrite(self, flags: FileCreateFlags, cancellable: Cancellable | None) -> FileIOStream: ...
    def create_readwrite_async(self, flags: FileCreateFlags, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def create_readwrite_finish(self, res: AsyncResult) -> FileIOStream: ...
    def delete_file(self, cancellable: Cancellable | None) -> bool: ...
    def delete_file_async(self, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def delete_file_finish(self, result: AsyncResult) -> bool: ...
    def dup(self) -> File: ...
    def eject_mountable(self, flags: MountUnmountFlags, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def eject_mountable_finish(self, result: AsyncResult) -> bool: ...
    def eject_mountable_with_operation(self, flags: MountUnmountFlags, mount_operation: MountOperation | None, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def eject_mountable_with_operation_finish(self, result: AsyncResult) -> bool: ...
    def enumerate_children(self, attributes: str, flags: FileQueryInfoFlags, cancellable: Cancellable | None) -> FileEnumerator: ...
    def enumerate_children_async(self, attributes: str, flags: FileQueryInfoFlags, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def enumerate_children_finish(self, res: AsyncResult) -> FileEnumerator: ...
    def equal(self, file2: File) -> bool: ...
    def find_enclosing_mount(self, cancellable: Cancellable | None) -> Mount: ...
    def find_enclosing_mount_async(self, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def find_enclosing_mount_finish(self, res: AsyncResult) -> Mount: ...
    def get_basename(self) -> filename | None: ...
    def get_child_for_display_name(self, display_name: str) -> File: ...
    def get_parent(self) -> File | None: ...
    def get_parse_name(self) -> str: ...
    def get_path(self) -> filename | None: ...
    def get_relative_path(self, descendant: File) -> filename | None: ...
    def get_uri(self) -> str: ...
    def get_uri_scheme(self) -> str | None: ...
    def has_uri_scheme(self, uri_scheme: str) -> bool: ...
    def hash(self) -> int: ...
    def is_native(self) -> bool: ...
    def make_directory(self, cancellable: Cancellable | None) -> bool: ...
    def make_directory_async(self, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def make_directory_finish(self, result: AsyncResult) -> bool: ...
    def make_symbolic_link(self, symlink_value: filename, cancellable: Cancellable | None) -> bool: ...
    def make_symbolic_link_async(self, symlink_value: filename, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def make_symbolic_link_finish(self, result: AsyncResult) -> bool: ...
    def measure_disk_usage(self, flags: FileMeasureFlags, cancellable: Cancellable | None, progress_callback: FileMeasureProgressCallback | None, progress_data: object | None, disk_usage: int, num_dirs: int, num_files: int) -> bool: ...
    def measure_disk_usage_async(self, flags: FileMeasureFlags, io_priority: int, cancellable: Cancellable | None, progress_callback: FileMeasureProgressCallback | None, progress_data: object | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def measure_disk_usage_finish(self, result: AsyncResult, disk_usage: int, num_dirs: int, num_files: int) -> bool: ...
    def monitor_dir(self, flags: FileMonitorFlags, cancellable: Cancellable | None) -> FileMonitor: ...
    def monitor_file(self, flags: FileMonitorFlags, cancellable: Cancellable | None) -> FileMonitor: ...
    def mount_enclosing_volume(self, flags: MountMountFlags, mount_operation: MountOperation | None, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def mount_enclosing_volume_finish(self, result: AsyncResult) -> bool: ...
    def mount_mountable(self, flags: MountMountFlags, mount_operation: MountOperation | None, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def mount_mountable_finish(self, result: AsyncResult) -> File: ...
    def move(self, destination: File, flags: FileCopyFlags, cancellable: Cancellable | None, progress_callback: FileProgressCallback | None, progress_callback_data: object | None) -> bool: ...
    def move_async(self, destination: File, flags: FileCopyFlags, io_priority: int, cancellable: Cancellable | None, progress_callback: FileProgressCallback | None, progress_callback_data: object | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def move_finish(self, result: AsyncResult) -> bool: ...
    def open_readwrite(self, cancellable: Cancellable | None) -> FileIOStream: ...
    def open_readwrite_async(self, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def open_readwrite_finish(self, res: AsyncResult) -> FileIOStream: ...
    def poll_mountable(self, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def poll_mountable_finish(self, result: AsyncResult) -> bool: ...
    def prefix_matches(self, file: File) -> bool: ...
    def query_filesystem_info(self, attributes: str, cancellable: Cancellable | None) -> FileInfo: ...
    def query_filesystem_info_async(self, attributes: str, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def query_filesystem_info_finish(self, res: AsyncResult) -> FileInfo: ...
    def query_info(self, attributes: str, flags: FileQueryInfoFlags, cancellable: Cancellable | None) -> FileInfo: ...
    def query_info_async(self, attributes: str, flags: FileQueryInfoFlags, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def query_info_finish(self, res: AsyncResult) -> FileInfo: ...
    def query_settable_attributes(self, cancellable: Cancellable | None) -> FileAttributeInfoList: ...
    def query_writable_namespaces(self, cancellable: Cancellable | None) -> FileAttributeInfoList: ...
    def read_async(self, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def read_finish(self, res: AsyncResult) -> FileInputStream: ...
    def read_fn(self, cancellable: Cancellable | None) -> FileInputStream: ...
    def replace(self, etag: str | None, make_backup: bool, flags: FileCreateFlags, cancellable: Cancellable | None) -> FileOutputStream: ...
    def replace_async(self, etag: str | None, make_backup: bool, flags: FileCreateFlags, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def replace_finish(self, res: AsyncResult) -> FileOutputStream: ...
    def replace_readwrite(self, etag: str | None, make_backup: bool, flags: FileCreateFlags, cancellable: Cancellable | None) -> FileIOStream: ...
    def replace_readwrite_async(self, etag: str | None, make_backup: bool, flags: FileCreateFlags, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def replace_readwrite_finish(self, res: AsyncResult) -> FileIOStream: ...
    def resolve_relative_path(self, relative_path: filename) -> File: ...
    def set_attribute(self, attribute: str, type: FileAttributeType, value_p: object | None, flags: FileQueryInfoFlags, cancellable: Cancellable | None) -> bool: ...
    def set_attributes_async(self, info: FileInfo, flags: FileQueryInfoFlags, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def set_attributes_finish(self, result: AsyncResult, info: FileInfo) -> bool: ...
    def set_attributes_from_info(self, info: FileInfo, flags: FileQueryInfoFlags, cancellable: Cancellable | None) -> bool: ...
    def set_display_name(self, display_name: str, cancellable: Cancellable | None) -> File: ...
    def set_display_name_async(self, display_name: str, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def set_display_name_finish(self, res: AsyncResult) -> File: ...
    def start_mountable(self, flags: DriveStartFlags, start_operation: MountOperation | None, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def start_mountable_finish(self, result: AsyncResult) -> bool: ...
    def stop_mountable(self, flags: MountUnmountFlags, mount_operation: MountOperation | None, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def stop_mountable_finish(self, result: AsyncResult) -> bool: ...
    def trash(self, cancellable: Cancellable | None) -> bool: ...
    def trash_async(self, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def trash_finish(self, result: AsyncResult) -> bool: ...
    def unmount_mountable(self, flags: MountUnmountFlags, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def unmount_mountable_finish(self, result: AsyncResult) -> bool: ...
    def unmount_mountable_with_operation(self, flags: MountUnmountFlags, mount_operation: MountOperation | None, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def unmount_mountable_with_operation_finish(self, result: AsyncResult) -> bool: ...
    def append_to(self, flags: FileCreateFlags, cancellable: Cancellable | None) -> FileOutputStream: ...
    def append_to_async(self, flags: FileCreateFlags, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def append_to_finish(self, res: AsyncResult) -> FileOutputStream: ...
    def build_attribute_list_for_copy(self, flags: FileCopyFlags, cancellable: Cancellable | None) -> str: ...
    def copy(self, destination: File, flags: FileCopyFlags, cancellable: Cancellable | None, progress_callback: FileProgressCallback | None, progress_callback_data: object | None) -> bool: ...
    def copy_async(self, destination: File, flags: FileCopyFlags, io_priority: int, cancellable: Cancellable | None, progress_callback: FileProgressCallback | None, progress_callback_data: object | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def copy_attributes(self, destination: File, flags: FileCopyFlags, cancellable: Cancellable | None) -> bool: ...
    def copy_finish(self, res: AsyncResult) -> bool: ...
    def create(self, flags: FileCreateFlags, cancellable: Cancellable | None) -> FileOutputStream: ...
    def create_async(self, flags: FileCreateFlags, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def create_finish(self, res: AsyncResult) -> FileOutputStream: ...
    def create_readwrite(self, flags: FileCreateFlags, cancellable: Cancellable | None) -> FileIOStream: ...
    def create_readwrite_async(self, flags: FileCreateFlags, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def create_readwrite_finish(self, res: AsyncResult) -> FileIOStream: ...
    def delete(self, cancellable: Cancellable | None) -> bool: ...
    def delete_async(self, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def delete_finish(self, result: AsyncResult) -> bool: ...
    def dup(self) -> File: ...
    def eject_mountable(self, flags: MountUnmountFlags, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def eject_mountable_finish(self, result: AsyncResult) -> bool: ...
    def eject_mountable_with_operation(self, flags: MountUnmountFlags, mount_operation: MountOperation | None, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def eject_mountable_with_operation_finish(self, result: AsyncResult) -> bool: ...
    def enumerate_children(self, attributes: str, flags: FileQueryInfoFlags, cancellable: Cancellable | None) -> FileEnumerator: ...
    def enumerate_children_async(self, attributes: str, flags: FileQueryInfoFlags, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def enumerate_children_finish(self, res: AsyncResult) -> FileEnumerator: ...
    def equal(self, file2: File) -> bool: ...
    def find_enclosing_mount(self, cancellable: Cancellable | None) -> Mount: ...
    def find_enclosing_mount_async(self, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def find_enclosing_mount_finish(self, res: AsyncResult) -> Mount: ...
    def get_basename(self) -> filename | None: ...
    def get_child(self, name: filename) -> File: ...
    def get_child_for_display_name(self, display_name: str) -> File: ...
    def get_parent(self) -> File | None: ...
    def get_parse_name(self) -> str: ...
    def get_path(self) -> filename | None: ...
    def get_relative_path(self, descendant: File) -> filename | None: ...
    def get_uri(self) -> str: ...
    def get_uri_scheme(self) -> str | None: ...
    def has_parent(self, parent: File | None) -> bool: ...
    def has_prefix(self, prefix: File) -> bool: ...
    def has_uri_scheme(self, uri_scheme: str) -> bool: ...
    def hash(self) -> int: ...
    def is_native(self) -> bool: ...
    def load_bytes(self, cancellable: Cancellable | None, etag_out: str | None) -> GLib.Bytes: ...
    def load_bytes_async(self, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def load_bytes_finish(self, result: AsyncResult, etag_out: str | None) -> GLib.Bytes: ...
    def load_contents(self, cancellable: Cancellable | None, contents: list[int], length: gsize, etag_out: str | None) -> bool: ...
    def load_contents_async(self, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def load_contents_finish(self, res: AsyncResult, contents: list[int], length: gsize, etag_out: str | None) -> bool: ...
    def load_partial_contents_async(self, cancellable: Cancellable | None, read_more_callback: FileReadMoreCallback, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def load_partial_contents_finish(self, res: AsyncResult, contents: list[int], length: gsize, etag_out: str | None) -> bool: ...
    def make_directory(self, cancellable: Cancellable | None) -> bool: ...
    def make_directory_async(self, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def make_directory_finish(self, result: AsyncResult) -> bool: ...
    def make_directory_with_parents(self, cancellable: Cancellable | None) -> bool: ...
    def make_symbolic_link(self, symlink_value: filename, cancellable: Cancellable | None) -> bool: ...
    def make_symbolic_link_async(self, symlink_value: filename, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def make_symbolic_link_finish(self, result: AsyncResult) -> bool: ...
    def measure_disk_usage(self, flags: FileMeasureFlags, cancellable: Cancellable | None, progress_callback: FileMeasureProgressCallback | None, progress_data: object | None, disk_usage: int, num_dirs: int, num_files: int) -> bool: ...
    def measure_disk_usage_async(self, flags: FileMeasureFlags, io_priority: int, cancellable: Cancellable | None, progress_callback: FileMeasureProgressCallback | None, progress_data: object | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def measure_disk_usage_finish(self, result: AsyncResult, disk_usage: int, num_dirs: int, num_files: int) -> bool: ...
    def monitor(self, flags: FileMonitorFlags, cancellable: Cancellable | None) -> FileMonitor: ...
    def monitor_directory(self, flags: FileMonitorFlags, cancellable: Cancellable | None) -> FileMonitor: ...
    def monitor_file(self, flags: FileMonitorFlags, cancellable: Cancellable | None) -> FileMonitor: ...
    def mount_enclosing_volume(self, flags: MountMountFlags, mount_operation: MountOperation | None, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def mount_enclosing_volume_finish(self, result: AsyncResult) -> bool: ...
    def mount_mountable(self, flags: MountMountFlags, mount_operation: MountOperation | None, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def mount_mountable_finish(self, result: AsyncResult) -> File: ...
    def move(self, destination: File, flags: FileCopyFlags, cancellable: Cancellable | None, progress_callback: FileProgressCallback | None, progress_callback_data: object | None) -> bool: ...
    def move_async(self, destination: File, flags: FileCopyFlags, io_priority: int, cancellable: Cancellable | None, progress_callback: FileProgressCallback | None, progress_callback_data: object | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def move_finish(self, result: AsyncResult) -> bool: ...
    def open_readwrite(self, cancellable: Cancellable | None) -> FileIOStream: ...
    def open_readwrite_async(self, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def open_readwrite_finish(self, res: AsyncResult) -> FileIOStream: ...
    def peek_path(self) -> filename | None: ...
    def poll_mountable(self, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def poll_mountable_finish(self, result: AsyncResult) -> bool: ...
    def query_default_handler(self, cancellable: Cancellable | None) -> AppInfo: ...
    def query_default_handler_async(self, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def query_default_handler_finish(self, result: AsyncResult) -> AppInfo: ...
    def query_exists(self, cancellable: Cancellable | None) -> bool: ...
    def query_file_type(self, flags: FileQueryInfoFlags, cancellable: Cancellable | None) -> FileType: ...
    def query_filesystem_info(self, attributes: str, cancellable: Cancellable | None) -> FileInfo: ...
    def query_filesystem_info_async(self, attributes: str, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def query_filesystem_info_finish(self, res: AsyncResult) -> FileInfo: ...
    def query_info(self, attributes: str, flags: FileQueryInfoFlags, cancellable: Cancellable | None) -> FileInfo: ...
    def query_info_async(self, attributes: str, flags: FileQueryInfoFlags, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def query_info_finish(self, res: AsyncResult) -> FileInfo: ...
    def query_settable_attributes(self, cancellable: Cancellable | None) -> FileAttributeInfoList: ...
    def query_writable_namespaces(self, cancellable: Cancellable | None) -> FileAttributeInfoList: ...
    def read(self, cancellable: Cancellable | None) -> FileInputStream: ...
    def read_async(self, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def read_finish(self, res: AsyncResult) -> FileInputStream: ...
    def replace(self, etag: str | None, make_backup: bool, flags: FileCreateFlags, cancellable: Cancellable | None) -> FileOutputStream: ...
    def replace_async(self, etag: str | None, make_backup: bool, flags: FileCreateFlags, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def replace_contents(self, contents: list[int], length: gsize, etag: str | None, make_backup: bool, flags: FileCreateFlags, new_etag: str | None, cancellable: Cancellable | None) -> bool: ...
    def replace_contents_async(self, contents: list[int], length: gsize, etag: str | None, make_backup: bool, flags: FileCreateFlags, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def replace_contents_bytes_async(self, contents: GLib.Bytes, etag: str | None, make_backup: bool, flags: FileCreateFlags, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def replace_contents_finish(self, res: AsyncResult, new_etag: str | None) -> bool: ...
    def replace_finish(self, res: AsyncResult) -> FileOutputStream: ...
    def replace_readwrite(self, etag: str | None, make_backup: bool, flags: FileCreateFlags, cancellable: Cancellable | None) -> FileIOStream: ...
    def replace_readwrite_async(self, etag: str | None, make_backup: bool, flags: FileCreateFlags, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def replace_readwrite_finish(self, res: AsyncResult) -> FileIOStream: ...
    def resolve_relative_path(self, relative_path: filename) -> File: ...
    def set_attribute(self, attribute: str, type: FileAttributeType, value_p: object | None, flags: FileQueryInfoFlags, cancellable: Cancellable | None) -> bool: ...
    def set_attribute_byte_string(self, attribute: str, value: str, flags: FileQueryInfoFlags, cancellable: Cancellable | None) -> bool: ...
    def set_attribute_int32(self, attribute: str, value: int, flags: FileQueryInfoFlags, cancellable: Cancellable | None) -> bool: ...
    def set_attribute_int64(self, attribute: str, value: int, flags: FileQueryInfoFlags, cancellable: Cancellable | None) -> bool: ...
    def set_attribute_string(self, attribute: str, value: str, flags: FileQueryInfoFlags, cancellable: Cancellable | None) -> bool: ...
    def set_attribute_uint32(self, attribute: str, value: int, flags: FileQueryInfoFlags, cancellable: Cancellable | None) -> bool: ...
    def set_attribute_uint64(self, attribute: str, value: int, flags: FileQueryInfoFlags, cancellable: Cancellable | None) -> bool: ...
    def set_attributes_async(self, info: FileInfo, flags: FileQueryInfoFlags, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def set_attributes_finish(self, result: AsyncResult, info: FileInfo) -> bool: ...
    def set_attributes_from_info(self, info: FileInfo, flags: FileQueryInfoFlags, cancellable: Cancellable | None) -> bool: ...
    def set_display_name(self, display_name: str, cancellable: Cancellable | None) -> File: ...
    def set_display_name_async(self, display_name: str, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def set_display_name_finish(self, res: AsyncResult) -> File: ...
    def start_mountable(self, flags: DriveStartFlags, start_operation: MountOperation | None, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def start_mountable_finish(self, result: AsyncResult) -> bool: ...
    def stop_mountable(self, flags: MountUnmountFlags, mount_operation: MountOperation | None, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def stop_mountable_finish(self, result: AsyncResult) -> bool: ...
    def supports_thread_contexts(self) -> bool: ...
    def trash(self, cancellable: Cancellable | None) -> bool: ...
    def trash_async(self, io_priority: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def trash_finish(self, result: AsyncResult) -> bool: ...
    def unmount_mountable(self, flags: MountUnmountFlags, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def unmount_mountable_finish(self, result: AsyncResult) -> bool: ...
    def unmount_mountable_with_operation(self, flags: MountUnmountFlags, mount_operation: MountOperation | None, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def unmount_mountable_with_operation_finish(self, result: AsyncResult) -> bool: ...
class FileDescriptorBased: 
    def get_fd(self) -> int: ...
    def get_fd(self) -> int: ...
class Icon: 
    def equal(self, icon2: Icon | None) -> bool: ...
    def hash(self) -> int: ...
    def serialize(self) -> GLib.Variant | None: ...
    def to_tokens(self, tokens: list[object], out_version: int) -> bool: ...
    def equal(self, icon2: Icon | None) -> bool: ...
    def serialize(self) -> GLib.Variant | None: ...
    def to_string(self) -> str | None: ...
class Initable: 
    def init(self, cancellable: Cancellable | None) -> bool: ...
    def init(self, cancellable: Cancellable | None) -> bool: ...
class ListModel: 
    def get_item(self, position: int) -> GObject.Object | None: ...
    def get_item_type(self) -> GObject.Type: ...
    def get_n_items(self) -> int: ...
    def get_item(self, position: int) -> object | None: ...
    def get_item_type(self) -> GObject.Type: ...
    def get_n_items(self) -> int: ...
    def get_object(self, position: int) -> GObject.Object | None: ...
    def items_changed(self, position: int, removed: int, added: int) -> None: ...
class LoadableIcon(Icon): 
    def load(self, size: int, type: str, cancellable: Cancellable | None) -> InputStream: ...
    def load_async(self, size: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def load_finish(self, res: AsyncResult, type: str) -> InputStream: ...
    def load(self, size: int, type: str, cancellable: Cancellable | None) -> InputStream: ...
    def load_async(self, size: int, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def load_finish(self, res: AsyncResult, type: str) -> InputStream: ...
class MemoryMonitor(Initable): 
    def low_memory_warning(self, level: MemoryMonitorWarningLevel) -> None: ...
class Mount: 
    def can_eject(self) -> bool: ...
    def can_unmount(self) -> bool: ...
    def changed(self) -> None: ...
    def eject(self, flags: MountUnmountFlags, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def eject_finish(self, result: AsyncResult) -> bool: ...
    def eject_with_operation(self, flags: MountUnmountFlags, mount_operation: MountOperation | None, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def eject_with_operation_finish(self, result: AsyncResult) -> bool: ...
    def get_default_location(self) -> File: ...
    def get_drive(self) -> Drive | None: ...
    def get_icon(self) -> Icon: ...
    def get_name(self) -> str: ...
    def get_root(self) -> File: ...
    def get_sort_key(self) -> str | None: ...
    def get_symbolic_icon(self) -> Icon: ...
    def get_uuid(self) -> str | None: ...
    def get_volume(self) -> Volume | None: ...
    def guess_content_type(self, force_rescan: bool, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def guess_content_type_finish(self, result: AsyncResult) -> list[str]: ...
    def guess_content_type_sync(self, force_rescan: bool, cancellable: Cancellable | None) -> list[str]: ...
    def pre_unmount(self) -> None: ...
    def remount(self, flags: MountMountFlags, mount_operation: MountOperation | None, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def remount_finish(self, result: AsyncResult) -> bool: ...
    def unmount(self, flags: MountUnmountFlags, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def unmount_finish(self, result: AsyncResult) -> bool: ...
    def unmount_with_operation(self, flags: MountUnmountFlags, mount_operation: MountOperation | None, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def unmount_with_operation_finish(self, result: AsyncResult) -> bool: ...
    def unmounted(self) -> None: ...
    def can_eject(self) -> bool: ...
    def can_unmount(self) -> bool: ...
    def eject(self, flags: MountUnmountFlags, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def eject_finish(self, result: AsyncResult) -> bool: ...
    def eject_with_operation(self, flags: MountUnmountFlags, mount_operation: MountOperation | None, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def eject_with_operation_finish(self, result: AsyncResult) -> bool: ...
    def get_default_location(self) -> File: ...
    def get_drive(self) -> Drive | None: ...
    def get_icon(self) -> Icon: ...
    def get_name(self) -> str: ...
    def get_root(self) -> File: ...
    def get_sort_key(self) -> str | None: ...
    def get_symbolic_icon(self) -> Icon: ...
    def get_uuid(self) -> str | None: ...
    def get_volume(self) -> Volume | None: ...
    def guess_content_type(self, force_rescan: bool, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def guess_content_type_finish(self, result: AsyncResult) -> list[str]: ...
    def guess_content_type_sync(self, force_rescan: bool, cancellable: Cancellable | None) -> list[str]: ...
    def is_shadowed(self) -> bool: ...
    def remount(self, flags: MountMountFlags, mount_operation: MountOperation | None, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def remount_finish(self, result: AsyncResult) -> bool: ...
    def shadow(self) -> None: ...
    def unmount(self, flags: MountUnmountFlags, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def unmount_finish(self, result: AsyncResult) -> bool: ...
    def unmount_with_operation(self, flags: MountUnmountFlags, mount_operation: MountOperation | None, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def unmount_with_operation_finish(self, result: AsyncResult) -> bool: ...
    def unshadow(self) -> None: ...
class NetworkMonitor(Initable): 
    def can_reach(self, connectable: SocketConnectable, cancellable: Cancellable | None) -> bool: ...
    def can_reach_async(self, connectable: SocketConnectable, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def can_reach_finish(self, result: AsyncResult) -> bool: ...
    def network_changed(self, network_available: bool) -> None: ...
    def can_reach(self, connectable: SocketConnectable, cancellable: Cancellable | None) -> bool: ...
    def can_reach_async(self, connectable: SocketConnectable, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def can_reach_finish(self, result: AsyncResult) -> bool: ...
    def get_connectivity(self) -> NetworkConnectivity: ...
    def get_network_available(self) -> bool: ...
    def get_network_metered(self) -> bool: ...
class PollableInputStream(InputStream): 
    def can_poll(self) -> bool: ...
    def create_source(self, cancellable: Cancellable | None) -> GLib.Source: ...
    def is_readable(self) -> bool: ...
    def read_nonblocking(self, buffer: list[int] | None, count: gsize) -> gssize: ...
    def can_poll(self) -> bool: ...
    def create_source(self, cancellable: Cancellable | None) -> GLib.Source: ...
    def is_readable(self) -> bool: ...
    def read_nonblocking(self, buffer: list[int], count: gsize, cancellable: Cancellable | None) -> gssize: ...
class PollableOutputStream(OutputStream): 
    def can_poll(self) -> bool: ...
    def create_source(self, cancellable: Cancellable | None) -> GLib.Source: ...
    def is_writable(self) -> bool: ...
    def write_nonblocking(self, buffer: list[int] | None, count: gsize) -> gssize: ...
    def writev_nonblocking(self, vectors: list[OutputVector], n_vectors: gsize, bytes_written: gsize) -> PollableReturn: ...
    def can_poll(self) -> bool: ...
    def create_source(self, cancellable: Cancellable | None) -> GLib.Source: ...
    def is_writable(self) -> bool: ...
    def write_nonblocking(self, buffer: list[int], count: gsize, cancellable: Cancellable | None) -> gssize: ...
    def writev_nonblocking(self, vectors: list[OutputVector], n_vectors: gsize, bytes_written: gsize, cancellable: Cancellable | None) -> PollableReturn: ...
class PowerProfileMonitor(Initable): 
    def get_power_saver_enabled(self) -> bool: ...
class Proxy: 
    def connect(self, connection: IOStream, proxy_address: ProxyAddress, cancellable: Cancellable | None) -> IOStream: ...
    def connect_async(self, connection: IOStream, proxy_address: ProxyAddress, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def connect_finish(self, result: AsyncResult) -> IOStream: ...
    def supports_hostname(self) -> bool: ...
    def connect(self, connection: IOStream, proxy_address: ProxyAddress, cancellable: Cancellable | None) -> IOStream: ...
    def connect_async(self, connection: IOStream, proxy_address: ProxyAddress, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def connect_finish(self, result: AsyncResult) -> IOStream: ...
    def supports_hostname(self) -> bool: ...
class ProxyResolver: 
    def is_supported(self) -> bool: ...
    def lookup(self, uri: str, cancellable: Cancellable | None) -> list[str]: ...
    def lookup_async(self, uri: str, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def lookup_finish(self, result: AsyncResult) -> list[str]: ...
    def is_supported(self) -> bool: ...
    def lookup(self, uri: str, cancellable: Cancellable | None) -> list[str]: ...
    def lookup_async(self, uri: str, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def lookup_finish(self, result: AsyncResult) -> list[str]: ...
class RemoteActionGroup(ActionGroup): 
    def activate_action_full(self, action_name: str, parameter: GLib.Variant | None, platform_data: GLib.Variant) -> None: ...
    def change_action_state_full(self, action_name: str, value: GLib.Variant, platform_data: GLib.Variant) -> None: ...
    def activate_action_full(self, action_name: str, parameter: GLib.Variant | None, platform_data: GLib.Variant) -> None: ...
    def change_action_state_full(self, action_name: str, value: GLib.Variant, platform_data: GLib.Variant) -> None: ...
class Seekable: 
    def can_seek(self) -> bool: ...
    def can_truncate(self) -> bool: ...
    def seek(self, offset: int, type: GLib.SeekType, cancellable: Cancellable | None) -> bool: ...
    def tell(self) -> int: ...
    def truncate_fn(self, offset: int, cancellable: Cancellable | None) -> bool: ...
    def can_seek(self) -> bool: ...
    def can_truncate(self) -> bool: ...
    def seek(self, offset: int, type: GLib.SeekType, cancellable: Cancellable | None) -> bool: ...
    def tell(self) -> int: ...
    def truncate(self, offset: int, cancellable: Cancellable | None) -> bool: ...
class SocketConnectable: 
    def enumerate(self) -> SocketAddressEnumerator: ...
    def proxy_enumerate(self) -> SocketAddressEnumerator: ...
    def to_string(self) -> str: ...
    def enumerate(self) -> SocketAddressEnumerator: ...
    def proxy_enumerate(self) -> SocketAddressEnumerator: ...
    def to_string(self) -> str: ...
class TlsBackend: 
    def get_default_database(self) -> TlsDatabase: ...
    def supports_dtls(self) -> bool: ...
    def supports_tls(self) -> bool: ...
    def get_certificate_type(self) -> GObject.Type: ...
    def get_client_connection_type(self) -> GObject.Type: ...
    def get_default_database(self) -> TlsDatabase: ...
    def get_dtls_client_connection_type(self) -> GObject.Type: ...
    def get_dtls_server_connection_type(self) -> GObject.Type: ...
    def get_file_database_type(self) -> GObject.Type: ...
    def get_server_connection_type(self) -> GObject.Type: ...
    def set_default_database(self, database: TlsDatabase | None) -> None: ...
    def supports_dtls(self) -> bool: ...
    def supports_tls(self) -> bool: ...
class TlsClientConnection(TlsConnection): 
    def copy_session_state(self, source: TlsClientConnection) -> None: ...
    def copy_session_state(self, source: TlsClientConnection) -> None: ...
    def get_accepted_cas(self) -> GLib.List: ...
    def get_server_identity(self) -> SocketConnectable | None: ...
    def get_use_ssl3(self) -> bool: ...
    def get_validation_flags(self) -> TlsCertificateFlags: ...
    def set_server_identity(self, identity: SocketConnectable) -> None: ...
    def set_use_ssl3(self, use_ssl3: bool) -> None: ...
    def set_validation_flags(self, flags: TlsCertificateFlags) -> None: ...
class TlsFileDatabase(TlsDatabase): ...
class TlsServerConnection(TlsConnection): ...
class Volume: 
    def can_eject(self) -> bool: ...
    def can_mount(self) -> bool: ...
    def changed(self) -> None: ...
    def eject(self, flags: MountUnmountFlags, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def eject_finish(self, result: AsyncResult) -> bool: ...
    def eject_with_operation(self, flags: MountUnmountFlags, mount_operation: MountOperation | None, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def eject_with_operation_finish(self, result: AsyncResult) -> bool: ...
    def enumerate_identifiers(self) -> list[str]: ...
    def get_activation_root(self) -> File | None: ...
    def get_drive(self) -> Drive | None: ...
    def get_icon(self) -> Icon: ...
    def get_identifier(self, kind: str) -> str | None: ...
    def get_mount(self) -> Mount | None: ...
    def get_name(self) -> str: ...
    def get_sort_key(self) -> str | None: ...
    def get_symbolic_icon(self) -> Icon: ...
    def get_uuid(self) -> str | None: ...
    def mount_finish(self, result: AsyncResult) -> bool: ...
    def mount_fn(self, flags: MountMountFlags, mount_operation: MountOperation | None, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def removed(self) -> None: ...
    def should_automount(self) -> bool: ...
    def can_eject(self) -> bool: ...
    def can_mount(self) -> bool: ...
    def eject(self, flags: MountUnmountFlags, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def eject_finish(self, result: AsyncResult) -> bool: ...
    def eject_with_operation(self, flags: MountUnmountFlags, mount_operation: MountOperation | None, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def eject_with_operation_finish(self, result: AsyncResult) -> bool: ...
    def enumerate_identifiers(self) -> list[str]: ...
    def get_activation_root(self) -> File | None: ...
    def get_drive(self) -> Drive | None: ...
    def get_icon(self) -> Icon: ...
    def get_identifier(self, kind: str) -> str | None: ...
    def get_mount(self) -> Mount | None: ...
    def get_name(self) -> str: ...
    def get_sort_key(self) -> str | None: ...
    def get_symbolic_icon(self) -> Icon: ...
    def get_uuid(self) -> str | None: ...
    def mount(self, flags: MountMountFlags, mount_operation: MountOperation | None, cancellable: Cancellable | None, callback: AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def mount_finish(self, result: AsyncResult) -> bool: ...
    def should_automount(self) -> bool: ...

class AppInfoCreateFlags(GObject.GFlag): 
    NONE = ...
    NEEDS_TERMINAL = ...
    SUPPORTS_URIS = ...
    SUPPORTS_STARTUP_NOTIFICATION = ...

class ApplicationFlags(GObject.GFlag): 
    FLAGS_NONE = ...
    DEFAULT_FLAGS = ...
    IS_SERVICE = ...
    IS_LAUNCHER = ...
    HANDLES_OPEN = ...
    HANDLES_COMMAND_LINE = ...
    SEND_ENVIRONMENT = ...
    NON_UNIQUE = ...
    CAN_OVERRIDE_APP_ID = ...
    ALLOW_REPLACEMENT = ...
    REPLACE = ...

class AskPasswordFlags(GObject.GFlag): 
    NEED_PASSWORD = ...
    NEED_USERNAME = ...
    NEED_DOMAIN = ...
    SAVING_SUPPORTED = ...
    ANONYMOUS_SUPPORTED = ...
    TCRYPT = ...

class BusNameOwnerFlags(GObject.GFlag): 
    NONE = ...
    ALLOW_REPLACEMENT = ...
    REPLACE = ...
    DO_NOT_QUEUE = ...

class BusNameWatcherFlags(GObject.GFlag): 
    NONE = ...
    AUTO_START = ...

class ConverterFlags(GObject.GFlag): 
    NONE = ...
    INPUT_AT_END = ...
    FLUSH = ...

class DBusCallFlags(GObject.GFlag): 
    NONE = ...
    NO_AUTO_START = ...
    ALLOW_INTERACTIVE_AUTHORIZATION = ...

class DBusCapabilityFlags(GObject.GFlag): 
    NONE = ...
    UNIX_FD_PASSING = ...

class DBusConnectionFlags(GObject.GFlag): 
    NONE = ...
    AUTHENTICATION_CLIENT = ...
    AUTHENTICATION_SERVER = ...
    AUTHENTICATION_ALLOW_ANONYMOUS = ...
    MESSAGE_BUS_CONNECTION = ...
    DELAY_MESSAGE_PROCESSING = ...
    AUTHENTICATION_REQUIRE_SAME_USER = ...
    CROSS_NAMESPACE = ...

class DBusInterfaceSkeletonFlags(GObject.GFlag): 
    NONE = ...
    HANDLE_METHOD_INVOCATIONS_IN_THREAD = ...

class DBusMessageFlags(GObject.GFlag): 
    NONE = ...
    NO_REPLY_EXPECTED = ...
    NO_AUTO_START = ...
    ALLOW_INTERACTIVE_AUTHORIZATION = ...

class DBusObjectManagerClientFlags(GObject.GFlag): 
    NONE = ...
    DO_NOT_AUTO_START = ...

class DBusPropertyInfoFlags(GObject.GFlag): 
    NONE = ...
    READABLE = ...
    WRITABLE = ...

class DBusProxyFlags(GObject.GFlag): 
    NONE = ...
    DO_NOT_LOAD_PROPERTIES = ...
    DO_NOT_CONNECT_SIGNALS = ...
    DO_NOT_AUTO_START = ...
    GET_INVALIDATED_PROPERTIES = ...
    DO_NOT_AUTO_START_AT_CONSTRUCTION = ...
    NO_MATCH_RULE = ...

class DBusSendMessageFlags(GObject.GFlag): 
    NONE = ...
    PRESERVE_SERIAL = ...

class DBusServerFlags(GObject.GFlag): 
    NONE = ...
    RUN_IN_THREAD = ...
    AUTHENTICATION_ALLOW_ANONYMOUS = ...
    AUTHENTICATION_REQUIRE_SAME_USER = ...

class DBusSignalFlags(GObject.GFlag): 
    NONE = ...
    NO_MATCH_RULE = ...
    MATCH_ARG0_NAMESPACE = ...
    MATCH_ARG0_PATH = ...

class DBusSubtreeFlags(GObject.GFlag): 
    NONE = ...
    DISPATCH_TO_UNENUMERATED_NODES = ...

class DriveStartFlags(GObject.GFlag): 
    NONE = ...

class FileAttributeInfoFlags(GObject.GFlag): 
    NONE = ...
    COPY_WITH_FILE = ...
    COPY_WHEN_MOVED = ...

class FileCopyFlags(GObject.GFlag): 
    NONE = ...
    OVERWRITE = ...
    BACKUP = ...
    NOFOLLOW_SYMLINKS = ...
    ALL_METADATA = ...
    NO_FALLBACK_FOR_MOVE = ...
    TARGET_DEFAULT_PERMS = ...

class FileCreateFlags(GObject.GFlag): 
    NONE = ...
    PRIVATE = ...
    REPLACE_DESTINATION = ...

class FileMeasureFlags(GObject.GFlag): 
    NONE = ...
    REPORT_ANY_ERROR = ...
    APPARENT_SIZE = ...
    NO_XDEV = ...

class FileMonitorFlags(GObject.GFlag): 
    NONE = ...
    WATCH_MOUNTS = ...
    SEND_MOVED = ...
    WATCH_HARD_LINKS = ...
    WATCH_MOVES = ...

class FileQueryInfoFlags(GObject.GFlag): 
    NONE = ...
    NOFOLLOW_SYMLINKS = ...

class IOStreamSpliceFlags(GObject.GFlag): 
    NONE = ...
    CLOSE_STREAM1 = ...
    CLOSE_STREAM2 = ...
    WAIT_FOR_BOTH = ...

class MountMountFlags(GObject.GFlag): 
    NONE = ...

class MountUnmountFlags(GObject.GFlag): 
    NONE = ...
    FORCE = ...

class OutputStreamSpliceFlags(GObject.GFlag): 
    NONE = ...
    CLOSE_SOURCE = ...
    CLOSE_TARGET = ...

class ResolverNameLookupFlags(GObject.GFlag): 
    DEFAULT = ...
    IPV4_ONLY = ...
    IPV6_ONLY = ...

class ResourceFlags(GObject.GFlag): 
    NONE = ...
    COMPRESSED = ...

class ResourceLookupFlags(GObject.GFlag): 
    NONE = ...

class SettingsBindFlags(GObject.GFlag): 
    DEFAULT = ...
    GET = ...
    SET = ...
    NO_SENSITIVITY = ...
    GET_NO_CHANGES = ...
    INVERT_BOOLEAN = ...

class SocketMsgFlags(GObject.GFlag): 
    NONE = ...
    OOB = ...
    PEEK = ...
    DONTROUTE = ...

class SubprocessFlags(GObject.GFlag): 
    NONE = ...
    STDIN_PIPE = ...
    STDIN_INHERIT = ...
    STDOUT_PIPE = ...
    STDOUT_SILENCE = ...
    STDERR_PIPE = ...
    STDERR_SILENCE = ...
    STDERR_MERGE = ...
    INHERIT_FDS = ...
    SEARCH_PATH_FROM_ENVP = ...

class TestDBusFlags(GObject.GFlag): 
    NONE = ...

class TlsCertificateFlags(GObject.GFlag): 
    NO_FLAGS = ...
    UNKNOWN_CA = ...
    BAD_IDENTITY = ...
    NOT_ACTIVATED = ...
    EXPIRED = ...
    REVOKED = ...
    INSECURE = ...
    GENERIC_ERROR = ...
    VALIDATE_ALL = ...

class TlsDatabaseVerifyFlags(GObject.GFlag): 
    NONE = ...

class TlsPasswordFlags(GObject.GFlag): 
    NONE = ...
    RETRY = ...
    MANY_TRIES = ...
    FINAL_TRY = ...
    PKCS11_USER = ...
    PKCS11_SECURITY_OFFICER = ...
    PKCS11_CONTEXT_SPECIFIC = ...

class BusType(GObject.GEnum): 
    STARTER = ...
    NONE = ...
    SYSTEM = ...
    SESSION = ...

class ConverterResult(GObject.GEnum): 
    ERROR = ...
    CONVERTED = ...
    FINISHED = ...
    FLUSHED = ...

class CredentialsType(GObject.GEnum): 
    INVALID = ...
    LINUX_UCRED = ...
    FREEBSD_CMSGCRED = ...
    OPENBSD_SOCKPEERCRED = ...
    SOLARIS_UCRED = ...
    NETBSD_UNPCBID = ...
    APPLE_XUCRED = ...
    WIN32_PID = ...

class DBusError(GObject.GEnum): 
    FAILED = ...
    NO_MEMORY = ...
    SERVICE_UNKNOWN = ...
    NAME_HAS_NO_OWNER = ...
    NO_REPLY = ...
    IO_ERROR = ...
    BAD_ADDRESS = ...
    NOT_SUPPORTED = ...
    LIMITS_EXCEEDED = ...
    ACCESS_DENIED = ...
    AUTH_FAILED = ...
    NO_SERVER = ...
    TIMEOUT = ...
    NO_NETWORK = ...
    ADDRESS_IN_USE = ...
    DISCONNECTED = ...
    INVALID_ARGS = ...
    FILE_NOT_FOUND = ...
    FILE_EXISTS = ...
    UNKNOWN_METHOD = ...
    TIMED_OUT = ...
    MATCH_RULE_NOT_FOUND = ...
    MATCH_RULE_INVALID = ...
    SPAWN_EXEC_FAILED = ...
    SPAWN_FORK_FAILED = ...
    SPAWN_CHILD_EXITED = ...
    SPAWN_CHILD_SIGNALED = ...
    SPAWN_FAILED = ...
    SPAWN_SETUP_FAILED = ...
    SPAWN_CONFIG_INVALID = ...
    SPAWN_SERVICE_INVALID = ...
    SPAWN_SERVICE_NOT_FOUND = ...
    SPAWN_PERMISSIONS_INVALID = ...
    SPAWN_FILE_INVALID = ...
    SPAWN_NO_MEMORY = ...
    UNIX_PROCESS_ID_UNKNOWN = ...
    INVALID_SIGNATURE = ...
    INVALID_FILE_CONTENT = ...
    SELINUX_SECURITY_CONTEXT_UNKNOWN = ...
    ADT_AUDIT_DATA_UNKNOWN = ...
    OBJECT_PATH_IN_USE = ...
    UNKNOWN_OBJECT = ...
    UNKNOWN_INTERFACE = ...
    UNKNOWN_PROPERTY = ...
    PROPERTY_READ_ONLY = ...

class DBusMessageByteOrder(GObject.GEnum): 
    BIG_ENDIAN = ...
    LITTLE_ENDIAN = ...

class DBusMessageHeaderField(GObject.GEnum): 
    INVALID = ...
    PATH = ...
    INTERFACE = ...
    MEMBER = ...
    ERROR_NAME = ...
    REPLY_SERIAL = ...
    DESTINATION = ...
    SENDER = ...
    SIGNATURE = ...
    NUM_UNIX_FDS = ...

class DBusMessageType(GObject.GEnum): 
    INVALID = ...
    METHOD_CALL = ...
    METHOD_RETURN = ...
    ERROR = ...
    SIGNAL = ...

class DataStreamByteOrder(GObject.GEnum): 
    BIG_ENDIAN = ...
    LITTLE_ENDIAN = ...
    HOST_ENDIAN = ...

class DataStreamNewlineType(GObject.GEnum): 
    LF = ...
    CR = ...
    CR_LF = ...
    ANY = ...

class DriveStartStopType(GObject.GEnum): 
    UNKNOWN = ...
    SHUTDOWN = ...
    NETWORK = ...
    MULTIDISK = ...
    PASSWORD = ...

class EmblemOrigin(GObject.GEnum): 
    UNKNOWN = ...
    DEVICE = ...
    LIVEMETADATA = ...
    TAG = ...

class FileAttributeStatus(GObject.GEnum): 
    UNSET = ...
    SET = ...
    ERROR_SETTING = ...

class FileAttributeType(GObject.GEnum): 
    INVALID = ...
    STRING = ...
    BYTE_STRING = ...
    BOOLEAN = ...
    UINT32 = ...
    INT32 = ...
    UINT64 = ...
    INT64 = ...
    OBJECT = ...
    STRINGV = ...

class FileMonitorEvent(GObject.GEnum): 
    CHANGED = ...
    CHANGES_DONE_HINT = ...
    DELETED = ...
    CREATED = ...
    ATTRIBUTE_CHANGED = ...
    PRE_UNMOUNT = ...
    UNMOUNTED = ...
    MOVED = ...
    RENAMED = ...
    MOVED_IN = ...
    MOVED_OUT = ...

class FileType(GObject.GEnum): 
    UNKNOWN = ...
    REGULAR = ...
    DIRECTORY = ...
    SYMBOLIC_LINK = ...
    SPECIAL = ...
    SHORTCUT = ...
    MOUNTABLE = ...

class FilesystemPreviewType(GObject.GEnum): 
    IF_ALWAYS = ...
    IF_LOCAL = ...
    NEVER = ...

class IOErrorEnum(GObject.GEnum): 
    FAILED = ...
    NOT_FOUND = ...
    EXISTS = ...
    IS_DIRECTORY = ...
    NOT_DIRECTORY = ...
    NOT_EMPTY = ...
    NOT_REGULAR_FILE = ...
    NOT_SYMBOLIC_LINK = ...
    NOT_MOUNTABLE_FILE = ...
    FILENAME_TOO_LONG = ...
    INVALID_FILENAME = ...
    TOO_MANY_LINKS = ...
    NO_SPACE = ...
    INVALID_ARGUMENT = ...
    PERMISSION_DENIED = ...
    NOT_SUPPORTED = ...
    NOT_MOUNTED = ...
    ALREADY_MOUNTED = ...
    CLOSED = ...
    CANCELLED = ...
    PENDING = ...
    READ_ONLY = ...
    CANT_CREATE_BACKUP = ...
    WRONG_ETAG = ...
    TIMED_OUT = ...
    WOULD_RECURSE = ...
    BUSY = ...
    WOULD_BLOCK = ...
    HOST_NOT_FOUND = ...
    WOULD_MERGE = ...
    FAILED_HANDLED = ...
    TOO_MANY_OPEN_FILES = ...
    NOT_INITIALIZED = ...
    ADDRESS_IN_USE = ...
    PARTIAL_INPUT = ...
    INVALID_DATA = ...
    DBUS_ERROR = ...
    HOST_UNREACHABLE = ...
    NETWORK_UNREACHABLE = ...
    CONNECTION_REFUSED = ...
    PROXY_FAILED = ...
    PROXY_AUTH_FAILED = ...
    PROXY_NEED_AUTH = ...
    PROXY_NOT_ALLOWED = ...
    BROKEN_PIPE = ...
    CONNECTION_CLOSED = ...
    NOT_CONNECTED = ...
    MESSAGE_TOO_LARGE = ...
    NO_SUCH_DEVICE = ...

class IOModuleScopeFlags(GObject.GEnum): 
    NONE = ...
    BLOCK_DUPLICATES = ...

class MemoryMonitorWarningLevel(GObject.GEnum): 
    LOW = ...
    MEDIUM = ...
    CRITICAL = ...

class MountOperationResult(GObject.GEnum): 
    HANDLED = ...
    ABORTED = ...
    UNHANDLED = ...

class NetworkConnectivity(GObject.GEnum): 
    LOCAL = ...
    LIMITED = ...
    PORTAL = ...
    FULL = ...

class NotificationPriority(GObject.GEnum): 
    NORMAL = ...
    LOW = ...
    HIGH = ...
    URGENT = ...

class PasswordSave(GObject.GEnum): 
    NEVER = ...
    FOR_SESSION = ...
    PERMANENTLY = ...

class PollableReturn(GObject.GEnum): 
    FAILED = ...
    OK = ...
    WOULD_BLOCK = ...

class ResolverError(GObject.GEnum): 
    NOT_FOUND = ...
    TEMPORARY_FAILURE = ...
    INTERNAL = ...

class ResolverRecordType(GObject.GEnum): 
    SRV = ...
    MX = ...
    TXT = ...
    SOA = ...
    NS = ...

class ResourceError(GObject.GEnum): 
    NOT_FOUND = ...
    INTERNAL = ...

class SocketClientEvent(GObject.GEnum): 
    RESOLVING = ...
    RESOLVED = ...
    CONNECTING = ...
    CONNECTED = ...
    PROXY_NEGOTIATING = ...
    PROXY_NEGOTIATED = ...
    TLS_HANDSHAKING = ...
    TLS_HANDSHAKED = ...
    COMPLETE = ...

class SocketFamily(GObject.GEnum): 
    INVALID = ...
    UNIX = ...
    IPV4 = ...
    IPV6 = ...

class SocketListenerEvent(GObject.GEnum): 
    BINDING = ...
    BOUND = ...
    LISTENING = ...
    LISTENED = ...

class SocketProtocol(GObject.GEnum): 
    UNKNOWN = ...
    DEFAULT = ...
    TCP = ...
    UDP = ...
    SCTP = ...

class SocketType(GObject.GEnum): 
    INVALID = ...
    STREAM = ...
    DATAGRAM = ...
    SEQPACKET = ...

class TlsAuthenticationMode(GObject.GEnum): 
    NONE = ...
    REQUESTED = ...
    REQUIRED = ...

class TlsCertificateRequestFlags(GObject.GEnum): 
    NONE = ...

class TlsChannelBindingError(GObject.GEnum): 
    NOT_IMPLEMENTED = ...
    INVALID_STATE = ...
    NOT_AVAILABLE = ...
    NOT_SUPPORTED = ...
    GENERAL_ERROR = ...

class TlsChannelBindingType(GObject.GEnum): 
    UNIQUE = ...
    SERVER_END_POINT = ...
    EXPORTER = ...

class TlsDatabaseLookupFlags(GObject.GEnum): 
    NONE = ...
    KEYPAIR = ...

class TlsError(GObject.GEnum): 
    UNAVAILABLE = ...
    MISC = ...
    BAD_CERTIFICATE = ...
    NOT_TLS = ...
    HANDSHAKE = ...
    CERTIFICATE_REQUIRED = ...
    EOF = ...
    INAPPROPRIATE_FALLBACK = ...
    BAD_CERTIFICATE_PASSWORD = ...

class TlsInteractionResult(GObject.GEnum): 
    UNHANDLED = ...
    HANDLED = ...
    FAILED = ...

class TlsProtocolVersion(GObject.GEnum): 
    UNKNOWN = ...
    SSL_3_0 = ...
    TLS_1_0 = ...
    TLS_1_1 = ...
    TLS_1_2 = ...
    TLS_1_3 = ...
    DTLS_1_0 = ...
    DTLS_1_2 = ...

class TlsRehandshakeMode(GObject.GEnum): 
    NEVER = ...
    SAFELY = ...
    UNSAFELY = ...

class UnixSocketAddressType(GObject.GEnum): 
    INVALID = ...
    ANONYMOUS = ...
    PATH = ...
    ABSTRACT = ...
    ABSTRACT_PADDED = ...

class ZlibCompressorFormat(GObject.GEnum): 
    ZLIB = ...
    GZIP = ...
    RAW = ...

