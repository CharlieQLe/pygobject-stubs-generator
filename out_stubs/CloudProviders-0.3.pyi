from gi.repository import Gio, GObject, GLib, GLib, Gio

ACCOUNT_DBUS_IFACE: str
PROVIDER_DBUS_IFACE: str

def dbus_account_interface_info() -> Gio.DBusInterfaceInfo: ...
def dbus_account_override_properties(klass: GObject.ObjectClass, property_id_begin: int) -> int: ...
def dbus_provider_interface_info() -> Gio.DBusInterfaceInfo: ...
def dbus_provider_override_properties(klass: GObject.ObjectClass, property_id_begin: int) -> int: ...

class Account(GObject.Object): 
    @classmethod
    def new(cls, proxy: Gio.DBusProxy) -> Account: ...
    def get_action_group(self) -> Gio.ActionGroup: ...
    def get_icon(self) -> Gio.Icon: ...
    def get_menu_model(self) -> Gio.MenuModel: ...
    def get_name(self) -> str: ...
    def get_path(self) -> str: ...
    def get_status(self) -> AccountStatus: ...
    def get_status_details(self) -> str: ...

class AccountExporter(GObject.Object): 
    @classmethod
    def new(cls, provider: ProviderExporter, bus_name: str) -> AccountExporter: ...
    def set_action_group(self, action_group: Gio.ActionGroup) -> None: ...
    def set_icon(self, icon: Gio.Icon) -> None: ...
    def set_menu_model(self, menu_model: Gio.MenuModel) -> None: ...
    def set_name(self, name: str) -> None: ...
    def set_path(self, path: str) -> None: ...
    def set_status(self, status: AccountStatus) -> None: ...
    def set_status_details(self, status_details: str) -> None: ...

class Collector(GObject.Object): 
    @classmethod
    def dup_singleton(cls) -> Collector: ...
    def get_providers(self) -> GLib.List: ...
    def update(self) -> None: ...

class DbusAccountProxy(Gio.DBusProxy, DbusAccount, Gio.AsyncInitable, Gio.DBusInterface, Gio.Initable): 
    @classmethod
    def new_finish(cls, res: Gio.AsyncResult) -> DbusAccountProxy: ...
    @classmethod
    def new(cls, connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: str | None, object_path: str, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
    @classmethod
    def new_for_bus(cls, bus_type: Gio.BusType, flags: Gio.DBusProxyFlags, name: str, object_path: str, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...

class DbusAccountSkeleton(Gio.DBusInterfaceSkeleton, DbusAccount, Gio.DBusInterface): 
    @classmethod
    def new(cls) -> DbusAccountSkeleton: ...

class DbusObjectManagerClient(Gio.DBusObjectManagerClient, Gio.AsyncInitable, Gio.DBusObjectManager, Gio.Initable): 
    @classmethod
    def new_finish(cls, res: Gio.AsyncResult) -> DbusObjectManagerClient: ...
    @classmethod
    def get_proxy_type(cls, manager: Gio.DBusObjectManagerClient, object_path: str, interface_name: str | None, user_data: object | None) -> GObject.Type: ...
    @classmethod
    def new(cls, connection: Gio.DBusConnection, flags: Gio.DBusObjectManagerClientFlags, name: str | None, object_path: str, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
    @classmethod
    def new_for_bus(cls, bus_type: Gio.BusType, flags: Gio.DBusObjectManagerClientFlags, name: str, object_path: str, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...

class DbusObjectProxy(Gio.DBusObjectProxy, DbusObject, Gio.DBusObject): 
    @classmethod
    def new(cls, connection: Gio.DBusConnection, object_path: str) -> DbusObjectProxy: ...

class DbusObjectSkeleton(Gio.DBusObjectSkeleton, DbusObject, Gio.DBusObject): 
    @classmethod
    def new(cls, object_path: str) -> DbusObjectSkeleton: ...
    def set_account(self, interface_: DbusAccount | None) -> None: ...
    def set_provider(self, interface_: DbusProvider | None) -> None: ...

class DbusProviderProxy(Gio.DBusProxy, DbusProvider, Gio.AsyncInitable, Gio.DBusInterface, Gio.Initable): 
    @classmethod
    def new_finish(cls, res: Gio.AsyncResult) -> DbusProviderProxy: ...
    @classmethod
    def new(cls, connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: str | None, object_path: str, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
    @classmethod
    def new_for_bus(cls, bus_type: Gio.BusType, flags: Gio.DBusProxyFlags, name: str, object_path: str, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...

class DbusProviderSkeleton(Gio.DBusInterfaceSkeleton, DbusProvider, Gio.DBusInterface): 
    @classmethod
    def new(cls) -> DbusProviderSkeleton: ...

class Provider(GObject.Object): 
    @classmethod
    def new(cls, bus_name: str, object_path: str) -> Provider: ...
    def get_accounts(self) -> GLib.List: ...
    def get_name(self) -> str: ...

class ProviderExporter(GObject.Object): 
    @classmethod
    def new(cls, bus: Gio.DBusConnection, bus_name: str, bus_path: str) -> ProviderExporter: ...
    def get_name(self) -> str: ...
    def remove_account(self, account: AccountExporter) -> None: ...
    def set_name(self, name: str) -> None: ...

class DbusAccount: 
    def get_icon(self) -> str | None: ...
    def get_name(self) -> str | None: ...
    def get_path(self) -> str | None: ...
    def get_status(self) -> int: ...
    def get_status_details(self) -> str | None: ...
    def dup_icon(self) -> str | None: ...
    def dup_name(self) -> str | None: ...
    def dup_path(self) -> str | None: ...
    def dup_status_details(self) -> str | None: ...
    def get_icon(self) -> str | None: ...
    def get_name(self) -> str | None: ...
    def get_path(self) -> str | None: ...
    def get_status(self) -> int: ...
    def get_status_details(self) -> str | None: ...
    def set_icon(self, value: str) -> None: ...
    def set_name(self, value: str) -> None: ...
    def set_path(self, value: str) -> None: ...
    def set_status(self, value: int) -> None: ...
    def set_status_details(self, value: str) -> None: ...
class DbusObject(Gio.DBusObject): 
    def get_account(self) -> DbusAccount | None: ...
    def get_provider(self) -> DbusProvider | None: ...
    def peek_account(self) -> DbusAccount | None: ...
    def peek_provider(self) -> DbusProvider | None: ...
class DbusProvider: 
    def get_name(self) -> str | None: ...
    def dup_name(self) -> str | None: ...
    def get_name(self) -> str | None: ...
    def set_name(self, value: str) -> None: ...

class AccountStatus(GObject.GEnum): 
    INVALID = ...
    IDLE = ...
    SYNCING = ...
    ERROR = ...

