from gi.repository import GLib, Gio, GModule, Gio, GObject

PIXBUF_MAJOR: int
PIXBUF_MICRO: int
PIXBUF_MINOR: int
PIXBUF_VERSION: str

def pixbuf_error_quark() -> GLib.Quark: ...

class Pixbuf(GObject.Object, Gio.Icon, Gio.LoadableIcon): 
    @classmethod
    def new(cls, colorspace: Colorspace, has_alpha: bool, bits_per_sample: int, width: int, height: int) -> Pixbuf | None: ...
    @classmethod
    def calculate_rowstride(cls, colorspace: Colorspace, has_alpha: bool, bits_per_sample: int, width: int, height: int) -> int: ...
    @classmethod
    def get_file_info(cls, filename: filename, width: int, height: int) -> PixbufFormat | None: ...
    @classmethod
    def get_file_info_async(cls, filename: filename, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
    @classmethod
    def get_file_info_finish(cls, async_result: Gio.AsyncResult, width: int, height: int) -> PixbufFormat | None: ...
    @classmethod
    def get_formats(cls) -> GLib.SList: ...
    @classmethod
    def init_modules(cls, path: str) -> bool: ...
    @classmethod
    def new_from_stream_async(cls, stream: Gio.InputStream, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
    @classmethod
    def new_from_stream_at_scale_async(cls, stream: Gio.InputStream, width: int, height: int, preserve_aspect_ratio: bool, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
    @classmethod
    def save_to_stream_finish(cls, async_result: Gio.AsyncResult) -> bool: ...
    def add_alpha(self, substitute_color: bool, r: int, g: int, b: int) -> Pixbuf: ...
    def apply_embedded_orientation(self) -> Pixbuf | None: ...
    def composite(self, dest: Pixbuf, dest_x: int, dest_y: int, dest_width: int, dest_height: int, offset_x: float, offset_y: float, scale_x: float, scale_y: float, interp_type: InterpType, overall_alpha: int) -> None: ...
    def composite_color(self, dest: Pixbuf, dest_x: int, dest_y: int, dest_width: int, dest_height: int, offset_x: float, offset_y: float, scale_x: float, scale_y: float, interp_type: InterpType, overall_alpha: int, check_x: int, check_y: int, check_size: int, color1: int, color2: int) -> None: ...
    def composite_color_simple(self, dest_width: int, dest_height: int, interp_type: InterpType, overall_alpha: int, check_size: int, color1: int, color2: int) -> Pixbuf | None: ...
    def copy(self) -> Pixbuf | None: ...
    def copy_area(self, src_x: int, src_y: int, width: int, height: int, dest_pixbuf: Pixbuf, dest_x: int, dest_y: int) -> None: ...
    def copy_options(self, dest_pixbuf: Pixbuf) -> bool: ...
    def fill(self, pixel: int) -> None: ...
    def flip(self, horizontal: bool) -> Pixbuf | None: ...
    def get_bits_per_sample(self) -> int: ...
    def get_byte_length(self) -> gsize: ...
    def get_colorspace(self) -> Colorspace: ...
    def get_has_alpha(self) -> bool: ...
    def get_height(self) -> int: ...
    def get_n_channels(self) -> int: ...
    def get_option(self, key: str) -> str | None: ...
    def get_options(self) -> GLib.HashTable: ...
    def get_pixels(self) -> list[int]: ...
    def get_pixels_with_length(self, length: int) -> list[int]: ...
    def get_rowstride(self) -> int: ...
    def get_width(self) -> int: ...
    def new_subpixbuf(self, src_x: int, src_y: int, width: int, height: int) -> Pixbuf: ...
    def read_pixel_bytes(self) -> GLib.Bytes: ...
    def read_pixels(self) -> int: ...
    def ref(self) -> Pixbuf: ...
    def remove_option(self, key: str) -> bool: ...
    def rotate_simple(self, angle: PixbufRotation) -> Pixbuf | None: ...
    def saturate_and_pixelate(self, dest: Pixbuf, saturation: float, pixelate: bool) -> None: ...
    def save(self, filename: filename, type: str, error: GLib.Error | None) -> bool: ...
    def save_to_buffer(self, buffer: list[int], buffer_size: gsize, type: str, error: GLib.Error | None) -> bool: ...
    def save_to_bufferv(self, buffer: list[int], buffer_size: gsize, type: str, option_keys: list[str] | None, option_values: list[str] | None) -> bool: ...
    def save_to_callback(self, save_func: PixbufSaveFunc, user_data: object | None, type: str, error: GLib.Error | None) -> bool: ...
    def save_to_callbackv(self, save_func: PixbufSaveFunc, user_data: object | None, type: str, option_keys: list[str] | None, option_values: list[str] | None) -> bool: ...
    def save_to_stream(self, stream: Gio.OutputStream, type: str, cancellable: Gio.Cancellable | None, error: GLib.Error | None) -> bool: ...
    def save_to_stream_async(self, stream: Gio.OutputStream, type: str, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def save_to_streamv(self, stream: Gio.OutputStream, type: str, option_keys: list[str] | None, option_values: list[str] | None, cancellable: Gio.Cancellable | None) -> bool: ...
    def save_to_streamv_async(self, stream: Gio.OutputStream, type: str, option_keys: list[str] | None, option_values: list[str] | None, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def savev(self, filename: filename, type: str, option_keys: list[str] | None, option_values: list[str] | None) -> bool: ...
    def scale(self, dest: Pixbuf, dest_x: int, dest_y: int, dest_width: int, dest_height: int, offset_x: float, offset_y: float, scale_x: float, scale_y: float, interp_type: InterpType) -> None: ...
    def scale_simple(self, dest_width: int, dest_height: int, interp_type: InterpType) -> Pixbuf | None: ...
    def set_option(self, key: str, value: str) -> bool: ...
    def unref(self) -> None: ...

class PixbufAnimation(GObject.Object): 
    @classmethod
    def new_from_file(cls, filename: filename) -> PixbufAnimation | None: ...
    @classmethod
    def new_from_stream_async(cls, stream: Gio.InputStream, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def get_height(self) -> int: ...
    def get_iter(self, start_time: GLib.TimeVal | None) -> PixbufAnimationIter: ...
    def get_static_image(self) -> Pixbuf: ...
    def get_width(self) -> int: ...
    def is_static_image(self) -> bool: ...
    def ref(self) -> PixbufAnimation: ...
    def unref(self) -> None: ...

class PixbufAnimationIter(GObject.Object): 
    def advance(self, current_time: GLib.TimeVal | None) -> bool: ...
    def get_delay_time(self) -> int: ...
    def get_pixbuf(self) -> Pixbuf: ...
    def on_currently_loading_frame(self) -> bool: ...

class PixbufLoader(GObject.Object): 
    @classmethod
    def new(cls) -> PixbufLoader: ...
    def close(self) -> bool: ...
    def get_animation(self) -> PixbufAnimation | None: ...
    def get_format(self) -> PixbufFormat | None: ...
    def get_pixbuf(self) -> Pixbuf | None: ...
    def set_size(self, width: int, height: int) -> None: ...
    def write(self, buf: list[int], count: gsize) -> bool: ...
    def write_bytes(self, buffer: GLib.Bytes) -> bool: ...

class PixbufNonAnim(PixbufAnimation): 
    @classmethod
    def new(cls, pixbuf: Pixbuf) -> PixbufAnimation: ...

class PixbufSimpleAnim(PixbufAnimation): 
    @classmethod
    def new(cls, width: int, height: int, rate: float) -> PixbufSimpleAnim: ...
    def add_frame(self, pixbuf: Pixbuf) -> None: ...
    def get_loop(self) -> bool: ...
    def set_loop(self, loop: bool) -> None: ...

class PixbufSimpleAnimIter(PixbufAnimationIter): ...

class PixbufFormatFlags(GObject.GFlag): 
    WRITABLE = ...
    SCALABLE = ...
    THREADSAFE = ...

class Colorspace(GObject.GEnum): 
    RGB = ...

class InterpType(GObject.GEnum): 
    NEAREST = ...
    TILES = ...
    BILINEAR = ...
    HYPER = ...

class PixbufAlphaMode(GObject.GEnum): 
    BILEVEL = ...
    FULL = ...

class PixbufError(GObject.GEnum): 
    CORRUPT_IMAGE = ...
    INSUFFICIENT_MEMORY = ...
    BAD_OPTION = ...
    UNKNOWN_TYPE = ...
    UNSUPPORTED_OPERATION = ...
    FAILED = ...
    INCOMPLETE_ANIMATION = ...

class PixbufRotation(GObject.GEnum): 
    NONE = ...
    COUNTERCLOCKWISE = ...
    UPSIDEDOWN = ...
    CLOCKWISE = ...

