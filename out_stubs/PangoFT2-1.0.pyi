from gi.repository import Pango, freetype2, GLib, PangoFc, freetype2

def font_get_coverage(font: Pango.Font, language: Pango.Language) -> Pango.Coverage: ...
def font_get_face(font: Pango.Font) -> freetype2.Face: ...
def font_get_kerning(font: Pango.Font, left: Pango.Glyph, right: Pango.Glyph) -> int: ...
def get_context(dpi_x: float, dpi_y: float) -> Pango.Context: ...
def get_unknown_glyph(font: Pango.Font) -> Pango.Glyph: ...
def render(bitmap: freetype2.Bitmap, font: Pango.Font, glyphs: Pango.GlyphString, x: int, y: int) -> None: ...
def render_layout(bitmap: freetype2.Bitmap, layout: Pango.Layout, x: int, y: int) -> None: ...
def render_layout_line(bitmap: freetype2.Bitmap, line: Pango.LayoutLine, x: int, y: int) -> None: ...
def render_layout_line_subpixel(bitmap: freetype2.Bitmap, line: Pango.LayoutLine, x: int, y: int) -> None: ...
def render_layout_subpixel(bitmap: freetype2.Bitmap, layout: Pango.Layout, x: int, y: int) -> None: ...
def render_transformed(bitmap: freetype2.Bitmap, matrix: Pango.Matrix, font: Pango.Font, glyphs: Pango.GlyphString, x: int, y: int) -> None: ...
def shutdown_display() -> None: ...

class FontMap(PangoFc.FontMap, Gio.ListModel): 
    @classmethod
    def new(cls) -> Pango.FontMap: ...
    @classmethod
    def for_display(cls) -> Pango.FontMap: ...
    def create_context(self) -> Pango.Context: ...
    def set_default_substitute(self, func: SubstituteFunc, data: object, notify: GLib.DestroyNotify) -> None: ...
    def set_resolution(self, dpi_x: float, dpi_y: float) -> None: ...
    def substitute_changed(self) -> None: ...

