from gi.repository import GLib, GObject, GObject

MAJOR_VERSION: int
MICRO_VERSION: int
MINOR_VERSION: int
OPTIONS_USE_DFG: str
OPTIONS_USE_FTL: str
OPTIONS_USE_JIT: str
OPTIONS_USE_LLINT: str

def get_major_version() -> int: ...
def get_micro_version() -> int: ...
def get_minor_version() -> int: ...
def options_foreach(function: OptionsFunc, user_data: object | None) -> None: ...
def options_get_boolean(option: str, value: bool) -> bool: ...
def options_get_double(option: str, value: float) -> bool: ...
def options_get_int(option: str, value: int) -> bool: ...
def options_get_option_group() -> GLib.OptionGroup: ...
def options_get_range_string(option: str, value: str) -> bool: ...
def options_get_size(option: str, value: gsize) -> bool: ...
def options_get_string(option: str, value: str) -> bool: ...
def options_get_uint(option: str, value: int) -> bool: ...
def options_set_boolean(option: str, value: bool) -> bool: ...
def options_set_double(option: str, value: float) -> bool: ...
def options_set_int(option: str, value: int) -> bool: ...
def options_set_range_string(option: str, value: str) -> bool: ...
def options_set_size(option: str, value: gsize) -> bool: ...
def options_set_string(option: str, value: str) -> bool: ...
def options_set_uint(option: str, value: int) -> bool: ...

class Class(GObject.Object): 
    def add_constructor(self, name: str | None, callback: GObject.Callback, user_data: object | None, destroy_notify: GLib.DestroyNotify | None, return_type: GObject.Type, n_params: int) -> Value: ...
    def add_constructor_variadic(self, name: str | None, callback: GObject.Callback, user_data: object | None, destroy_notify: GLib.DestroyNotify | None, return_type: GObject.Type) -> Value: ...
    def add_constructorv(self, name: str | None, callback: GObject.Callback, user_data: object | None, destroy_notify: GLib.DestroyNotify | None, return_type: GObject.Type, n_parameters: int, parameter_types: list[GObject.Type] | None) -> Value: ...
    def add_method(self, name: str, callback: GObject.Callback, user_data: object | None, destroy_notify: GLib.DestroyNotify | None, return_type: GObject.Type, n_params: int) -> None: ...
    def add_method_variadic(self, name: str, callback: GObject.Callback, user_data: object | None, destroy_notify: GLib.DestroyNotify | None, return_type: GObject.Type) -> None: ...
    def add_methodv(self, name: str, callback: GObject.Callback, user_data: object | None, destroy_notify: GLib.DestroyNotify | None, return_type: GObject.Type, n_parameters: int, parameter_types: list[GObject.Type] | None) -> None: ...
    def add_property(self, name: str, property_type: GObject.Type, getter: GObject.Callback | None, setter: GObject.Callback | None, user_data: object | None, destroy_notify: GLib.DestroyNotify | None) -> None: ...
    def get_name(self) -> str: ...
    def get_parent(self) -> Class: ...

class Context(GObject.Object): 
    @classmethod
    def new(cls) -> Context: ...
    @classmethod
    def get_current(cls) -> Context | None: ...
    def check_syntax(self, code: str, length: gssize, mode: CheckSyntaxMode, uri: str, line_number: int, exception: Exception) -> CheckSyntaxResult: ...
    def clear_exception(self) -> None: ...
    def evaluate(self, code: str, length: gssize) -> Value: ...
    def evaluate_in_object(self, code: str, length: gssize, object_instance: object | None, object_class: Class | None, uri: str, line_number: int, object: Value) -> Value: ...
    def evaluate_with_source_uri(self, code: str, length: gssize, uri: str, line_number: int) -> Value: ...
    def get_exception(self) -> Exception | None: ...
    def get_global_object(self) -> Value: ...
    def get_value(self, name: str) -> Value: ...
    def get_virtual_machine(self) -> VirtualMachine: ...
    def pop_exception_handler(self) -> None: ...
    def push_exception_handler(self, handler: ExceptionHandler, user_data: object | None, destroy_notify: GLib.DestroyNotify | None) -> None: ...
    def register_class(self, name: str, parent_class: Class | None, vtable: ClassVTable | None, destroy_notify: GLib.DestroyNotify | None) -> Class: ...
    def set_value(self, name: str, value: Value) -> None: ...
    def throw(self, error_message: str) -> None: ...
    def throw_exception(self, exception: Exception) -> None: ...
    def throw_printf(self, format: str) -> None: ...
    def throw_with_name(self, error_name: str, error_message: str) -> None: ...
    def throw_with_name_printf(self, error_name: str, format: str) -> None: ...

class Exception(GObject.Object): 
    @classmethod
    def new(cls, context: Context, message: str) -> Exception: ...
    def get_backtrace_string(self) -> str | None: ...
    def get_column_number(self) -> int: ...
    def get_line_number(self) -> int: ...
    def get_message(self) -> str: ...
    def get_name(self) -> str: ...
    def get_source_uri(self) -> str | None: ...
    def report(self) -> str: ...
    def to_string(self) -> str: ...

class Value(GObject.Object): 
    @classmethod
    def new_array(cls, context: Context, first_item_type: GObject.Type) -> Value: ...
    def array_buffer_get_data(self, size: gsize | None) -> object | None: ...
    def array_buffer_get_size(self) -> gsize: ...
    def constructor_call(self, first_parameter_type: GObject.Type) -> Value: ...
    def constructor_callv(self, n_parameters: int, parameters: list[Value] | None) -> Value: ...
    def function_call(self, first_parameter_type: GObject.Type) -> Value: ...
    def function_callv(self, n_parameters: int, parameters: list[Value] | None) -> Value: ...
    def get_context(self) -> Context: ...
    def is_array(self) -> bool: ...
    def is_array_buffer(self) -> bool: ...
    def is_boolean(self) -> bool: ...
    def is_constructor(self) -> bool: ...
    def is_function(self) -> bool: ...
    def is_null(self) -> bool: ...
    def is_number(self) -> bool: ...
    def is_object(self) -> bool: ...
    def is_string(self) -> bool: ...
    def is_typed_array(self) -> bool: ...
    def is_undefined(self) -> bool: ...
    def new_typed_array_with_buffer(self, type: TypedArrayType, offset: gsize, length: gssize) -> Value: ...
    def object_define_property_accessor(self, property_name: str, flags: ValuePropertyFlags, property_type: GObject.Type, getter: GObject.Callback | None, setter: GObject.Callback | None, user_data: object | None, destroy_notify: GLib.DestroyNotify | None) -> None: ...
    def object_define_property_data(self, property_name: str, flags: ValuePropertyFlags, property_value: Value | None) -> None: ...
    def object_delete_property(self, name: str) -> bool: ...
    def object_enumerate_properties(self) -> list[str] | None: ...
    def object_get_property(self, name: str) -> Value: ...
    def object_get_property_at_index(self, index: int) -> Value: ...
    def object_has_property(self, name: str) -> bool: ...
    def object_invoke_method(self, name: str, first_parameter_type: GObject.Type) -> Value: ...
    def object_invoke_methodv(self, name: str, n_parameters: int, parameters: list[Value] | None) -> Value: ...
    def object_is_instance_of(self, name: str) -> bool: ...
    def object_set_property(self, name: str, property: Value) -> None: ...
    def object_set_property_at_index(self, index: int, property: Value) -> None: ...
    def to_boolean(self) -> bool: ...
    def to_double(self) -> float: ...
    def to_int32(self) -> int: ...
    def to_json(self, indent: int) -> str: ...
    def to_string(self) -> str: ...
    def to_string_as_bytes(self) -> GLib.Bytes: ...
    def typed_array_get_buffer(self) -> Value: ...
    def typed_array_get_data(self, length: gsize | None) -> object | None: ...
    def typed_array_get_length(self) -> gsize: ...
    def typed_array_get_offset(self) -> gsize: ...
    def typed_array_get_size(self) -> gsize: ...
    def typed_array_get_type(self) -> TypedArrayType: ...

class VirtualMachine(GObject.Object): 
    @classmethod
    def new(cls) -> VirtualMachine: ...

class WeakValue(GObject.Object): 
    @classmethod
    def new(cls, value: Value) -> WeakValue: ...
    def get_value(self) -> Value: ...

class ValuePropertyFlags(GObject.GFlag): 
    CONFIGURABLE = ...
    ENUMERABLE = ...
    WRITABLE = ...

class CheckSyntaxMode(GObject.GEnum): 
    SCRIPT = ...
    MODULE = ...

class CheckSyntaxResult(GObject.GEnum): 
    SUCCESS = ...
    RECOVERABLE_ERROR = ...
    IRRECOVERABLE_ERROR = ...
    UNTERMINATED_LITERAL_ERROR = ...
    OUT_OF_MEMORY_ERROR = ...
    STACK_OVERFLOW_ERROR = ...

class OptionType(GObject.GEnum): 
    BOOLEAN = ...
    INT = ...
    UINT = ...
    SIZE = ...
    DOUBLE = ...
    STRING = ...
    RANGE_STRING = ...

class TypedArrayType(GObject.GEnum): 
    NONE = ...
    INT8 = ...
    INT16 = ...
    INT32 = ...
    INT64 = ...
    UINT8 = ...
    UINT8_CLAMPED = ...
    UINT16 = ...
    UINT32 = ...
    UINT64 = ...
    FLOAT32 = ...
    FLOAT64 = ...

