from gi.repository import GLib, Gtk, Pango, Gio, Gdk, GdkPixbuf, Gtk, GObject

def encoding_get_all() -> GLib.SList: ...
def encoding_get_current() -> Encoding: ...
def encoding_get_default_candidates() -> GLib.SList: ...
def encoding_get_from_charset(charset: str) -> Encoding | None: ...
def encoding_get_utf8() -> Encoding: ...
def file_loader_error_quark() -> GLib.Quark: ...
def file_saver_error_quark() -> GLib.Quark: ...
def finalize() -> None: ...
def init() -> None: ...
def scheduler_add(callback: SchedulerCallback, user_data: object | None) -> gsize: ...
def scheduler_add_full(callback: SchedulerCallback, user_data: object | None, notify: GLib.DestroyNotify) -> gsize: ...
def scheduler_remove(handler_id: gsize) -> None: ...
def utils_escape_search_text(text: str) -> str: ...
def utils_unescape_search_text(text: str) -> str: ...

class Buffer(Gtk.TextBuffer): 
    @classmethod
    def new(cls, table: Gtk.TextTagTable | None) -> Buffer: ...
    def backward_iter_to_source_mark(self, iter: Gtk.TextIter, category: str | None) -> bool: ...
    def change_case(self, case_type: ChangeCaseType, start: Gtk.TextIter, end: Gtk.TextIter) -> None: ...
    def create_source_mark(self, name: str | None, category: str, where: Gtk.TextIter) -> Mark: ...
    def create_source_tag(self, tag_name: str | None, first_property_name: str | None) -> Gtk.TextTag: ...
    def ensure_highlight(self, start: Gtk.TextIter, end: Gtk.TextIter) -> None: ...
    def forward_iter_to_source_mark(self, iter: Gtk.TextIter, category: str | None) -> bool: ...
    def get_context_classes_at_iter(self, iter: Gtk.TextIter) -> list[str]: ...
    def get_highlight_matching_brackets(self) -> bool: ...
    def get_highlight_syntax(self) -> bool: ...
    def get_implicit_trailing_newline(self) -> bool: ...
    def get_language(self) -> Language | None: ...
    def get_source_marks_at_iter(self, iter: Gtk.TextIter, category: str | None) -> GLib.SList: ...
    def get_source_marks_at_line(self, line: int, category: str | None) -> GLib.SList: ...
    def get_style_scheme(self) -> StyleScheme | None: ...
    def iter_backward_to_context_class_toggle(self, iter: Gtk.TextIter, context_class: str) -> bool: ...
    def iter_forward_to_context_class_toggle(self, iter: Gtk.TextIter, context_class: str) -> bool: ...
    def iter_has_context_class(self, iter: Gtk.TextIter, context_class: str) -> bool: ...
    def join_lines(self, start: Gtk.TextIter, end: Gtk.TextIter) -> None: ...
    def remove_source_marks(self, start: Gtk.TextIter, end: Gtk.TextIter, category: str | None) -> None: ...
    def set_highlight_matching_brackets(self, highlight: bool) -> None: ...
    def set_highlight_syntax(self, highlight: bool) -> None: ...
    def set_implicit_trailing_newline(self, implicit_trailing_newline: bool) -> None: ...
    def set_language(self, language: Language | None) -> None: ...
    def set_style_scheme(self, scheme: StyleScheme | None) -> None: ...
    def sort_lines(self, start: Gtk.TextIter, end: Gtk.TextIter, flags: SortFlags, column: int) -> None: ...

class Completion(GObject.Object): 
    @classmethod
    def fuzzy_highlight(cls, haystack: str, casefold_query: str) -> Pango.AttrList | None: ...
    @classmethod
    def fuzzy_match(cls, haystack: str | None, casefold_needle: str, priority: int) -> bool: ...
    def add_provider(self, provider: CompletionProvider) -> None: ...
    def block_interactive(self) -> None: ...
    def get_buffer(self) -> Buffer: ...
    def get_page_size(self) -> int: ...
    def get_view(self) -> View: ...
    def hide(self) -> None: ...
    def remove_provider(self, provider: CompletionProvider) -> None: ...
    def set_page_size(self, page_size: int) -> None: ...
    def show(self) -> None: ...
    def unblock_interactive(self) -> None: ...

class CompletionCell(Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget): 
    def get_column(self) -> CompletionColumn: ...
    def get_widget(self) -> Gtk.Widget | None: ...
    def set_gicon(self, gicon: Gio.Icon) -> None: ...
    def set_icon_name(self, icon_name: str) -> None: ...
    def set_markup(self, markup: str) -> None: ...
    def set_paintable(self, paintable: Gdk.Paintable) -> None: ...
    def set_text(self, text: str | None) -> None: ...
    def set_text_with_attributes(self, text: str, attrs: Pango.AttrList) -> None: ...
    def set_widget(self, child: Gtk.Widget) -> None: ...

class CompletionContext(GObject.Object, Gio.ListModel): 
    def get_activation(self) -> CompletionActivation: ...
    def get_bounds(self, begin: Gtk.TextIter, end: Gtk.TextIter) -> bool: ...
    def get_buffer(self) -> Buffer | None: ...
    def get_busy(self) -> bool: ...
    def get_completion(self) -> Completion | None: ...
    def get_empty(self) -> bool: ...
    def get_language(self) -> Language | None: ...
    def get_proposals_for_provider(self, provider: CompletionProvider) -> Gio.ListModel | None: ...
    def get_view(self) -> View | None: ...
    def get_word(self) -> str: ...
    def list_providers(self) -> Gio.ListModel: ...
    def set_proposals_for_provider(self, provider: CompletionProvider, results: Gio.ListModel | None) -> None: ...

class CompletionSnippets(GObject.Object, CompletionProvider): 
    @classmethod
    def new(cls) -> CompletionSnippets: ...

class CompletionWords(GObject.Object, CompletionProvider): 
    @classmethod
    def new(cls, title: str | None) -> CompletionWords: ...
    def register(self, buffer: Gtk.TextBuffer) -> None: ...
    def unregister(self, buffer: Gtk.TextBuffer) -> None: ...

class File(GObject.Object): 
    @classmethod
    def new(cls) -> File: ...
    def check_file_on_disk(self) -> None: ...
    def get_compression_type(self) -> CompressionType: ...
    def get_encoding(self) -> Encoding: ...
    def get_location(self) -> Gio.File: ...
    def get_newline_type(self) -> NewlineType: ...
    def is_deleted(self) -> bool: ...
    def is_externally_modified(self) -> bool: ...
    def is_local(self) -> bool: ...
    def is_readonly(self) -> bool: ...
    def set_location(self, location: Gio.File | None) -> None: ...
    def set_mount_operation_factory(self, callback: MountOperationFactory, user_data: object | None, notify: GLib.DestroyNotify | None) -> None: ...

class FileLoader(GObject.Object): 
    @classmethod
    def new(cls, buffer: Buffer, file: File) -> FileLoader: ...
    def get_buffer(self) -> Buffer: ...
    def get_compression_type(self) -> CompressionType: ...
    def get_encoding(self) -> Encoding: ...
    def get_file(self) -> File: ...
    def get_input_stream(self) -> Gio.InputStream | None: ...
    def get_location(self) -> Gio.File | None: ...
    def get_newline_type(self) -> NewlineType: ...
    def load_async(self, io_priority: int, cancellable: Gio.Cancellable | None, progress_callback: Gio.FileProgressCallback | None, progress_callback_data: object | None, progress_callback_notify: GLib.DestroyNotify | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def load_finish(self, result: Gio.AsyncResult) -> bool: ...
    def set_candidate_encodings(self, candidate_encodings: GLib.SList) -> None: ...

class FileSaver(GObject.Object): 
    @classmethod
    def new(cls, buffer: Buffer, file: File) -> FileSaver: ...
    def get_buffer(self) -> Buffer: ...
    def get_compression_type(self) -> CompressionType: ...
    def get_encoding(self) -> Encoding: ...
    def get_file(self) -> File: ...
    def get_flags(self) -> FileSaverFlags: ...
    def get_location(self) -> Gio.File: ...
    def get_newline_type(self) -> NewlineType: ...
    def save_async(self, io_priority: int, cancellable: Gio.Cancellable | None, progress_callback: Gio.FileProgressCallback | None, progress_callback_data: object | None, progress_callback_notify: GLib.DestroyNotify | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def save_finish(self, result: Gio.AsyncResult) -> bool: ...
    def set_compression_type(self, compression_type: CompressionType) -> None: ...
    def set_encoding(self, encoding: Encoding | None) -> None: ...
    def set_flags(self, flags: FileSaverFlags) -> None: ...
    def set_newline_type(self, newline_type: NewlineType) -> None: ...

class Gutter(Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget): 
    def get_view(self) -> View: ...
    def insert(self, renderer: GutterRenderer, position: int) -> bool: ...
    def remove(self, renderer: GutterRenderer) -> None: ...
    def reorder(self, renderer: GutterRenderer, position: int) -> None: ...

class GutterLines(GObject.Object): 
    def add_class(self, line: int, name: str) -> None: ...
    def add_qclass(self, line: int, qname: GLib.Quark) -> None: ...
    def get_buffer(self) -> Gtk.TextBuffer: ...
    def get_first(self) -> int: ...
    def get_iter_at_line(self, iter: Gtk.TextIter, line: int) -> None: ...
    def get_last(self) -> int: ...
    def get_line_yrange(self, line: int, mode: GutterRendererAlignmentMode, y: int, height: int) -> None: ...
    def get_view(self) -> Gtk.TextView: ...
    def has_any_class(self, line: int) -> bool: ...
    def has_class(self, line: int, name: str) -> bool: ...
    def has_qclass(self, line: int, qname: GLib.Quark) -> bool: ...
    def is_cursor(self, line: int) -> bool: ...
    def is_prelit(self, line: int) -> bool: ...
    def is_selected(self, line: int) -> bool: ...
    def remove_class(self, line: int, name: str) -> None: ...
    def remove_qclass(self, line: int, qname: GLib.Quark) -> None: ...

class GutterRenderer(Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget): 
    def activate(self, iter: Gtk.TextIter, area: Gdk.Rectangle, button: int, state: Gdk.ModifierType, n_presses: int) -> None: ...
    def align_cell(self, line: int, width: float, height: float, x: float, y: float) -> None: ...
    def get_alignment_mode(self) -> GutterRendererAlignmentMode: ...
    def get_buffer(self) -> Buffer | None: ...
    def get_view(self) -> View: ...
    def get_xalign(self) -> float: ...
    def get_xpad(self) -> int: ...
    def get_yalign(self) -> float: ...
    def get_ypad(self) -> int: ...
    def query_activatable(self, iter: Gtk.TextIter, area: Gdk.Rectangle) -> bool: ...
    def set_alignment_mode(self, mode: GutterRendererAlignmentMode) -> None: ...
    def set_xalign(self, xalign: float) -> None: ...
    def set_xpad(self, xpad: int) -> None: ...
    def set_yalign(self, yalign: float) -> None: ...
    def set_ypad(self, ypad: int) -> None: ...

class GutterRendererPixbuf(GutterRenderer, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget): 
    @classmethod
    def new(cls) -> GutterRenderer: ...
    def get_gicon(self) -> Gio.Icon: ...
    def get_icon_name(self) -> str: ...
    def get_paintable(self) -> Gdk.Paintable | None: ...
    def get_pixbuf(self) -> GdkPixbuf.Pixbuf: ...
    def overlay_paintable(self, paintable: Gdk.Paintable) -> None: ...
    def set_gicon(self, icon: Gio.Icon | None) -> None: ...
    def set_icon_name(self, icon_name: str | None) -> None: ...
    def set_paintable(self, paintable: Gdk.Paintable | None) -> None: ...
    def set_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf | None) -> None: ...

class GutterRendererText(GutterRenderer, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget): 
    @classmethod
    def new(cls) -> GutterRenderer: ...
    def measure(self, text: str, width: int, height: int) -> None: ...
    def measure_markup(self, markup: str, width: int, height: int) -> None: ...
    def set_markup(self, markup: str, length: int) -> None: ...
    def set_text(self, text: str, length: int) -> None: ...

class Hover(GObject.Object): 
    def add_provider(self, provider: HoverProvider) -> None: ...
    def remove_provider(self, provider: HoverProvider) -> None: ...

class HoverContext(GObject.Object): 
    def get_bounds(self, begin: Gtk.TextIter, end: Gtk.TextIter) -> bool: ...
    def get_buffer(self) -> Buffer: ...
    def get_iter(self, iter: Gtk.TextIter) -> bool: ...
    def get_view(self) -> View: ...

class HoverDisplay(Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget): 
    def append(self, child: Gtk.Widget) -> None: ...
    def insert_after(self, child: Gtk.Widget, sibling: Gtk.Widget) -> None: ...
    def prepend(self, child: Gtk.Widget) -> None: ...
    def remove(self, child: Gtk.Widget) -> None: ...

class Language(GObject.Object): 
    def get_globs(self) -> list[str] | None: ...
    def get_hidden(self) -> bool: ...
    def get_id(self) -> str: ...
    def get_metadata(self, name: str) -> str | None: ...
    def get_mime_types(self) -> list[str] | None: ...
    def get_name(self) -> str: ...
    def get_section(self) -> str: ...
    def get_style_fallback(self, style_id: str) -> str | None: ...
    def get_style_ids(self) -> list[str] | None: ...
    def get_style_name(self, style_id: str) -> str | None: ...

class LanguageManager(GObject.Object): 
    @classmethod
    def new(cls) -> LanguageManager: ...
    @classmethod
    def get_default(cls) -> LanguageManager: ...
    def append_search_path(self, path: str) -> None: ...
    def get_language(self, id: str) -> Language | None: ...
    def get_language_ids(self) -> list[str] | None: ...
    def get_search_path(self) -> list[str]: ...
    def guess_language(self, filename: filename | None, content_type: str | None) -> Language | None: ...
    def prepend_search_path(self, path: str) -> None: ...
    def set_search_path(self, dirs: list[str] | None) -> None: ...

class Map(View, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Scrollable): 
    @classmethod
    def new(cls) -> Gtk.Widget: ...
    def get_view(self) -> View | None: ...
    def set_view(self, view: View) -> None: ...

class Mark(Gtk.TextMark): 
    @classmethod
    def new(cls, name: str | None, category: str) -> Mark: ...
    def get_category(self) -> str: ...
    def next(self, category: str | None) -> Mark | None: ...
    def prev(self, category: str) -> Mark | None: ...

class MarkAttributes(GObject.Object): 
    @classmethod
    def new(cls) -> MarkAttributes: ...
    def get_background(self, background: Gdk.RGBA) -> bool: ...
    def get_gicon(self) -> Gio.Icon: ...
    def get_icon_name(self) -> str: ...
    def get_pixbuf(self) -> GdkPixbuf.Pixbuf: ...
    def get_tooltip_markup(self, mark: Mark) -> str: ...
    def get_tooltip_text(self, mark: Mark) -> str: ...
    def render_icon(self, widget: Gtk.Widget, size: int) -> Gdk.Paintable: ...
    def set_background(self, background: Gdk.RGBA) -> None: ...
    def set_gicon(self, gicon: Gio.Icon) -> None: ...
    def set_icon_name(self, icon_name: str) -> None: ...
    def set_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf) -> None: ...

class PrintCompositor(GObject.Object): 
    @classmethod
    def new(cls, buffer: Buffer) -> PrintCompositor: ...
    def draw_page(self, context: Gtk.PrintContext, page_nr: int) -> None: ...
    def get_body_font_name(self) -> str: ...
    def get_bottom_margin(self, unit: Gtk.Unit) -> float: ...
    def get_buffer(self) -> Buffer: ...
    def get_footer_font_name(self) -> str: ...
    def get_header_font_name(self) -> str: ...
    def get_highlight_syntax(self) -> bool: ...
    def get_left_margin(self, unit: Gtk.Unit) -> float: ...
    def get_line_numbers_font_name(self) -> str: ...
    def get_n_pages(self) -> int: ...
    def get_pagination_progress(self) -> float: ...
    def get_print_footer(self) -> bool: ...
    def get_print_header(self) -> bool: ...
    def get_print_line_numbers(self) -> int: ...
    def get_right_margin(self, unit: Gtk.Unit) -> float: ...
    def get_tab_width(self) -> int: ...
    def get_top_margin(self, unit: Gtk.Unit) -> float: ...
    def get_wrap_mode(self) -> Gtk.WrapMode: ...
    def ignore_tag(self, tag: Gtk.TextTag) -> None: ...
    def paginate(self, context: Gtk.PrintContext) -> bool: ...
    def set_body_font_name(self, font_name: str) -> None: ...
    def set_bottom_margin(self, margin: float, unit: Gtk.Unit) -> None: ...
    def set_footer_font_name(self, font_name: str | None) -> None: ...
    def set_footer_format(self, separator: bool, left: str | None, center: str | None, right: str | None) -> None: ...
    def set_header_font_name(self, font_name: str | None) -> None: ...
    def set_header_format(self, separator: bool, left: str | None, center: str | None, right: str | None) -> None: ...
    def set_highlight_syntax(self, highlight: bool) -> None: ...
    def set_left_margin(self, margin: float, unit: Gtk.Unit) -> None: ...
    def set_line_numbers_font_name(self, font_name: str | None) -> None: ...
    def set_print_footer(self, print: bool) -> None: ...
    def set_print_header(self, print: bool) -> None: ...
    def set_print_line_numbers(self, interval: int) -> None: ...
    def set_right_margin(self, margin: float, unit: Gtk.Unit) -> None: ...
    def set_tab_width(self, width: int) -> None: ...
    def set_top_margin(self, margin: float, unit: Gtk.Unit) -> None: ...
    def set_wrap_mode(self, wrap_mode: Gtk.WrapMode) -> None: ...

class Region(GObject.Object): 
    @classmethod
    def new(cls, buffer: Gtk.TextBuffer) -> Region: ...
    def add_region(self, region_to_add: Region | None) -> None: ...
    def add_subregion(self, _start: Gtk.TextIter, _end: Gtk.TextIter) -> None: ...
    def get_bounds(self, start: Gtk.TextIter, end: Gtk.TextIter) -> bool: ...
    def get_buffer(self) -> Gtk.TextBuffer | None: ...
    def get_start_region_iter(self, iter: RegionIter) -> None: ...
    def intersect_region(self, region2: Region | None) -> Region | None: ...
    def intersect_subregion(self, _start: Gtk.TextIter, _end: Gtk.TextIter) -> Region | None: ...
    def is_empty(self) -> bool: ...
    def subtract_region(self, region_to_subtract: Region | None) -> None: ...
    def subtract_subregion(self, _start: Gtk.TextIter, _end: Gtk.TextIter) -> None: ...
    def to_string(self) -> str | None: ...

class SearchContext(GObject.Object): 
    @classmethod
    def new(cls, buffer: Buffer, settings: SearchSettings | None) -> SearchContext: ...
    def backward(self, iter: Gtk.TextIter, match_start: Gtk.TextIter, match_end: Gtk.TextIter, has_wrapped_around: bool) -> bool: ...
    def backward_async(self, iter: Gtk.TextIter, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def backward_finish(self, result: Gio.AsyncResult, match_start: Gtk.TextIter, match_end: Gtk.TextIter, has_wrapped_around: bool) -> bool: ...
    def forward(self, iter: Gtk.TextIter, match_start: Gtk.TextIter, match_end: Gtk.TextIter, has_wrapped_around: bool) -> bool: ...
    def forward_async(self, iter: Gtk.TextIter, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def forward_finish(self, result: Gio.AsyncResult, match_start: Gtk.TextIter, match_end: Gtk.TextIter, has_wrapped_around: bool) -> bool: ...
    def get_buffer(self) -> Buffer: ...
    def get_highlight(self) -> bool: ...
    def get_match_style(self) -> Style: ...
    def get_occurrence_position(self, match_start: Gtk.TextIter, match_end: Gtk.TextIter) -> int: ...
    def get_occurrences_count(self) -> int: ...
    def get_regex_error(self) -> GLib.Error | None: ...
    def get_settings(self) -> SearchSettings: ...
    def replace(self, match_start: Gtk.TextIter, match_end: Gtk.TextIter, replace: str, replace_length: int) -> bool: ...
    def replace_all(self, replace: str, replace_length: int) -> int: ...
    def set_highlight(self, highlight: bool) -> None: ...
    def set_match_style(self, match_style: Style | None) -> None: ...

class SearchSettings(GObject.Object): 
    @classmethod
    def new(cls) -> SearchSettings: ...
    def get_at_word_boundaries(self) -> bool: ...
    def get_case_sensitive(self) -> bool: ...
    def get_regex_enabled(self) -> bool: ...
    def get_search_text(self) -> str | None: ...
    def get_wrap_around(self) -> bool: ...
    def set_at_word_boundaries(self, at_word_boundaries: bool) -> None: ...
    def set_case_sensitive(self, case_sensitive: bool) -> None: ...
    def set_regex_enabled(self, regex_enabled: bool) -> None: ...
    def set_search_text(self, search_text: str | None) -> None: ...
    def set_wrap_around(self, wrap_around: bool) -> None: ...

class Snippet(GObject.Object): 
    @classmethod
    def new(cls, trigger: str | None, language_id: str | None) -> Snippet: ...
    def add_chunk(self, chunk: SnippetChunk) -> None: ...
    def copy(self) -> Snippet: ...
    def get_context(self) -> SnippetContext | None: ...
    def get_description(self) -> str: ...
    def get_focus_position(self) -> int: ...
    def get_language_id(self) -> str: ...
    def get_n_chunks(self) -> int: ...
    def get_name(self) -> str: ...
    def get_nth_chunk(self, nth: int) -> SnippetChunk: ...
    def get_trigger(self) -> str | None: ...
    def set_description(self, description: str) -> None: ...
    def set_language_id(self, language_id: str) -> None: ...
    def set_name(self, name: str) -> None: ...
    def set_trigger(self, trigger: str) -> None: ...

class SnippetChunk(GObject.InitiallyUnowned): 
    @classmethod
    def new(cls) -> SnippetChunk: ...
    def copy(self) -> SnippetChunk: ...
    def get_context(self) -> SnippetContext: ...
    def get_focus_position(self) -> int: ...
    def get_spec(self) -> str | None: ...
    def get_text(self) -> str: ...
    def get_text_set(self) -> bool: ...
    def get_tooltip_text(self) -> str: ...
    def set_context(self, context: SnippetContext) -> None: ...
    def set_focus_position(self, focus_position: int) -> None: ...
    def set_spec(self, spec: str) -> None: ...
    def set_text(self, text: str) -> None: ...
    def set_text_set(self, text_set: bool) -> None: ...
    def set_tooltip_text(self, tooltip_text: str) -> None: ...

class SnippetContext(GObject.Object): 
    @classmethod
    def new(cls) -> SnippetContext: ...
    def clear_variables(self) -> None: ...
    def expand(self, input: str) -> str: ...
    def get_variable(self, key: str) -> str | None: ...
    def set_constant(self, key: str, value: str) -> None: ...
    def set_line_prefix(self, line_prefix: str) -> None: ...
    def set_tab_width(self, tab_width: int) -> None: ...
    def set_use_spaces(self, use_spaces: bool) -> None: ...
    def set_variable(self, key: str, value: str) -> None: ...

class SnippetManager(GObject.Object): 
    @classmethod
    def get_default(cls) -> SnippetManager: ...
    def get_search_path(self) -> list[str]: ...
    def get_snippet(self, group: str | None, language_id: str | None, trigger: str) -> Snippet | None: ...
    def list_all(self) -> Gio.ListModel: ...
    def list_groups(self) -> list[str]: ...
    def list_matching(self, group: str | None, language_id: str | None, trigger_prefix: str | None) -> Gio.ListModel: ...
    def set_search_path(self, dirs: list[str] | None) -> None: ...

class SpaceDrawer(GObject.Object): 
    @classmethod
    def new(cls) -> SpaceDrawer: ...
    def bind_matrix_setting(self, settings: Gio.Settings, key: str, flags: Gio.SettingsBindFlags) -> None: ...
    def get_enable_matrix(self) -> bool: ...
    def get_matrix(self) -> GLib.Variant: ...
    def get_types_for_locations(self, locations: SpaceLocationFlags) -> SpaceTypeFlags: ...
    def set_enable_matrix(self, enable_matrix: bool) -> None: ...
    def set_matrix(self, matrix: GLib.Variant | None) -> None: ...
    def set_types_for_locations(self, locations: SpaceLocationFlags, types: SpaceTypeFlags) -> None: ...

class Style(GObject.Object): 
    def apply(self, tag: Gtk.TextTag) -> None: ...
    def copy(self) -> Style: ...

class StyleScheme(GObject.Object): 
    def get_authors(self) -> list[str] | None: ...
    def get_description(self) -> str | None: ...
    def get_filename(self) -> str | None: ...
    def get_id(self) -> str: ...
    def get_metadata(self, name: str) -> str | None: ...
    def get_name(self) -> str: ...
    def get_style(self, style_id: str) -> Style | None: ...

class StyleSchemeChooserButton(Gtk.Button, Gtk.Accessible, Gtk.Actionable, Gtk.Buildable, Gtk.ConstraintTarget, StyleSchemeChooser): 
    @classmethod
    def new(cls) -> Gtk.Widget: ...

class StyleSchemeChooserWidget(Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, StyleSchemeChooser): 
    @classmethod
    def new(cls) -> Gtk.Widget: ...

class StyleSchemeManager(GObject.Object): 
    @classmethod
    def new(cls) -> StyleSchemeManager: ...
    @classmethod
    def get_default(cls) -> StyleSchemeManager: ...
    def append_search_path(self, path: str) -> None: ...
    def force_rescan(self) -> None: ...
    def get_scheme(self, scheme_id: str) -> StyleScheme | None: ...
    def get_scheme_ids(self) -> list[str] | None: ...
    def get_search_path(self) -> list[str]: ...
    def prepend_search_path(self, path: str) -> None: ...
    def set_search_path(self, path: list[str] | None) -> None: ...

class StyleSchemePreview(Gtk.Widget, Gtk.Accessible, Gtk.Actionable, Gtk.Buildable, Gtk.ConstraintTarget): 
    @classmethod
    def new(cls, scheme: StyleScheme) -> Gtk.Widget: ...
    def get_scheme(self) -> StyleScheme: ...
    def get_selected(self) -> bool: ...
    def set_selected(self, selected: bool) -> None: ...

class Tag(Gtk.TextTag): 
    @classmethod
    def new(cls, name: str | None) -> Gtk.TextTag: ...

class View(Gtk.TextView, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Scrollable): 
    @classmethod
    def new(cls) -> Gtk.Widget: ...
    def get_auto_indent(self) -> bool: ...
    def get_background_pattern(self) -> BackgroundPatternType: ...
    def get_completion(self) -> Completion: ...
    def get_enable_snippets(self) -> bool: ...
    def get_gutter(self, window_type: Gtk.TextWindowType) -> Gutter: ...
    def get_highlight_current_line(self) -> bool: ...
    def get_hover(self) -> Hover: ...
    def get_indent_on_tab(self) -> bool: ...
    def get_indent_width(self) -> int: ...
    def get_indenter(self) -> Indenter | None: ...
    def get_insert_spaces_instead_of_tabs(self) -> bool: ...
    def get_mark_attributes(self, category: str, priority: int) -> MarkAttributes: ...
    def get_right_margin_position(self) -> int: ...
    def get_show_line_marks(self) -> bool: ...
    def get_show_line_numbers(self) -> bool: ...
    def get_show_right_margin(self) -> bool: ...
    def get_smart_backspace(self) -> bool: ...
    def get_smart_home_end(self) -> SmartHomeEndType: ...
    def get_space_drawer(self) -> SpaceDrawer: ...
    def get_tab_width(self) -> int: ...
    def get_visual_column(self, iter: Gtk.TextIter) -> int: ...
    def indent_lines(self, start: Gtk.TextIter, end: Gtk.TextIter) -> None: ...
    def push_snippet(self, snippet: Snippet, location: Gtk.TextIter | None) -> None: ...
    def set_auto_indent(self, enable: bool) -> None: ...
    def set_background_pattern(self, background_pattern: BackgroundPatternType) -> None: ...
    def set_enable_snippets(self, enable_snippets: bool) -> None: ...
    def set_highlight_current_line(self, highlight: bool) -> None: ...
    def set_indent_on_tab(self, enable: bool) -> None: ...
    def set_indent_width(self, width: int) -> None: ...
    def set_indenter(self, indenter: Indenter | None) -> None: ...
    def set_insert_spaces_instead_of_tabs(self, enable: bool) -> None: ...
    def set_mark_attributes(self, category: str, attributes: MarkAttributes, priority: int) -> None: ...
    def set_right_margin_position(self, pos: int) -> None: ...
    def set_show_line_marks(self, show: bool) -> None: ...
    def set_show_line_numbers(self, show: bool) -> None: ...
    def set_show_right_margin(self, show: bool) -> None: ...
    def set_smart_backspace(self, smart_backspace: bool) -> None: ...
    def set_smart_home_end(self, smart_home_end: SmartHomeEndType) -> None: ...
    def set_tab_width(self, width: int) -> None: ...
    def unindent_lines(self, start: Gtk.TextIter, end: Gtk.TextIter) -> None: ...

class VimIMContext(Gtk.IMContext): 
    @classmethod
    def new(cls) -> Gtk.IMContext: ...
    def execute_command(self, command: str) -> None: ...
    def get_command_bar_text(self) -> str: ...
    def get_command_text(self) -> str: ...

class CompletionProposal: 
    def get_typed_text(self) -> str | None: ...
    def get_typed_text(self) -> str | None: ...
class CompletionProvider: 
    def activate(self, context: CompletionContext, proposal: CompletionProposal) -> None: ...
    def display(self, context: CompletionContext, proposal: CompletionProposal, cell: CompletionCell) -> None: ...
    def get_priority(self, context: CompletionContext) -> int: ...
    def get_title(self) -> str | None: ...
    def is_trigger(self, iter: Gtk.TextIter, ch: gunichar) -> bool: ...
    def key_activates(self, context: CompletionContext, proposal: CompletionProposal, keyval: int, state: Gdk.ModifierType) -> bool: ...
    def list_alternates(self, context: CompletionContext, proposal: CompletionProposal) -> list[CompletionProposal] | None: ...
    def populate(self, context: CompletionContext) -> Gio.ListModel: ...
    def populate_async(self, context: CompletionContext, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def populate_finish(self, result: Gio.AsyncResult) -> Gio.ListModel: ...
    def refilter(self, context: CompletionContext, model: Gio.ListModel) -> None: ...
    def activate(self, context: CompletionContext, proposal: CompletionProposal) -> None: ...
    def display(self, context: CompletionContext, proposal: CompletionProposal, cell: CompletionCell) -> None: ...
    def get_priority(self, context: CompletionContext) -> int: ...
    def get_title(self) -> str | None: ...
    def is_trigger(self, iter: Gtk.TextIter, ch: gunichar) -> bool: ...
    def key_activates(self, context: CompletionContext, proposal: CompletionProposal, keyval: int, state: Gdk.ModifierType) -> bool: ...
    def list_alternates(self, context: CompletionContext, proposal: CompletionProposal) -> list[CompletionProposal] | None: ...
    def populate_async(self, context: CompletionContext, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def populate_finish(self, result: Gio.AsyncResult) -> Gio.ListModel: ...
    def refilter(self, context: CompletionContext, model: Gio.ListModel) -> None: ...
class HoverProvider: 
    def populate(self, context: HoverContext, display: HoverDisplay) -> bool: ...
    def populate_async(self, context: HoverContext, display: HoverDisplay, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def populate_finish(self, result: Gio.AsyncResult) -> bool: ...
    def populate_async(self, context: HoverContext, display: HoverDisplay, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def populate_finish(self, result: Gio.AsyncResult) -> bool: ...
class Indenter: 
    def indent(self, view: View, iter: Gtk.TextIter) -> None: ...
    def is_trigger(self, view: View, location: Gtk.TextIter, state: Gdk.ModifierType, keyval: int) -> bool: ...
    def indent(self, view: View, iter: Gtk.TextIter) -> None: ...
    def is_trigger(self, view: View, location: Gtk.TextIter, state: Gdk.ModifierType, keyval: int) -> bool: ...
class StyleSchemeChooser: 
    def get_style_scheme(self) -> StyleScheme: ...
    def set_style_scheme(self, scheme: StyleScheme) -> None: ...
    def get_style_scheme(self) -> StyleScheme: ...
    def set_style_scheme(self, scheme: StyleScheme) -> None: ...

class FileSaverFlags(GObject.GFlag): 
    NONE = ...
    IGNORE_INVALID_CHARS = ...
    IGNORE_MODIFICATION_TIME = ...
    CREATE_BACKUP = ...

class SortFlags(GObject.GFlag): 
    NONE = ...
    CASE_SENSITIVE = ...
    REVERSE_ORDER = ...
    REMOVE_DUPLICATES = ...

class SpaceLocationFlags(GObject.GFlag): 
    NONE = ...
    LEADING = ...
    INSIDE_TEXT = ...
    TRAILING = ...
    ALL = ...

class SpaceTypeFlags(GObject.GFlag): 
    NONE = ...
    SPACE = ...
    TAB = ...
    NEWLINE = ...
    NBSP = ...
    ALL = ...

class BackgroundPatternType(GObject.GEnum): 
    NONE = ...
    GRID = ...

class BracketMatchType(GObject.GEnum): 
    NONE = ...
    OUT_OF_RANGE = ...
    NOT_FOUND = ...
    FOUND = ...

class ChangeCaseType(GObject.GEnum): 
    LOWER = ...
    UPPER = ...
    TOGGLE = ...
    TITLE = ...

class CompletionActivation(GObject.GEnum): 
    NONE = ...
    INTERACTIVE = ...
    USER_REQUESTED = ...

class CompletionColumn(GObject.GEnum): 
    ICON = ...
    BEFORE = ...
    TYPED_TEXT = ...
    AFTER = ...
    COMMENT = ...
    DETAILS = ...

class CompressionType(GObject.GEnum): 
    NONE = ...
    GZIP = ...

class FileLoaderError(GObject.GEnum): 
    TOO_BIG = ...
    ENCODING_AUTO_DETECTION_FAILED = ...
    CONVERSION_FALLBACK = ...

class FileSaverError(GObject.GEnum): 
    INVALID_CHARS = ...
    EXTERNALLY_MODIFIED = ...

class GutterRendererAlignmentMode(GObject.GEnum): 
    CELL = ...
    FIRST = ...
    LAST = ...

class NewlineType(GObject.GEnum): 
    LF = ...
    CR = ...
    CR_LF = ...

class SmartHomeEndType(GObject.GEnum): 
    DISABLED = ...
    BEFORE = ...
    AFTER = ...
    ALWAYS = ...

class ViewGutterPosition(GObject.GEnum): 
    LINES = ...
    MARKS = ...

