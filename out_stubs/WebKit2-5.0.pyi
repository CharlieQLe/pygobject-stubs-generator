from gi.repository import GLib, Gio, Gdk, Soup, cairo, Gtk, Gtk, JavaScriptCore, Soup, GObject

EDITING_COMMAND_COPY: str
EDITING_COMMAND_CREATE_LINK: str
EDITING_COMMAND_CUT: str
EDITING_COMMAND_INSERT_IMAGE: str
EDITING_COMMAND_PASTE: str
EDITING_COMMAND_PASTE_AS_PLAIN_TEXT: str
EDITING_COMMAND_REDO: str
EDITING_COMMAND_SELECT_ALL: str
EDITING_COMMAND_UNDO: str
MAJOR_VERSION: int
MICRO_VERSION: int
MINOR_VERSION: int

def download_error_quark() -> GLib.Quark: ...
def favicon_database_error_quark() -> GLib.Quark: ...
def get_major_version() -> int: ...
def get_micro_version() -> int: ...
def get_minor_version() -> int: ...
def javascript_error_quark() -> GLib.Quark: ...
def media_key_system_permission_get_name(request: MediaKeySystemPermissionRequest) -> str: ...
def network_error_quark() -> GLib.Quark: ...
def plugin_error_quark() -> GLib.Quark: ...
def policy_error_quark() -> GLib.Quark: ...
def print_error_quark() -> GLib.Quark: ...
def snapshot_error_quark() -> GLib.Quark: ...
def uri_for_display(uri: str) -> str | None: ...
def user_content_filter_error_quark() -> GLib.Quark: ...
def user_media_permission_is_for_audio_device(request: UserMediaPermissionRequest) -> bool: ...
def user_media_permission_is_for_display_device(request: UserMediaPermissionRequest) -> bool: ...
def user_media_permission_is_for_video_device(request: UserMediaPermissionRequest) -> bool: ...
def user_message_error_quark() -> GLib.Quark: ...

class AuthenticationRequest(GObject.Object): 
    def authenticate(self, credential: Credential | None) -> None: ...
    def can_save_credentials(self) -> bool: ...
    def cancel(self) -> None: ...
    def get_certificate_pin_flags(self) -> Gio.TlsPasswordFlags: ...
    def get_host(self) -> str: ...
    def get_port(self) -> int: ...
    def get_proposed_credential(self) -> Credential: ...
    def get_realm(self) -> str: ...
    def get_scheme(self) -> AuthenticationScheme: ...
    def get_security_origin(self) -> SecurityOrigin: ...
    def is_for_proxy(self) -> bool: ...
    def is_retry(self) -> bool: ...
    def set_can_save_credentials(self, enabled: bool) -> None: ...
    def set_proposed_credential(self, credential: Credential) -> None: ...

class AutomationSession(GObject.Object): 
    def get_application_info(self) -> ApplicationInfo: ...
    def get_id(self) -> str: ...
    def set_application_info(self, info: ApplicationInfo) -> None: ...

class BackForwardList(GObject.Object): 
    def get_back_item(self) -> BackForwardListItem | None: ...
    def get_back_list(self) -> GLib.List: ...
    def get_back_list_with_limit(self, limit: int) -> GLib.List: ...
    def get_current_item(self) -> BackForwardListItem | None: ...
    def get_forward_item(self) -> BackForwardListItem | None: ...
    def get_forward_list(self) -> GLib.List: ...
    def get_forward_list_with_limit(self, limit: int) -> GLib.List: ...
    def get_length(self) -> int: ...
    def get_nth_item(self, index: int) -> BackForwardListItem | None: ...

class BackForwardListItem(GObject.InitiallyUnowned): 
    def get_original_uri(self) -> str: ...
    def get_title(self) -> str: ...
    def get_uri(self) -> str: ...

class ColorChooserRequest(GObject.Object): 
    def cancel(self) -> None: ...
    def finish(self) -> None: ...
    def get_element_rectangle(self, rect: Gdk.Rectangle) -> None: ...
    def get_rgba(self, rgba: Gdk.RGBA) -> None: ...
    def set_rgba(self, rgba: Gdk.RGBA) -> None: ...

class ContextMenu(GObject.Object): 
    @classmethod
    def new(cls) -> ContextMenu: ...
    def append(self, item: ContextMenuItem) -> None: ...
    def first(self) -> ContextMenuItem: ...
    def get_item_at_position(self, position: int) -> ContextMenuItem: ...
    def get_items(self) -> GLib.List: ...
    def get_n_items(self) -> int: ...
    def get_user_data(self) -> GLib.Variant: ...
    def insert(self, item: ContextMenuItem, position: int) -> None: ...
    def last(self) -> ContextMenuItem: ...
    def move_item(self, item: ContextMenuItem, position: int) -> None: ...
    def prepend(self, item: ContextMenuItem) -> None: ...
    def remove(self, item: ContextMenuItem) -> None: ...
    def remove_all(self) -> None: ...
    def set_user_data(self, user_data: GLib.Variant) -> None: ...

class ContextMenuItem(GObject.InitiallyUnowned): 
    @classmethod
    def new_from_gaction(cls, action: Gio.Action, label: str, target: GLib.Variant | None) -> ContextMenuItem: ...
    def get_gaction(self) -> Gio.Action: ...
    def get_stock_action(self) -> ContextMenuAction: ...
    def get_submenu(self) -> ContextMenu: ...
    def is_separator(self) -> bool: ...
    def set_submenu(self, submenu: ContextMenu | None) -> None: ...

class CookieManager(GObject.Object): 
    def add_cookie(self, cookie: Soup.Cookie, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def add_cookie_finish(self, result: Gio.AsyncResult) -> bool: ...
    def delete_all_cookies(self) -> None: ...
    def delete_cookie(self, cookie: Soup.Cookie, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def delete_cookie_finish(self, result: Gio.AsyncResult) -> bool: ...
    def delete_cookies_for_domain(self, domain: str) -> None: ...
    def get_accept_policy(self, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def get_accept_policy_finish(self, result: Gio.AsyncResult) -> CookieAcceptPolicy: ...
    def get_cookies(self, uri: str, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def get_cookies_finish(self, result: Gio.AsyncResult) -> GLib.List: ...
    def get_domains_with_cookies(self, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def get_domains_with_cookies_finish(self, result: Gio.AsyncResult) -> list[str]: ...
    def set_accept_policy(self, policy: CookieAcceptPolicy) -> None: ...
    def set_persistent_storage(self, filename: str, storage: CookiePersistentStorage) -> None: ...

class DeviceInfoPermissionRequest(GObject.Object, PermissionRequest): ...

class Download(GObject.Object): 
    def cancel(self) -> None: ...
    def get_allow_overwrite(self) -> bool: ...
    def get_destination(self) -> str: ...
    def get_elapsed_time(self) -> float: ...
    def get_estimated_progress(self) -> float: ...
    def get_received_data_length(self) -> int: ...
    def get_request(self) -> URIRequest: ...
    def get_response(self) -> URIResponse: ...
    def get_web_view(self) -> WebView: ...
    def set_allow_overwrite(self, allowed: bool) -> None: ...
    def set_destination(self, uri: str) -> None: ...

class EditorState(GObject.Object): 
    def get_typing_attributes(self) -> int: ...
    def is_copy_available(self) -> bool: ...
    def is_cut_available(self) -> bool: ...
    def is_paste_available(self) -> bool: ...
    def is_redo_available(self) -> bool: ...
    def is_undo_available(self) -> bool: ...

class FaviconDatabase(GObject.Object): 
    def clear(self) -> None: ...
    def get_favicon(self, page_uri: str, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def get_favicon_finish(self, result: Gio.AsyncResult) -> cairo.Surface: ...
    def get_favicon_uri(self, page_uri: str) -> str: ...

class FileChooserRequest(GObject.Object): 
    def cancel(self) -> None: ...
    def get_mime_types(self) -> list[str]: ...
    def get_mime_types_filter(self) -> Gtk.FileFilter: ...
    def get_select_multiple(self) -> bool: ...
    def get_selected_files(self) -> list[str]: ...
    def select_files(self, files: list[str]) -> None: ...

class FindController(GObject.Object): 
    def count_matches(self, search_text: str, find_options: int, max_match_count: int) -> None: ...
    def get_max_match_count(self) -> int: ...
    def get_options(self) -> int: ...
    def get_search_text(self) -> str: ...
    def get_web_view(self) -> WebView: ...
    def search(self, search_text: str, find_options: int, max_match_count: int) -> None: ...
    def search_finish(self) -> None: ...
    def search_next(self) -> None: ...
    def search_previous(self) -> None: ...

class FormSubmissionRequest(GObject.Object): 
    def get_text_fields(self) -> GLib.HashTable | None: ...
    def list_text_fields(self, field_names: list[str], field_values: list[str]) -> bool: ...
    def submit(self) -> None: ...

class GeolocationManager(GObject.Object): 
    def failed(self, error_message: str) -> None: ...
    def get_enable_high_accuracy(self) -> bool: ...
    def update_position(self, position: GeolocationPosition) -> None: ...

class GeolocationPermissionRequest(GObject.Object, PermissionRequest): ...

class HitTestResult(GObject.Object): 
    def context_is_editable(self) -> bool: ...
    def context_is_image(self) -> bool: ...
    def context_is_link(self) -> bool: ...
    def context_is_media(self) -> bool: ...
    def context_is_scrollbar(self) -> bool: ...
    def context_is_selection(self) -> bool: ...
    def get_context(self) -> int: ...
    def get_image_uri(self) -> str: ...
    def get_link_label(self) -> str: ...
    def get_link_title(self) -> str: ...
    def get_link_uri(self) -> str: ...
    def get_media_uri(self) -> str: ...

class InputMethodContext(GObject.Object): 
    def filter_key_event(self, key_event: Gdk.Event) -> bool: ...
    def get_input_hints(self) -> InputHints: ...
    def get_input_purpose(self) -> InputPurpose: ...
    def get_preedit(self, text: str | None, underlines: GLib.List | None, cursor_offset: int | None) -> None: ...
    def notify_cursor_area(self, x: int, y: int, width: int, height: int) -> None: ...
    def notify_focus_in(self) -> None: ...
    def notify_focus_out(self) -> None: ...
    def notify_surrounding(self, text: str, length: int, cursor_index: int, selection_index: int) -> None: ...
    def reset(self) -> None: ...
    def set_enable_preedit(self, enabled: bool) -> None: ...
    def set_input_hints(self, hints: InputHints) -> None: ...
    def set_input_purpose(self, purpose: InputPurpose) -> None: ...

class InstallMissingMediaPluginsPermissionRequest(GObject.Object, PermissionRequest): 
    def get_description(self) -> str: ...

class MediaKeySystemPermissionRequest(GObject.Object, PermissionRequest): ...

class NavigationPolicyDecision(PolicyDecision): 
    def get_frame_name(self) -> str: ...
    def get_modifiers(self) -> int: ...
    def get_mouse_button(self) -> int: ...
    def get_navigation_action(self) -> NavigationAction: ...
    def get_navigation_type(self) -> NavigationType: ...
    def get_request(self) -> URIRequest: ...

class Notification(GObject.Object): 
    def clicked(self) -> None: ...
    def close(self) -> None: ...
    def get_body(self) -> str: ...
    def get_id(self) -> int: ...
    def get_tag(self) -> str | None: ...
    def get_title(self) -> str: ...

class NotificationPermissionRequest(GObject.Object, PermissionRequest): ...

class OptionMenu(GObject.Object): 
    def activate_item(self, index: int) -> None: ...
    def close(self) -> None: ...
    def get_item(self, index: int) -> OptionMenuItem: ...
    def get_n_items(self) -> int: ...
    def select_item(self, index: int) -> None: ...

class Plugin(GObject.Object): 
    def get_description(self) -> str | None: ...
    def get_mime_info_list(self) -> GLib.List: ...
    def get_name(self) -> str | None: ...
    def get_path(self) -> str | None: ...

class PointerLockPermissionRequest(GObject.Object, PermissionRequest): ...

class PolicyDecision(GObject.Object): 
    def download(self) -> None: ...
    def ignore(self) -> None: ...
    def use(self) -> None: ...
    def use_with_policies(self, policies: WebsitePolicies) -> None: ...

class PrintCustomWidget(GObject.Object): 
    @classmethod
    def new(cls, widget: Gtk.Widget, title: str) -> PrintCustomWidget: ...
    def get_title(self) -> str: ...
    def get_widget(self) -> Gtk.Widget: ...

class PrintOperation(GObject.Object): 
    @classmethod
    def new(cls, web_view: WebView) -> PrintOperation: ...
    def get_page_setup(self) -> Gtk.PageSetup: ...
    def get_print_settings(self) -> Gtk.PrintSettings: ...
    def print(self) -> None: ...
    def run_dialog(self, parent: Gtk.Window | None) -> PrintOperationResponse: ...
    def set_page_setup(self, page_setup: Gtk.PageSetup) -> None: ...
    def set_print_settings(self, print_settings: Gtk.PrintSettings) -> None: ...

class ResponsePolicyDecision(PolicyDecision): 
    def get_request(self) -> URIRequest: ...
    def get_response(self) -> URIResponse: ...
    def is_mime_type_supported(self) -> bool: ...

class SecurityManager(GObject.Object): 
    def register_uri_scheme_as_cors_enabled(self, scheme: str) -> None: ...
    def register_uri_scheme_as_display_isolated(self, scheme: str) -> None: ...
    def register_uri_scheme_as_empty_document(self, scheme: str) -> None: ...
    def register_uri_scheme_as_local(self, scheme: str) -> None: ...
    def register_uri_scheme_as_no_access(self, scheme: str) -> None: ...
    def register_uri_scheme_as_secure(self, scheme: str) -> None: ...
    def uri_scheme_is_cors_enabled(self, scheme: str) -> bool: ...
    def uri_scheme_is_display_isolated(self, scheme: str) -> bool: ...
    def uri_scheme_is_empty_document(self, scheme: str) -> bool: ...
    def uri_scheme_is_local(self, scheme: str) -> bool: ...
    def uri_scheme_is_no_access(self, scheme: str) -> bool: ...
    def uri_scheme_is_secure(self, scheme: str) -> bool: ...

class Settings(GObject.Object): 
    @classmethod
    def new(cls) -> Settings: ...
    @classmethod
    def font_size_to_pixels(cls, points: int) -> int: ...
    @classmethod
    def font_size_to_points(cls, pixels: int) -> int: ...
    def get_allow_file_access_from_file_urls(self) -> bool: ...
    def get_allow_modal_dialogs(self) -> bool: ...
    def get_allow_top_navigation_to_data_urls(self) -> bool: ...
    def get_allow_universal_access_from_file_urls(self) -> bool: ...
    def get_auto_load_images(self) -> bool: ...
    def get_cursive_font_family(self) -> str: ...
    def get_default_charset(self) -> str: ...
    def get_default_font_family(self) -> str: ...
    def get_default_font_size(self) -> int: ...
    def get_default_monospace_font_size(self) -> int: ...
    def get_draw_compositing_indicators(self) -> bool: ...
    def get_enable_accelerated_2d_canvas(self) -> bool: ...
    def get_enable_back_forward_navigation_gestures(self) -> bool: ...
    def get_enable_caret_browsing(self) -> bool: ...
    def get_enable_developer_extras(self) -> bool: ...
    def get_enable_dns_prefetching(self) -> bool: ...
    def get_enable_encrypted_media(self) -> bool: ...
    def get_enable_frame_flattening(self) -> bool: ...
    def get_enable_fullscreen(self) -> bool: ...
    def get_enable_html5_database(self) -> bool: ...
    def get_enable_html5_local_storage(self) -> bool: ...
    def get_enable_hyperlink_auditing(self) -> bool: ...
    def get_enable_java(self) -> bool: ...
    def get_enable_javascript(self) -> bool: ...
    def get_enable_javascript_markup(self) -> bool: ...
    def get_enable_media(self) -> bool: ...
    def get_enable_media_capabilities(self) -> bool: ...
    def get_enable_media_stream(self) -> bool: ...
    def get_enable_mediasource(self) -> bool: ...
    def get_enable_mock_capture_devices(self) -> bool: ...
    def get_enable_offline_web_application_cache(self) -> bool: ...
    def get_enable_page_cache(self) -> bool: ...
    def get_enable_plugins(self) -> bool: ...
    def get_enable_private_browsing(self) -> bool: ...
    def get_enable_resizable_text_areas(self) -> bool: ...
    def get_enable_site_specific_quirks(self) -> bool: ...
    def get_enable_smooth_scrolling(self) -> bool: ...
    def get_enable_spatial_navigation(self) -> bool: ...
    def get_enable_tabs_to_links(self) -> bool: ...
    def get_enable_webaudio(self) -> bool: ...
    def get_enable_webgl(self) -> bool: ...
    def get_enable_webrtc(self) -> bool: ...
    def get_enable_write_console_messages_to_stdout(self) -> bool: ...
    def get_enable_xss_auditor(self) -> bool: ...
    def get_fantasy_font_family(self) -> str: ...
    def get_hardware_acceleration_policy(self) -> HardwareAccelerationPolicy: ...
    def get_javascript_can_access_clipboard(self) -> bool: ...
    def get_javascript_can_open_windows_automatically(self) -> bool: ...
    def get_load_icons_ignoring_image_load_setting(self) -> bool: ...
    def get_media_content_types_requiring_hardware_support(self) -> str: ...
    def get_media_playback_allows_inline(self) -> bool: ...
    def get_media_playback_requires_user_gesture(self) -> bool: ...
    def get_minimum_font_size(self) -> int: ...
    def get_monospace_font_family(self) -> str: ...
    def get_pictograph_font_family(self) -> str: ...
    def get_print_backgrounds(self) -> bool: ...
    def get_sans_serif_font_family(self) -> str: ...
    def get_serif_font_family(self) -> str: ...
    def get_user_agent(self) -> str: ...
    def get_zoom_text_only(self) -> bool: ...
    def set_allow_file_access_from_file_urls(self, allowed: bool) -> None: ...
    def set_allow_modal_dialogs(self, allowed: bool) -> None: ...
    def set_allow_top_navigation_to_data_urls(self, allowed: bool) -> None: ...
    def set_allow_universal_access_from_file_urls(self, allowed: bool) -> None: ...
    def set_auto_load_images(self, enabled: bool) -> None: ...
    def set_cursive_font_family(self, cursive_font_family: str) -> None: ...
    def set_default_charset(self, default_charset: str) -> None: ...
    def set_default_font_family(self, default_font_family: str) -> None: ...
    def set_default_font_size(self, font_size: int) -> None: ...
    def set_default_monospace_font_size(self, font_size: int) -> None: ...
    def set_draw_compositing_indicators(self, enabled: bool) -> None: ...
    def set_enable_accelerated_2d_canvas(self, enabled: bool) -> None: ...
    def set_enable_back_forward_navigation_gestures(self, enabled: bool) -> None: ...
    def set_enable_caret_browsing(self, enabled: bool) -> None: ...
    def set_enable_developer_extras(self, enabled: bool) -> None: ...
    def set_enable_dns_prefetching(self, enabled: bool) -> None: ...
    def set_enable_encrypted_media(self, enabled: bool) -> None: ...
    def set_enable_frame_flattening(self, enabled: bool) -> None: ...
    def set_enable_fullscreen(self, enabled: bool) -> None: ...
    def set_enable_html5_database(self, enabled: bool) -> None: ...
    def set_enable_html5_local_storage(self, enabled: bool) -> None: ...
    def set_enable_hyperlink_auditing(self, enabled: bool) -> None: ...
    def set_enable_java(self, enabled: bool) -> None: ...
    def set_enable_javascript(self, enabled: bool) -> None: ...
    def set_enable_javascript_markup(self, enabled: bool) -> None: ...
    def set_enable_media(self, enabled: bool) -> None: ...
    def set_enable_media_capabilities(self, enabled: bool) -> None: ...
    def set_enable_media_stream(self, enabled: bool) -> None: ...
    def set_enable_mediasource(self, enabled: bool) -> None: ...
    def set_enable_mock_capture_devices(self, enabled: bool) -> None: ...
    def set_enable_offline_web_application_cache(self, enabled: bool) -> None: ...
    def set_enable_page_cache(self, enabled: bool) -> None: ...
    def set_enable_plugins(self, enabled: bool) -> None: ...
    def set_enable_private_browsing(self, enabled: bool) -> None: ...
    def set_enable_resizable_text_areas(self, enabled: bool) -> None: ...
    def set_enable_site_specific_quirks(self, enabled: bool) -> None: ...
    def set_enable_smooth_scrolling(self, enabled: bool) -> None: ...
    def set_enable_spatial_navigation(self, enabled: bool) -> None: ...
    def set_enable_tabs_to_links(self, enabled: bool) -> None: ...
    def set_enable_webaudio(self, enabled: bool) -> None: ...
    def set_enable_webgl(self, enabled: bool) -> None: ...
    def set_enable_webrtc(self, enabled: bool) -> None: ...
    def set_enable_write_console_messages_to_stdout(self, enabled: bool) -> None: ...
    def set_enable_xss_auditor(self, enabled: bool) -> None: ...
    def set_fantasy_font_family(self, fantasy_font_family: str) -> None: ...
    def set_hardware_acceleration_policy(self, policy: HardwareAccelerationPolicy) -> None: ...
    def set_javascript_can_access_clipboard(self, enabled: bool) -> None: ...
    def set_javascript_can_open_windows_automatically(self, enabled: bool) -> None: ...
    def set_load_icons_ignoring_image_load_setting(self, enabled: bool) -> None: ...
    def set_media_content_types_requiring_hardware_support(self, content_types: str | None) -> None: ...
    def set_media_playback_allows_inline(self, enabled: bool) -> None: ...
    def set_media_playback_requires_user_gesture(self, enabled: bool) -> None: ...
    def set_minimum_font_size(self, font_size: int) -> None: ...
    def set_monospace_font_family(self, monospace_font_family: str) -> None: ...
    def set_pictograph_font_family(self, pictograph_font_family: str) -> None: ...
    def set_print_backgrounds(self, print_backgrounds: bool) -> None: ...
    def set_sans_serif_font_family(self, sans_serif_font_family: str) -> None: ...
    def set_serif_font_family(self, serif_font_family: str) -> None: ...
    def set_user_agent(self, user_agent: str | None) -> None: ...
    def set_user_agent_with_application_details(self, application_name: str | None, application_version: str | None) -> None: ...
    def set_zoom_text_only(self, zoom_text_only: bool) -> None: ...

class URIRequest(GObject.Object): 
    @classmethod
    def new(cls, uri: str) -> URIRequest: ...
    def get_http_headers(self) -> Soup.MessageHeaders: ...
    def get_http_method(self) -> str: ...
    def get_uri(self) -> str: ...
    def set_uri(self, uri: str) -> None: ...

class URIResponse(GObject.Object): 
    def get_content_length(self) -> int: ...
    def get_http_headers(self) -> Soup.MessageHeaders: ...
    def get_mime_type(self) -> str: ...
    def get_status_code(self) -> int: ...
    def get_suggested_filename(self) -> str: ...
    def get_uri(self) -> str: ...

class URISchemeRequest(GObject.Object): 
    def finish(self, stream: Gio.InputStream, stream_length: int, content_type: str | None) -> None: ...
    def finish_error(self, error: GLib.Error) -> None: ...
    def finish_with_response(self, response: URISchemeResponse) -> None: ...
    def get_http_headers(self) -> Soup.MessageHeaders: ...
    def get_http_method(self) -> str: ...
    def get_path(self) -> str: ...
    def get_scheme(self) -> str: ...
    def get_uri(self) -> str: ...
    def get_web_view(self) -> WebView: ...

class URISchemeResponse(GObject.Object): 
    @classmethod
    def new(cls, input_stream: Gio.InputStream, stream_length: int) -> URISchemeResponse: ...
    def set_content_type(self, content_type: str) -> None: ...
    def set_http_headers(self, headers: Soup.MessageHeaders) -> None: ...
    def set_status(self, status_code: int, reason_phrase: str | None) -> None: ...

class UserContentFilterStore(GObject.Object): 
    @classmethod
    def new(cls, storage_path: str) -> UserContentFilterStore: ...
    def fetch_identifiers(self, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def fetch_identifiers_finish(self, result: Gio.AsyncResult) -> list[str]: ...
    def get_path(self) -> str: ...
    def load(self, identifier: str, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def load_finish(self, result: Gio.AsyncResult) -> UserContentFilter: ...
    def remove(self, identifier: str, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def remove_finish(self, result: Gio.AsyncResult) -> bool: ...
    def save(self, identifier: str, source: GLib.Bytes, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def save_finish(self, result: Gio.AsyncResult) -> UserContentFilter: ...
    def save_from_file(self, identifier: str, file: Gio.File, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def save_from_file_finish(self, result: Gio.AsyncResult) -> UserContentFilter: ...

class UserContentManager(GObject.Object): 
    @classmethod
    def new(cls) -> UserContentManager: ...
    def add_filter(self, filter: UserContentFilter) -> None: ...
    def add_script(self, script: UserScript) -> None: ...
    def add_style_sheet(self, stylesheet: UserStyleSheet) -> None: ...
    def register_script_message_handler(self, name: str) -> bool: ...
    def register_script_message_handler_in_world(self, name: str, world_name: str) -> bool: ...
    def remove_all_filters(self) -> None: ...
    def remove_all_scripts(self) -> None: ...
    def remove_all_style_sheets(self) -> None: ...
    def remove_filter(self, filter: UserContentFilter) -> None: ...
    def remove_filter_by_id(self, filter_id: str) -> None: ...
    def remove_script(self, script: UserScript) -> None: ...
    def remove_style_sheet(self, stylesheet: UserStyleSheet) -> None: ...
    def unregister_script_message_handler(self, name: str) -> None: ...
    def unregister_script_message_handler_in_world(self, name: str, world_name: str) -> None: ...

class UserMediaPermissionRequest(GObject.Object, PermissionRequest): ...

class UserMessage(GObject.InitiallyUnowned): 
    @classmethod
    def new(cls, name: str, parameters: GLib.Variant | None) -> UserMessage: ...
    def get_fd_list(self) -> Gio.UnixFDList | None: ...
    def get_name(self) -> str: ...
    def get_parameters(self) -> GLib.Variant | None: ...
    def send_reply(self, reply: UserMessage) -> None: ...

class WebContext(GObject.Object): 
    @classmethod
    def new(cls) -> WebContext: ...
    @classmethod
    def get_default(cls) -> WebContext: ...
    def add_path_to_sandbox(self, path: filename, read_only: bool) -> None: ...
    def allow_tls_certificate_for_host(self, certificate: Gio.TlsCertificate, host: str) -> None: ...
    def clear_cache(self) -> None: ...
    def download_uri(self, uri: str) -> Download: ...
    def get_cache_model(self) -> CacheModel: ...
    def get_cookie_manager(self) -> CookieManager: ...
    def get_favicon_database(self) -> FaviconDatabase: ...
    def get_favicon_database_directory(self) -> str: ...
    def get_geolocation_manager(self) -> GeolocationManager: ...
    def get_plugins(self, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def get_plugins_finish(self, result: Gio.AsyncResult) -> GLib.List: ...
    def get_process_model(self) -> ProcessModel: ...
    def get_sandbox_enabled(self) -> bool: ...
    def get_security_manager(self) -> SecurityManager: ...
    def get_spell_checking_enabled(self) -> bool: ...
    def get_spell_checking_languages(self) -> list[str]: ...
    def get_time_zone_override(self) -> str: ...
    def get_tls_errors_policy(self) -> TLSErrorsPolicy: ...
    def get_use_system_appearance_for_scrollbars(self) -> bool: ...
    def get_web_process_count_limit(self) -> int: ...
    def get_website_data_manager(self) -> WebsiteDataManager: ...
    def initialize_notification_permissions(self, allowed_origins: GLib.List, disallowed_origins: GLib.List) -> None: ...
    def is_automation_allowed(self) -> bool: ...
    def is_ephemeral(self) -> bool: ...
    def prefetch_dns(self, hostname: str) -> None: ...
    def register_uri_scheme(self, scheme: str, callback: URISchemeRequestCallback, user_data: object | None, user_data_destroy_func: GLib.DestroyNotify) -> None: ...
    def send_message_to_all_extensions(self, message: UserMessage) -> None: ...
    def set_additional_plugins_directory(self, directory: str) -> None: ...
    def set_automation_allowed(self, allowed: bool) -> None: ...
    def set_cache_model(self, cache_model: CacheModel) -> None: ...
    def set_disk_cache_directory(self, directory: str) -> None: ...
    def set_favicon_database_directory(self, path: str | None) -> None: ...
    def set_network_proxy_settings(self, proxy_mode: NetworkProxyMode, proxy_settings: NetworkProxySettings | None) -> None: ...
    def set_preferred_languages(self, languages: list[str] | None) -> None: ...
    def set_process_model(self, process_model: ProcessModel) -> None: ...
    def set_sandbox_enabled(self, enabled: bool) -> None: ...
    def set_spell_checking_enabled(self, enabled: bool) -> None: ...
    def set_spell_checking_languages(self, languages: list[str]) -> None: ...
    def set_tls_errors_policy(self, policy: TLSErrorsPolicy) -> None: ...
    def set_use_system_appearance_for_scrollbars(self, enabled: bool) -> None: ...
    def set_web_extensions_directory(self, directory: str) -> None: ...
    def set_web_extensions_initialization_user_data(self, user_data: GLib.Variant) -> None: ...
    def set_web_process_count_limit(self, limit: int) -> None: ...

class WebInspector(GObject.Object): 
    def attach(self) -> None: ...
    def close(self) -> None: ...
    def detach(self) -> None: ...
    def get_attached_height(self) -> int: ...
    def get_can_attach(self) -> bool: ...
    def get_inspected_uri(self) -> str: ...
    def get_web_view(self) -> WebViewBase: ...
    def is_attached(self) -> bool: ...
    def show(self) -> None: ...

class WebResource(GObject.Object): 
    def get_data(self, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def get_data_finish(self, result: Gio.AsyncResult, length: gsize) -> list[int]: ...
    def get_response(self) -> URIResponse: ...
    def get_uri(self) -> str: ...

class WebView(WebViewBase, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget): 
    @classmethod
    def new(cls) -> Gtk.Widget: ...
    def can_execute_editing_command(self, command: str, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def can_execute_editing_command_finish(self, result: Gio.AsyncResult) -> bool: ...
    def can_go_back(self) -> bool: ...
    def can_go_forward(self) -> bool: ...
    def can_show_mime_type(self, mime_type: str) -> bool: ...
    def download_uri(self, uri: str) -> Download: ...
    def execute_editing_command(self, command: str) -> None: ...
    def execute_editing_command_with_argument(self, command: str, argument: str) -> None: ...
    def get_automation_presentation_type(self) -> AutomationBrowsingContextPresentation: ...
    def get_back_forward_list(self) -> BackForwardList: ...
    def get_background_color(self, rgba: Gdk.RGBA) -> None: ...
    def get_camera_capture_state(self) -> MediaCaptureState: ...
    def get_context(self) -> WebContext: ...
    def get_custom_charset(self) -> str: ...
    def get_default_content_security_policy(self) -> str | None: ...
    def get_display_capture_state(self) -> MediaCaptureState: ...
    def get_editor_state(self) -> EditorState: ...
    def get_estimated_load_progress(self) -> float: ...
    def get_favicon(self) -> cairo.Surface: ...
    def get_find_controller(self) -> FindController: ...
    def get_input_method_context(self) -> InputMethodContext | None: ...
    def get_inspector(self) -> WebInspector: ...
    def get_is_muted(self) -> bool: ...
    def get_is_web_process_responsive(self) -> bool: ...
    def get_main_resource(self) -> WebResource: ...
    def get_microphone_capture_state(self) -> MediaCaptureState: ...
    def get_page_id(self) -> int: ...
    def get_session_state(self) -> WebViewSessionState: ...
    def get_settings(self) -> Settings: ...
    def get_snapshot(self, region: SnapshotRegion, options: SnapshotOptions, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def get_snapshot_finish(self, result: Gio.AsyncResult) -> cairo.Surface: ...
    def get_title(self) -> str: ...
    def get_tls_info(self, certificate: Gio.TlsCertificate, errors: Gio.TlsCertificateFlags) -> bool: ...
    def get_uri(self) -> str: ...
    def get_user_content_manager(self) -> UserContentManager: ...
    def get_web_extension_mode(self) -> WebExtensionMode: ...
    def get_website_data_manager(self) -> WebsiteDataManager: ...
    def get_website_policies(self) -> WebsitePolicies: ...
    def get_window_properties(self) -> WindowProperties: ...
    def get_zoom_level(self) -> float: ...
    def go_back(self) -> None: ...
    def go_forward(self) -> None: ...
    def go_to_back_forward_list_item(self, list_item: BackForwardListItem) -> None: ...
    def is_controlled_by_automation(self) -> bool: ...
    def is_editable(self) -> bool: ...
    def is_ephemeral(self) -> bool: ...
    def is_loading(self) -> bool: ...
    def is_playing_audio(self) -> bool: ...
    def load_alternate_html(self, content: str, content_uri: str, base_uri: str | None) -> None: ...
    def load_bytes(self, bytes: GLib.Bytes, mime_type: str | None, encoding: str | None, base_uri: str | None) -> None: ...
    def load_html(self, content: str, base_uri: str | None) -> None: ...
    def load_plain_text(self, plain_text: str) -> None: ...
    def load_request(self, request: URIRequest) -> None: ...
    def load_uri(self, uri: str) -> None: ...
    def reload(self) -> None: ...
    def reload_bypass_cache(self) -> None: ...
    def restore_session_state(self, state: WebViewSessionState) -> None: ...
    def run_async_javascript_function_in_world(self, body: str, arguments: GLib.Variant, world_name: str, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def run_javascript(self, script: str, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def run_javascript_finish(self, result: Gio.AsyncResult) -> JavascriptResult: ...
    def run_javascript_from_gresource(self, resource: str, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def run_javascript_from_gresource_finish(self, result: Gio.AsyncResult) -> JavascriptResult: ...
    def run_javascript_in_world(self, script: str, world_name: str, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def run_javascript_in_world_finish(self, result: Gio.AsyncResult) -> JavascriptResult: ...
    def save(self, save_mode: SaveMode, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def save_finish(self, result: Gio.AsyncResult) -> Gio.InputStream: ...
    def save_to_file(self, file: Gio.File, save_mode: SaveMode, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def save_to_file_finish(self, result: Gio.AsyncResult) -> bool: ...
    def send_message_to_page(self, message: UserMessage, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def send_message_to_page_finish(self, result: Gio.AsyncResult) -> UserMessage: ...
    def set_background_color(self, rgba: Gdk.RGBA) -> None: ...
    def set_camera_capture_state(self, state: MediaCaptureState) -> None: ...
    def set_cors_allowlist(self, allowlist: list[str] | None) -> None: ...
    def set_custom_charset(self, charset: str | None) -> None: ...
    def set_display_capture_state(self, state: MediaCaptureState) -> None: ...
    def set_editable(self, editable: bool) -> None: ...
    def set_input_method_context(self, context: InputMethodContext | None) -> None: ...
    def set_is_muted(self, muted: bool) -> None: ...
    def set_microphone_capture_state(self, state: MediaCaptureState) -> None: ...
    def set_settings(self, settings: Settings) -> None: ...
    def set_zoom_level(self, zoom_level: float) -> None: ...
    def stop_loading(self) -> None: ...
    def terminate_web_process(self) -> None: ...
    def try_close(self) -> None: ...

class WebViewBase(Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget): ...

class WebsiteDataAccessPermissionRequest(GObject.Object, PermissionRequest): 
    def get_current_domain(self) -> str: ...
    def get_requesting_domain(self) -> str: ...

class WebsiteDataManager(GObject.Object): 
    @classmethod
    def new(cls, first_option_name: str) -> WebsiteDataManager: ...
    @classmethod
    def set_memory_pressure_settings(cls, settings: MemoryPressureSettings) -> None: ...
    def clear(self, types: WebsiteDataTypes, timespan: GLib.TimeSpan, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def clear_finish(self, result: Gio.AsyncResult) -> bool: ...
    def fetch(self, types: WebsiteDataTypes, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def fetch_finish(self, result: Gio.AsyncResult) -> GLib.List: ...
    def get_base_cache_directory(self) -> str | None: ...
    def get_base_data_directory(self) -> str | None: ...
    def get_cookie_manager(self) -> CookieManager: ...
    def get_disk_cache_directory(self) -> str | None: ...
    def get_dom_cache_directory(self) -> str | None: ...
    def get_hsts_cache_directory(self) -> str | None: ...
    def get_indexeddb_directory(self) -> str | None: ...
    def get_itp_directory(self) -> str | None: ...
    def get_itp_enabled(self) -> bool: ...
    def get_itp_summary(self, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def get_itp_summary_finish(self, result: Gio.AsyncResult) -> GLib.List: ...
    def get_local_storage_directory(self) -> str | None: ...
    def get_offline_application_cache_directory(self) -> str | None: ...
    def get_persistent_credential_storage_enabled(self) -> bool: ...
    def get_service_worker_registrations_directory(self) -> str | None: ...
    def get_tls_errors_policy(self) -> TLSErrorsPolicy: ...
    def get_websql_directory(self) -> str | None: ...
    def is_ephemeral(self) -> bool: ...
    def remove(self, types: WebsiteDataTypes, website_data: GLib.List, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
    def remove_finish(self, result: Gio.AsyncResult) -> bool: ...
    def set_itp_enabled(self, enabled: bool) -> None: ...
    def set_network_proxy_settings(self, proxy_mode: NetworkProxyMode, proxy_settings: NetworkProxySettings | None) -> None: ...
    def set_persistent_credential_storage_enabled(self, enabled: bool) -> None: ...
    def set_tls_errors_policy(self, policy: TLSErrorsPolicy) -> None: ...

class WebsitePolicies(GObject.Object): 
    @classmethod
    def new(cls) -> WebsitePolicies: ...
    def get_autoplay_policy(self) -> AutoplayPolicy: ...

class WindowProperties(GObject.Object): 
    def get_fullscreen(self) -> bool: ...
    def get_geometry(self, geometry: Gdk.Rectangle) -> None: ...
    def get_locationbar_visible(self) -> bool: ...
    def get_menubar_visible(self) -> bool: ...
    def get_resizable(self) -> bool: ...
    def get_scrollbars_visible(self) -> bool: ...
    def get_statusbar_visible(self) -> bool: ...
    def get_toolbar_visible(self) -> bool: ...

class PermissionRequest: 
    def allow(self) -> None: ...
    def deny(self) -> None: ...
    def allow(self) -> None: ...
    def deny(self) -> None: ...

class EditorTypingAttributes(GObject.GFlag): 
    NONE = ...
    BOLD = ...
    ITALIC = ...
    UNDERLINE = ...
    STRIKETHROUGH = ...

class FindOptions(GObject.GFlag): 
    NONE = ...
    CASE_INSENSITIVE = ...
    AT_WORD_STARTS = ...
    TREAT_MEDIAL_CAPITAL_AS_WORD_START = ...
    BACKWARDS = ...
    WRAP_AROUND = ...

class HitTestResultContext(GObject.GFlag): 
    DOCUMENT = ...
    LINK = ...
    IMAGE = ...
    MEDIA = ...
    EDITABLE = ...
    SCROLLBAR = ...
    SELECTION = ...

class InputHints(GObject.GFlag): 
    NONE = ...
    SPELLCHECK = ...
    LOWERCASE = ...
    UPPERCASE_CHARS = ...
    UPPERCASE_WORDS = ...
    UPPERCASE_SENTENCES = ...
    INHIBIT_OSK = ...

class SnapshotOptions(GObject.GFlag): 
    NONE = ...
    INCLUDE_SELECTION_HIGHLIGHTING = ...
    TRANSPARENT_BACKGROUND = ...

class WebsiteDataTypes(GObject.GFlag): 
    MEMORY_CACHE = ...
    DISK_CACHE = ...
    OFFLINE_APPLICATION_CACHE = ...
    SESSION_STORAGE = ...
    LOCAL_STORAGE = ...
    WEBSQL_DATABASES = ...
    INDEXEDDB_DATABASES = ...
    PLUGIN_DATA = ...
    COOKIES = ...
    DEVICE_ID_HASH_SALT = ...
    HSTS_CACHE = ...
    ITP = ...
    SERVICE_WORKER_REGISTRATIONS = ...
    DOM_CACHE = ...
    ALL = ...

class AuthenticationScheme(GObject.GEnum): 
    DEFAULT = ...
    HTTP_BASIC = ...
    HTTP_DIGEST = ...
    HTML_FORM = ...
    NTLM = ...
    NEGOTIATE = ...
    CLIENT_CERTIFICATE_REQUESTED = ...
    SERVER_TRUST_EVALUATION_REQUESTED = ...
    CLIENT_CERTIFICATE_PIN_REQUESTED = ...
    UNKNOWN = ...

class AutomationBrowsingContextPresentation(GObject.GEnum): 
    WINDOW = ...
    TAB = ...

class AutoplayPolicy(GObject.GEnum): 
    ALLOW = ...
    ALLOW_WITHOUT_SOUND = ...
    DENY = ...

class CacheModel(GObject.GEnum): 
    DOCUMENT_VIEWER = ...
    WEB_BROWSER = ...
    DOCUMENT_BROWSER = ...

class ContextMenuAction(GObject.GEnum): 
    NO_ACTION = ...
    OPEN_LINK = ...
    OPEN_LINK_IN_NEW_WINDOW = ...
    DOWNLOAD_LINK_TO_DISK = ...
    COPY_LINK_TO_CLIPBOARD = ...
    OPEN_IMAGE_IN_NEW_WINDOW = ...
    DOWNLOAD_IMAGE_TO_DISK = ...
    COPY_IMAGE_TO_CLIPBOARD = ...
    COPY_IMAGE_URL_TO_CLIPBOARD = ...
    OPEN_FRAME_IN_NEW_WINDOW = ...
    GO_BACK = ...
    GO_FORWARD = ...
    STOP = ...
    RELOAD = ...
    COPY = ...
    CUT = ...
    PASTE = ...
    DELETE = ...
    SELECT_ALL = ...
    INPUT_METHODS = ...
    UNICODE = ...
    SPELLING_GUESS = ...
    NO_GUESSES_FOUND = ...
    IGNORE_SPELLING = ...
    LEARN_SPELLING = ...
    IGNORE_GRAMMAR = ...
    FONT_MENU = ...
    BOLD = ...
    ITALIC = ...
    UNDERLINE = ...
    OUTLINE = ...
    INSPECT_ELEMENT = ...
    OPEN_VIDEO_IN_NEW_WINDOW = ...
    OPEN_AUDIO_IN_NEW_WINDOW = ...
    COPY_VIDEO_LINK_TO_CLIPBOARD = ...
    COPY_AUDIO_LINK_TO_CLIPBOARD = ...
    TOGGLE_MEDIA_CONTROLS = ...
    TOGGLE_MEDIA_LOOP = ...
    ENTER_VIDEO_FULLSCREEN = ...
    MEDIA_PLAY = ...
    MEDIA_PAUSE = ...
    MEDIA_MUTE = ...
    DOWNLOAD_VIDEO_TO_DISK = ...
    DOWNLOAD_AUDIO_TO_DISK = ...
    INSERT_EMOJI = ...
    PASTE_AS_PLAIN_TEXT = ...
    CUSTOM = ...

class CookieAcceptPolicy(GObject.GEnum): 
    ALWAYS = ...
    NEVER = ...
    NO_THIRD_PARTY = ...

class CookiePersistentStorage(GObject.GEnum): 
    TEXT = ...
    SQLITE = ...

class CredentialPersistence(GObject.GEnum): 
    NONE = ...
    FOR_SESSION = ...
    PERMANENT = ...

class DownloadError(GObject.GEnum): 
    NETWORK = ...
    CANCELLED_BY_USER = ...
    DESTINATION = ...

class FaviconDatabaseError(GObject.GEnum): 
    NOT_INITIALIZED = ...
    FAVICON_NOT_FOUND = ...
    FAVICON_UNKNOWN = ...

class HardwareAccelerationPolicy(GObject.GEnum): 
    ON_DEMAND = ...
    ALWAYS = ...
    NEVER = ...

class InputPurpose(GObject.GEnum): 
    FREE_FORM = ...
    DIGITS = ...
    NUMBER = ...
    PHONE = ...
    URL = ...
    EMAIL = ...
    PASSWORD = ...

class InsecureContentEvent(GObject.GEnum): 
    RUN = ...
    DISPLAYED = ...

class JavascriptError(GObject.GEnum): 
    FAILED = ...

class LoadEvent(GObject.GEnum): 
    STARTED = ...
    REDIRECTED = ...
    COMMITTED = ...
    FINISHED = ...

class MediaCaptureState(GObject.GEnum): 
    NONE = ...
    ACTIVE = ...
    MUTED = ...

class NavigationType(GObject.GEnum): 
    LINK_CLICKED = ...
    FORM_SUBMITTED = ...
    BACK_FORWARD = ...
    RELOAD = ...
    FORM_RESUBMITTED = ...
    OTHER = ...

class NetworkError(GObject.GEnum): 
    FAILED = ...
    TRANSPORT = ...
    UNKNOWN_PROTOCOL = ...
    CANCELLED = ...
    FILE_DOES_NOT_EXIST = ...

class NetworkProxyMode(GObject.GEnum): 
    DEFAULT = ...
    NO_PROXY = ...
    CUSTOM = ...

class PluginError(GObject.GEnum): 
    FAILED = ...
    CANNOT_FIND_PLUGIN = ...
    CANNOT_LOAD_PLUGIN = ...
    JAVA_UNAVAILABLE = ...
    CONNECTION_CANCELLED = ...
    WILL_HANDLE_LOAD = ...

class PolicyDecisionType(GObject.GEnum): 
    NAVIGATION_ACTION = ...
    NEW_WINDOW_ACTION = ...
    RESPONSE = ...

class PolicyError(GObject.GEnum): 
    FAILED = ...
    CANNOT_SHOW_MIME_TYPE = ...
    CANNOT_SHOW_URI = ...
    FRAME_LOAD_INTERRUPTED_BY_POLICY_CHANGE = ...
    CANNOT_USE_RESTRICTED_PORT = ...

class PrintError(GObject.GEnum): 
    GENERAL = ...
    PRINTER_NOT_FOUND = ...
    INVALID_PAGE_RANGE = ...

class PrintOperationResponse(GObject.GEnum): 
    PRINT = ...
    CANCEL = ...

class ProcessModel(GObject.GEnum): 
    SHARED_SECONDARY_PROCESS = ...
    MULTIPLE_SECONDARY_PROCESSES = ...

class SaveMode(GObject.GEnum): 
    MHTML = ...

class ScriptDialogType(GObject.GEnum): 
    ALERT = ...
    CONFIRM = ...
    PROMPT = ...
    BEFORE_UNLOAD_CONFIRM = ...

class SnapshotError(GObject.GEnum): 
    CREATE = ...

class SnapshotRegion(GObject.GEnum): 
    VISIBLE = ...
    FULL_DOCUMENT = ...

class TLSErrorsPolicy(GObject.GEnum): 
    IGNORE = ...
    FAIL = ...

class UserContentFilterError(GObject.GEnum): 
    INVALID_SOURCE = ...
    NOT_FOUND = ...

class UserContentInjectedFrames(GObject.GEnum): 
    ALL_FRAMES = ...
    TOP_FRAME = ...

class UserMessageError(GObject.GEnum): 
    MESSAGE = ...

class UserScriptInjectionTime(GObject.GEnum): 
    START = ...
    END = ...

class UserStyleLevel(GObject.GEnum): 
    USER = ...
    AUTHOR = ...

class WebExtensionMode(GObject.GEnum): 
    NONE = ...
    MANIFESTV2 = ...
    MANIFESTV3 = ...

class WebProcessTerminationReason(GObject.GEnum): 
    CRASHED = ...
    EXCEEDED_MEMORY_LIMIT = ...
    TERMINATED_BY_API = ...

