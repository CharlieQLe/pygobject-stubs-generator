from gi.repository import GLib, HarfBuzz, GObject, Gio, HarfBuzz, cairo

ANALYSIS_FLAG_CENTERED_BASELINE: int
ANALYSIS_FLAG_IS_ELLIPSIS: int
ANALYSIS_FLAG_NEED_HYPHEN: int
ATTR_INDEX_FROM_TEXT_BEGINNING: int
ATTR_INDEX_TO_TEXT_END: int
GLYPH_EMPTY: Glyph
GLYPH_INVALID_INPUT: Glyph
GLYPH_UNKNOWN_FLAG: Glyph
SCALE: int
VERSION_MAJOR: int
VERSION_MICRO: int
VERSION_MINOR: int
VERSION_STRING: str

def attr_allow_breaks_new(allow_breaks: bool) -> Attribute: ...
def attr_background_alpha_new(alpha: int) -> Attribute: ...
def attr_background_new(red: int, green: int, blue: int) -> Attribute: ...
def attr_baseline_shift_new(shift: int) -> Attribute: ...
def attr_break(text: str, length: int, attr_list: AttrList, offset: int, attrs: list[LogAttr], attrs_len: int) -> None: ...
def attr_fallback_new(enable_fallback: bool) -> Attribute: ...
def attr_family_new(family: str) -> Attribute: ...
def attr_font_desc_new(desc: FontDescription) -> Attribute: ...
def attr_font_features_new(features: str) -> Attribute: ...
def attr_font_scale_new(scale: FontScale) -> Attribute: ...
def attr_foreground_alpha_new(alpha: int) -> Attribute: ...
def attr_foreground_new(red: int, green: int, blue: int) -> Attribute: ...
def attr_gravity_hint_new(hint: GravityHint) -> Attribute: ...
def attr_gravity_new(gravity: Gravity) -> Attribute: ...
def attr_insert_hyphens_new(insert_hyphens: bool) -> Attribute: ...
def attr_language_new(language: Language) -> Attribute: ...
def attr_letter_spacing_new(letter_spacing: int) -> Attribute: ...
def attr_line_height_new(factor: float) -> Attribute: ...
def attr_line_height_new_absolute(height: int) -> Attribute: ...
def attr_list_from_string(text: str) -> AttrList | None: ...
def attr_overline_color_new(red: int, green: int, blue: int) -> Attribute: ...
def attr_overline_new(overline: Overline) -> Attribute: ...
def attr_rise_new(rise: int) -> Attribute: ...
def attr_scale_new(scale_factor: float) -> Attribute: ...
def attr_sentence_new() -> Attribute: ...
def attr_shape_new(ink_rect: Rectangle, logical_rect: Rectangle) -> Attribute: ...
def attr_shape_new_with_data(ink_rect: Rectangle, logical_rect: Rectangle, data: object | None, copy_func: AttrDataCopyFunc | None, destroy_func: GLib.DestroyNotify | None) -> Attribute: ...
def attr_show_new(flags: ShowFlags) -> Attribute: ...
def attr_size_new(size: int) -> Attribute: ...
def attr_size_new_absolute(size: int) -> Attribute: ...
def attr_stretch_new(stretch: Stretch) -> Attribute: ...
def attr_strikethrough_color_new(red: int, green: int, blue: int) -> Attribute: ...
def attr_strikethrough_new(strikethrough: bool) -> Attribute: ...
def attr_style_new(style: Style) -> Attribute: ...
def attr_text_transform_new(transform: TextTransform) -> Attribute: ...
def attr_type_get_name(type: AttrType) -> str | None: ...
def attr_type_register(name: str) -> AttrType: ...
def attr_underline_color_new(red: int, green: int, blue: int) -> Attribute: ...
def attr_underline_new(underline: Underline) -> Attribute: ...
def attr_variant_new(variant: Variant) -> Attribute: ...
def attr_weight_new(weight: Weight) -> Attribute: ...
def attr_word_new() -> Attribute: ...
def bidi_type_for_unichar(ch: gunichar) -> BidiType: ...
def break(text: str, length: int, analysis: Analysis, attrs: list[LogAttr], attrs_len: int) -> None: ...
def default_break(text: str, length: int, analysis: Analysis | None, attrs: LogAttr, attrs_len: int) -> None: ...
def extents_to_pixels(inclusive: Rectangle | None, nearest: Rectangle | None) -> None: ...
def find_base_dir(text: str, length: int) -> Direction: ...
def find_paragraph_boundary(text: str, length: int, paragraph_delimiter_index: int, next_paragraph_start: int) -> None: ...
def font_description_from_string(str: str) -> FontDescription: ...
def get_log_attrs(text: str, length: int, level: int, language: Language, attrs: list[LogAttr], attrs_len: int) -> None: ...
def get_mirror_char(ch: gunichar, mirrored_ch: gunichar) -> bool: ...
def gravity_get_for_matrix(matrix: Matrix | None) -> Gravity: ...
def gravity_get_for_script(script: Script, base_gravity: Gravity, hint: GravityHint) -> Gravity: ...
def gravity_get_for_script_and_width(script: Script, wide: bool, base_gravity: Gravity, hint: GravityHint) -> Gravity: ...
def gravity_to_rotation(gravity: Gravity) -> float: ...
def is_zero_width(ch: gunichar) -> bool: ...
def itemize(context: Context, text: str, start_index: int, length: int, attrs: AttrList, cached_iter: AttrIterator | None) -> GLib.List: ...
def itemize_with_base_dir(context: Context, base_dir: Direction, text: str, start_index: int, length: int, attrs: AttrList, cached_iter: AttrIterator | None) -> GLib.List: ...
def language_from_string(language: str | None) -> Language | None: ...
def language_get_default() -> Language: ...
def language_get_preferred() -> list[Language] | None: ...
def layout_deserialize_error_quark() -> GLib.Quark: ...
def log2vis_get_embedding_levels(text: str, length: int, pbase_dir: Direction) -> int: ...
def markup_parser_finish(context: GLib.MarkupParseContext, attr_list: AttrList, text: str, accel_char: gunichar) -> bool: ...
def markup_parser_new(accel_marker: gunichar) -> GLib.MarkupParseContext: ...
def parse_enum(type: GObject.Type, str: str | None, value: int, warn: bool, possible_values: str) -> bool: ...
def parse_markup(markup_text: str, length: int, accel_marker: gunichar, attr_list: AttrList, text: str, accel_char: gunichar) -> bool: ...
def parse_stretch(str: str, stretch: Stretch, warn: bool) -> bool: ...
def parse_style(str: str, style: Style, warn: bool) -> bool: ...
def parse_variant(str: str, variant: Variant, warn: bool) -> bool: ...
def parse_weight(str: str, weight: Weight, warn: bool) -> bool: ...
def quantize_line_geometry(thickness: int, position: int) -> None: ...
def read_line(stream: object | None, str: GLib.String) -> int: ...
def reorder_items(items: GLib.List) -> GLib.List: ...
def scan_int(pos: str, out: int) -> bool: ...
def scan_string(pos: str, out: GLib.String) -> bool: ...
def scan_word(pos: str, out: GLib.String) -> bool: ...
def script_for_unichar(ch: gunichar) -> Script: ...
def script_get_sample_language(script: Script) -> Language | None: ...
def shape(text: str, length: int, analysis: Analysis, glyphs: GlyphString) -> None: ...
def shape_full(item_text: str, item_length: int, paragraph_text: str | None, paragraph_length: int, analysis: Analysis, glyphs: GlyphString) -> None: ...
def shape_item(item: Item, paragraph_text: str | None, paragraph_length: int, log_attrs: LogAttr | None, glyphs: GlyphString, flags: ShapeFlags) -> None: ...
def shape_with_flags(item_text: str, item_length: int, paragraph_text: str | None, paragraph_length: int, analysis: Analysis, glyphs: GlyphString, flags: ShapeFlags) -> None: ...
def skip_space(pos: str) -> bool: ...
def split_file_list(str: str) -> list[str]: ...
def tab_array_from_string(text: str) -> TabArray | None: ...
def tailor_break(text: str, length: int, analysis: Analysis, offset: int, attrs: list[LogAttr], attrs_len: int) -> None: ...
def trim_string(str: str) -> str: ...
def unichar_direction(ch: gunichar) -> Direction: ...
def units_from_double(d: float) -> int: ...
def units_to_double(i: int) -> float: ...
def version() -> int: ...
def version_check(required_major: int, required_minor: int, required_micro: int) -> str | None: ...
def version_string() -> str: ...

class Context(GObject.Object): 
    @classmethod
    def new(cls) -> Context: ...
    def changed(self) -> None: ...
    def get_base_dir(self) -> Direction: ...
    def get_base_gravity(self) -> Gravity: ...
    def get_font_description(self) -> FontDescription | None: ...
    def get_font_map(self) -> FontMap | None: ...
    def get_gravity(self) -> Gravity: ...
    def get_gravity_hint(self) -> GravityHint: ...
    def get_language(self) -> Language: ...
    def get_matrix(self) -> Matrix | None: ...
    def get_metrics(self, desc: FontDescription | None, language: Language | None) -> FontMetrics: ...
    def get_round_glyph_positions(self) -> bool: ...
    def get_serial(self) -> int: ...
    def list_families(self, families: list[FontFamily], n_families: int) -> None: ...
    def load_font(self, desc: FontDescription) -> Font | None: ...
    def load_fontset(self, desc: FontDescription, language: Language) -> Fontset | None: ...
    def set_base_dir(self, direction: Direction) -> None: ...
    def set_base_gravity(self, gravity: Gravity) -> None: ...
    def set_font_description(self, desc: FontDescription | None) -> None: ...
    def set_font_map(self, font_map: FontMap | None) -> None: ...
    def set_gravity_hint(self, hint: GravityHint) -> None: ...
    def set_language(self, language: Language | None) -> None: ...
    def set_matrix(self, matrix: Matrix | None) -> None: ...
    def set_round_glyph_positions(self, round_positions: bool) -> None: ...

class Coverage(GObject.Object): 
    @classmethod
    def new(cls) -> Coverage: ...
    @classmethod
    def from_bytes(cls, bytes: list[int], n_bytes: int) -> Coverage | None: ...
    def copy(self) -> Coverage: ...
    def get(self, index_: int) -> CoverageLevel: ...
    def max(self, other: Coverage) -> None: ...
    def ref(self) -> Coverage: ...
    def set(self, index_: int, level: CoverageLevel) -> None: ...
    def to_bytes(self, bytes: list[int], n_bytes: int) -> None: ...
    def unref(self) -> None: ...

class Font(GObject.Object): 
    @classmethod
    def descriptions_free(cls, descs: list[FontDescription] | None, n_descs: int) -> None: ...
    @classmethod
    def deserialize(cls, context: Context, bytes: GLib.Bytes) -> Font | None: ...
    def describe(self) -> FontDescription: ...
    def describe_with_absolute_size(self) -> FontDescription: ...
    def get_coverage(self, language: Language) -> Coverage: ...
    def get_face(self) -> FontFace: ...
    def get_features(self, features: list[HarfBuzz.feature_t], len: int, num_features: int) -> None: ...
    def get_font_map(self) -> FontMap | None: ...
    def get_glyph_extents(self, glyph: Glyph, ink_rect: Rectangle, logical_rect: Rectangle) -> None: ...
    def get_hb_font(self) -> HarfBuzz.font_t | None: ...
    def get_languages(self) -> list[Language] | None: ...
    def get_metrics(self, language: Language | None) -> FontMetrics: ...
    def has_char(self, wc: gunichar) -> bool: ...
    def serialize(self) -> GLib.Bytes: ...

class FontFace(GObject.Object): 
    def describe(self) -> FontDescription: ...
    def get_face_name(self) -> str: ...
    def get_family(self) -> FontFamily: ...
    def is_synthesized(self) -> bool: ...
    def list_sizes(self, sizes: list[int] | None, n_sizes: int) -> None: ...

class FontFamily(GObject.Object, Gio.ListModel): 
    def get_face(self, name: str | None) -> FontFace | None: ...
    def get_name(self) -> str: ...
    def is_monospace(self) -> bool: ...
    def is_variable(self) -> bool: ...
    def list_faces(self, faces: list[FontFace], n_faces: int) -> None: ...

class FontMap(GObject.Object, Gio.ListModel): 
    def changed(self) -> None: ...
    def create_context(self) -> Context: ...
    def get_family(self, name: str) -> FontFamily: ...
    def get_serial(self) -> int: ...
    def list_families(self, families: list[FontFamily], n_families: int) -> None: ...
    def load_font(self, context: Context, desc: FontDescription) -> Font | None: ...
    def load_fontset(self, context: Context, desc: FontDescription, language: Language) -> Fontset | None: ...

class Fontset(GObject.Object): 
    def foreach(self, func: FontsetForeachFunc, data: object | None) -> None: ...
    def get_font(self, wc: int) -> Font: ...
    def get_metrics(self) -> FontMetrics: ...

class FontsetSimple(Fontset): 
    @classmethod
    def new(cls, language: Language) -> FontsetSimple: ...
    def append(self, font: Font) -> None: ...
    def size(self) -> int: ...

class Layout(GObject.Object): 
    @classmethod
    def new(cls, context: Context) -> Layout: ...
    @classmethod
    def deserialize(cls, context: Context, bytes: GLib.Bytes, flags: LayoutDeserializeFlags) -> Layout | None: ...
    def context_changed(self) -> None: ...
    def copy(self) -> Layout: ...
    def get_alignment(self) -> Alignment: ...
    def get_attributes(self) -> AttrList | None: ...
    def get_auto_dir(self) -> bool: ...
    def get_baseline(self) -> int: ...
    def get_caret_pos(self, index_: int, strong_pos: Rectangle, weak_pos: Rectangle) -> None: ...
    def get_character_count(self) -> int: ...
    def get_context(self) -> Context: ...
    def get_cursor_pos(self, index_: int, strong_pos: Rectangle, weak_pos: Rectangle) -> None: ...
    def get_direction(self, index: int) -> Direction: ...
    def get_ellipsize(self) -> EllipsizeMode: ...
    def get_extents(self, ink_rect: Rectangle, logical_rect: Rectangle) -> None: ...
    def get_font_description(self) -> FontDescription | None: ...
    def get_height(self) -> int: ...
    def get_indent(self) -> int: ...
    def get_iter(self) -> LayoutIter: ...
    def get_justify(self) -> bool: ...
    def get_justify_last_line(self) -> bool: ...
    def get_line(self, line: int) -> LayoutLine | None: ...
    def get_line_count(self) -> int: ...
    def get_line_readonly(self, line: int) -> LayoutLine | None: ...
    def get_line_spacing(self) -> float: ...
    def get_lines(self) -> GLib.SList: ...
    def get_lines_readonly(self) -> GLib.SList: ...
    def get_log_attrs(self, attrs: list[LogAttr], n_attrs: int) -> None: ...
    def get_log_attrs_readonly(self, n_attrs: int) -> list[LogAttr]: ...
    def get_pixel_extents(self, ink_rect: Rectangle, logical_rect: Rectangle) -> None: ...
    def get_pixel_size(self, width: int, height: int) -> None: ...
    def get_serial(self) -> int: ...
    def get_single_paragraph_mode(self) -> bool: ...
    def get_size(self, width: int, height: int) -> None: ...
    def get_spacing(self) -> int: ...
    def get_tabs(self) -> TabArray | None: ...
    def get_text(self) -> str: ...
    def get_unknown_glyphs_count(self) -> int: ...
    def get_width(self) -> int: ...
    def get_wrap(self) -> WrapMode: ...
    def index_to_line_x(self, index_: int, trailing: bool, line: int, x_pos: int) -> None: ...
    def index_to_pos(self, index_: int, pos: Rectangle) -> None: ...
    def is_ellipsized(self) -> bool: ...
    def is_wrapped(self) -> bool: ...
    def move_cursor_visually(self, strong: bool, old_index: int, old_trailing: int, direction: int, new_index: int, new_trailing: int) -> None: ...
    def serialize(self, flags: LayoutSerializeFlags) -> GLib.Bytes: ...
    def set_alignment(self, alignment: Alignment) -> None: ...
    def set_attributes(self, attrs: AttrList | None) -> None: ...
    def set_auto_dir(self, auto_dir: bool) -> None: ...
    def set_ellipsize(self, ellipsize: EllipsizeMode) -> None: ...
    def set_font_description(self, desc: FontDescription | None) -> None: ...
    def set_height(self, height: int) -> None: ...
    def set_indent(self, indent: int) -> None: ...
    def set_justify(self, justify: bool) -> None: ...
    def set_justify_last_line(self, justify: bool) -> None: ...
    def set_line_spacing(self, factor: float) -> None: ...
    def set_markup(self, markup: str, length: int) -> None: ...
    def set_markup_with_accel(self, markup: str, length: int, accel_marker: gunichar, accel_char: gunichar) -> None: ...
    def set_single_paragraph_mode(self, setting: bool) -> None: ...
    def set_spacing(self, spacing: int) -> None: ...
    def set_tabs(self, tabs: TabArray | None) -> None: ...
    def set_text(self, text: str, length: int) -> None: ...
    def set_width(self, width: int) -> None: ...
    def set_wrap(self, wrap: WrapMode) -> None: ...
    def write_to_file(self, flags: LayoutSerializeFlags, filename: filename) -> bool: ...
    def xy_to_index(self, x: int, y: int, index_: int, trailing: int) -> bool: ...

class Renderer(GObject.Object): 
    def activate(self) -> None: ...
    def deactivate(self) -> None: ...
    def draw_error_underline(self, x: int, y: int, width: int, height: int) -> None: ...
    def draw_glyph(self, font: Font, glyph: Glyph, x: float, y: float) -> None: ...
    def draw_glyph_item(self, text: str | None, glyph_item: GlyphItem, x: int, y: int) -> None: ...
    def draw_glyphs(self, font: Font, glyphs: GlyphString, x: int, y: int) -> None: ...
    def draw_layout(self, layout: Layout, x: int, y: int) -> None: ...
    def draw_layout_line(self, line: LayoutLine, x: int, y: int) -> None: ...
    def draw_rectangle(self, part: RenderPart, x: int, y: int, width: int, height: int) -> None: ...
    def draw_trapezoid(self, part: RenderPart, y1_: float, x11: float, x21: float, y2: float, x12: float, x22: float) -> None: ...
    def get_alpha(self, part: RenderPart) -> int: ...
    def get_color(self, part: RenderPart) -> Color | None: ...
    def get_layout(self) -> Layout | None: ...
    def get_layout_line(self) -> LayoutLine | None: ...
    def get_matrix(self) -> Matrix | None: ...
    def part_changed(self, part: RenderPart) -> None: ...
    def set_alpha(self, part: RenderPart, alpha: int) -> None: ...
    def set_color(self, part: RenderPart, color: Color | None) -> None: ...
    def set_matrix(self, matrix: Matrix | None) -> None: ...

class FontMask(GObject.GFlag): 
    FAMILY = ...
    STYLE = ...
    VARIANT = ...
    WEIGHT = ...
    STRETCH = ...
    SIZE = ...
    GRAVITY = ...
    VARIATIONS = ...

class LayoutDeserializeFlags(GObject.GFlag): 
    DEFAULT = ...
    CONTEXT = ...

class LayoutSerializeFlags(GObject.GFlag): 
    DEFAULT = ...
    CONTEXT = ...
    OUTPUT = ...

class ShapeFlags(GObject.GFlag): 
    NONE = ...
    ROUND_POSITIONS = ...

class ShowFlags(GObject.GFlag): 
    NONE = ...
    SPACES = ...
    LINE_BREAKS = ...
    IGNORABLES = ...

class Alignment(GObject.GEnum): 
    LEFT = ...
    CENTER = ...
    RIGHT = ...

class AttrType(GObject.GEnum): 
    INVALID = ...
    LANGUAGE = ...
    FAMILY = ...
    STYLE = ...
    WEIGHT = ...
    VARIANT = ...
    STRETCH = ...
    SIZE = ...
    FONT_DESC = ...
    FOREGROUND = ...
    BACKGROUND = ...
    UNDERLINE = ...
    STRIKETHROUGH = ...
    RISE = ...
    SHAPE = ...
    SCALE = ...
    FALLBACK = ...
    LETTER_SPACING = ...
    UNDERLINE_COLOR = ...
    STRIKETHROUGH_COLOR = ...
    ABSOLUTE_SIZE = ...
    GRAVITY = ...
    GRAVITY_HINT = ...
    FONT_FEATURES = ...
    FOREGROUND_ALPHA = ...
    BACKGROUND_ALPHA = ...
    ALLOW_BREAKS = ...
    SHOW = ...
    INSERT_HYPHENS = ...
    OVERLINE = ...
    OVERLINE_COLOR = ...
    LINE_HEIGHT = ...
    ABSOLUTE_LINE_HEIGHT = ...
    TEXT_TRANSFORM = ...
    WORD = ...
    SENTENCE = ...
    BASELINE_SHIFT = ...
    FONT_SCALE = ...

class BaselineShift(GObject.GEnum): 
    NONE = ...
    SUPERSCRIPT = ...
    SUBSCRIPT = ...

class BidiType(GObject.GEnum): 
    L = ...
    LRE = ...
    LRO = ...
    R = ...
    AL = ...
    RLE = ...
    RLO = ...
    PDF = ...
    EN = ...
    ES = ...
    ET = ...
    AN = ...
    CS = ...
    NSM = ...
    BN = ...
    B = ...
    S = ...
    WS = ...
    ON = ...
    LRI = ...
    RLI = ...
    FSI = ...
    PDI = ...

class CoverageLevel(GObject.GEnum): 
    NONE = ...
    FALLBACK = ...
    APPROXIMATE = ...
    EXACT = ...

class Direction(GObject.GEnum): 
    LTR = ...
    RTL = ...
    TTB_LTR = ...
    TTB_RTL = ...
    WEAK_LTR = ...
    WEAK_RTL = ...
    NEUTRAL = ...

class EllipsizeMode(GObject.GEnum): 
    NONE = ...
    START = ...
    MIDDLE = ...
    END = ...

class FontScale(GObject.GEnum): 
    NONE = ...
    SUPERSCRIPT = ...
    SUBSCRIPT = ...
    SMALL_CAPS = ...

class Gravity(GObject.GEnum): 
    SOUTH = ...
    EAST = ...
    NORTH = ...
    WEST = ...
    AUTO = ...

class GravityHint(GObject.GEnum): 
    NATURAL = ...
    STRONG = ...
    LINE = ...

class LayoutDeserializeError(GObject.GEnum): 
    INVALID = ...
    INVALID_VALUE = ...
    MISSING_VALUE = ...

class Overline(GObject.GEnum): 
    NONE = ...
    SINGLE = ...

class RenderPart(GObject.GEnum): 
    FOREGROUND = ...
    BACKGROUND = ...
    UNDERLINE = ...
    STRIKETHROUGH = ...
    OVERLINE = ...

class Script(GObject.GEnum): 
    INVALID_CODE = ...
    COMMON = ...
    INHERITED = ...
    ARABIC = ...
    ARMENIAN = ...
    BENGALI = ...
    BOPOMOFO = ...
    CHEROKEE = ...
    COPTIC = ...
    CYRILLIC = ...
    DESERET = ...
    DEVANAGARI = ...
    ETHIOPIC = ...
    GEORGIAN = ...
    GOTHIC = ...
    GREEK = ...
    GUJARATI = ...
    GURMUKHI = ...
    HAN = ...
    HANGUL = ...
    HEBREW = ...
    HIRAGANA = ...
    KANNADA = ...
    KATAKANA = ...
    KHMER = ...
    LAO = ...
    LATIN = ...
    MALAYALAM = ...
    MONGOLIAN = ...
    MYANMAR = ...
    OGHAM = ...
    OLD_ITALIC = ...
    ORIYA = ...
    RUNIC = ...
    SINHALA = ...
    SYRIAC = ...
    TAMIL = ...
    TELUGU = ...
    THAANA = ...
    THAI = ...
    TIBETAN = ...
    CANADIAN_ABORIGINAL = ...
    YI = ...
    TAGALOG = ...
    HANUNOO = ...
    BUHID = ...
    TAGBANWA = ...
    BRAILLE = ...
    CYPRIOT = ...
    LIMBU = ...
    OSMANYA = ...
    SHAVIAN = ...
    LINEAR_B = ...
    TAI_LE = ...
    UGARITIC = ...
    NEW_TAI_LUE = ...
    BUGINESE = ...
    GLAGOLITIC = ...
    TIFINAGH = ...
    SYLOTI_NAGRI = ...
    OLD_PERSIAN = ...
    KHAROSHTHI = ...
    UNKNOWN = ...
    BALINESE = ...
    CUNEIFORM = ...
    PHOENICIAN = ...
    PHAGS_PA = ...
    NKO = ...
    KAYAH_LI = ...
    LEPCHA = ...
    REJANG = ...
    SUNDANESE = ...
    SAURASHTRA = ...
    CHAM = ...
    OL_CHIKI = ...
    VAI = ...
    CARIAN = ...
    LYCIAN = ...
    LYDIAN = ...
    BATAK = ...
    BRAHMI = ...
    MANDAIC = ...
    CHAKMA = ...
    MEROITIC_CURSIVE = ...
    MEROITIC_HIEROGLYPHS = ...
    MIAO = ...
    SHARADA = ...
    SORA_SOMPENG = ...
    TAKRI = ...
    BASSA_VAH = ...
    CAUCASIAN_ALBANIAN = ...
    DUPLOYAN = ...
    ELBASAN = ...
    GRANTHA = ...
    KHOJKI = ...
    KHUDAWADI = ...
    LINEAR_A = ...
    MAHAJANI = ...
    MANICHAEAN = ...
    MENDE_KIKAKUI = ...
    MODI = ...
    MRO = ...
    NABATAEAN = ...
    OLD_NORTH_ARABIAN = ...
    OLD_PERMIC = ...
    PAHAWH_HMONG = ...
    PALMYRENE = ...
    PAU_CIN_HAU = ...
    PSALTER_PAHLAVI = ...
    SIDDHAM = ...
    TIRHUTA = ...
    WARANG_CITI = ...
    AHOM = ...
    ANATOLIAN_HIEROGLYPHS = ...
    HATRAN = ...
    MULTANI = ...
    OLD_HUNGARIAN = ...
    SIGNWRITING = ...

class Stretch(GObject.GEnum): 
    ULTRA_CONDENSED = ...
    EXTRA_CONDENSED = ...
    CONDENSED = ...
    SEMI_CONDENSED = ...
    NORMAL = ...
    SEMI_EXPANDED = ...
    EXPANDED = ...
    EXTRA_EXPANDED = ...
    ULTRA_EXPANDED = ...

class Style(GObject.GEnum): 
    NORMAL = ...
    OBLIQUE = ...
    ITALIC = ...

class TabAlign(GObject.GEnum): 
    LEFT = ...
    RIGHT = ...
    CENTER = ...
    DECIMAL = ...

class TextTransform(GObject.GEnum): 
    NONE = ...
    LOWERCASE = ...
    UPPERCASE = ...
    CAPITALIZE = ...

class Underline(GObject.GEnum): 
    NONE = ...
    SINGLE = ...
    DOUBLE = ...
    LOW = ...
    ERROR = ...
    SINGLE_LINE = ...
    DOUBLE_LINE = ...
    ERROR_LINE = ...

class Variant(GObject.GEnum): 
    NORMAL = ...
    SMALL_CAPS = ...
    ALL_SMALL_CAPS = ...
    PETITE_CAPS = ...
    ALL_PETITE_CAPS = ...
    UNICASE = ...
    TITLE_CAPS = ...

class Weight(GObject.GEnum): 
    THIN = ...
    ULTRALIGHT = ...
    LIGHT = ...
    SEMILIGHT = ...
    BOOK = ...
    NORMAL = ...
    MEDIUM = ...
    SEMIBOLD = ...
    BOLD = ...
    ULTRABOLD = ...
    HEAVY = ...
    ULTRAHEAVY = ...

class WrapMode(GObject.GEnum): 
    WORD = ...
    CHAR = ...
    WORD_CHAR = ...

