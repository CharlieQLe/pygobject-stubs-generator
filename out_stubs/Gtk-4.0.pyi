from gi.repository import Gdk, GObject, GLib, Pango, cairo, Gio, Gsk, GdkPixbuf, Graphene, Gdk, Gsk

ACCESSIBLE_VALUE_UNDEFINED: int
BINARY_AGE: int
IM_MODULE_EXTENSION_POINT_NAME: str
INPUT_ERROR: int
INTERFACE_AGE: int
INVALID_LIST_POSITION: int
LEVEL_BAR_OFFSET_FULL: str
LEVEL_BAR_OFFSET_HIGH: str
LEVEL_BAR_OFFSET_LOW: str
MAJOR_VERSION: int
MAX_COMPOSE_LEN: int
MEDIA_FILE_EXTENSION_POINT_NAME: str
MICRO_VERSION: int
MINOR_VERSION: int
PAPER_NAME_A3: str
PAPER_NAME_A4: str
PAPER_NAME_A5: str
PAPER_NAME_B5: str
PAPER_NAME_EXECUTIVE: str
PAPER_NAME_LEGAL: str
PAPER_NAME_LETTER: str
PRINT_SETTINGS_COLLATE: str
PRINT_SETTINGS_DEFAULT_SOURCE: str
PRINT_SETTINGS_DITHER: str
PRINT_SETTINGS_DUPLEX: str
PRINT_SETTINGS_FINISHINGS: str
PRINT_SETTINGS_MEDIA_TYPE: str
PRINT_SETTINGS_NUMBER_UP: str
PRINT_SETTINGS_NUMBER_UP_LAYOUT: str
PRINT_SETTINGS_N_COPIES: str
PRINT_SETTINGS_ORIENTATION: str
PRINT_SETTINGS_OUTPUT_BASENAME: str
PRINT_SETTINGS_OUTPUT_BIN: str
PRINT_SETTINGS_OUTPUT_DIR: str
PRINT_SETTINGS_OUTPUT_FILE_FORMAT: str
PRINT_SETTINGS_OUTPUT_URI: str
PRINT_SETTINGS_PAGE_RANGES: str
PRINT_SETTINGS_PAGE_SET: str
PRINT_SETTINGS_PAPER_FORMAT: str
PRINT_SETTINGS_PAPER_HEIGHT: str
PRINT_SETTINGS_PAPER_WIDTH: str
PRINT_SETTINGS_PRINTER: str
PRINT_SETTINGS_PRINTER_LPI: str
PRINT_SETTINGS_PRINT_PAGES: str
PRINT_SETTINGS_QUALITY: str
PRINT_SETTINGS_RESOLUTION: str
PRINT_SETTINGS_RESOLUTION_X: str
PRINT_SETTINGS_RESOLUTION_Y: str
PRINT_SETTINGS_REVERSE: str
PRINT_SETTINGS_SCALE: str
PRINT_SETTINGS_USE_COLOR: str
PRINT_SETTINGS_WIN32_DRIVER_EXTRA: str
PRINT_SETTINGS_WIN32_DRIVER_VERSION: str
PRIORITY_RESIZE: int
STYLE_PROVIDER_PRIORITY_APPLICATION: int
STYLE_PROVIDER_PRIORITY_FALLBACK: int
STYLE_PROVIDER_PRIORITY_SETTINGS: int
STYLE_PROVIDER_PRIORITY_THEME: int
STYLE_PROVIDER_PRIORITY_USER: int
TEXT_VIEW_PRIORITY_VALIDATE: int
TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID: int
TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID: int

def accelerator_get_default_mod_mask() -> Gdk.ModifierType: ...
def accelerator_get_label(accelerator_key: int, accelerator_mods: Gdk.ModifierType) -> str: ...
def accelerator_get_label_with_keycode(display: Gdk.Display | None, accelerator_key: int, keycode: int, accelerator_mods: Gdk.ModifierType) -> str: ...
def accelerator_name(accelerator_key: int, accelerator_mods: Gdk.ModifierType) -> str: ...
def accelerator_name_with_keycode(display: Gdk.Display | None, accelerator_key: int, keycode: int, accelerator_mods: Gdk.ModifierType) -> str: ...
def accelerator_parse(accelerator: str, accelerator_key: int, accelerator_mods: Gdk.ModifierType) -> bool: ...
def accelerator_parse_with_keycode(accelerator: str, display: Gdk.Display | None, accelerator_key: int, accelerator_codes: list[int], accelerator_mods: Gdk.ModifierType) -> bool: ...
def accelerator_valid(keyval: int, modifiers: Gdk.ModifierType) -> bool: ...
def accessible_property_init_value(property: AccessibleProperty, value: GObject.Value) -> None: ...
def accessible_relation_init_value(relation: AccessibleRelation, value: GObject.Value) -> None: ...
def accessible_state_init_value(state: AccessibleState, value: GObject.Value) -> None: ...
def bitset_iter_init_at(iter: BitsetIter, set: Bitset, target: int, value: int) -> bool: ...
def bitset_iter_init_first(iter: BitsetIter, set: Bitset, value: int) -> bool: ...
def bitset_iter_init_last(iter: BitsetIter, set: Bitset, value: int) -> bool: ...
def builder_error_quark() -> GLib.Quark: ...
def check_version(required_major: int, required_minor: int, required_micro: int) -> str | None: ...
def constraint_vfl_parser_error_quark() -> GLib.Quark: ...
def css_parser_error_quark() -> GLib.Quark: ...
def css_parser_warning_quark() -> GLib.Quark: ...
def disable_setlocale() -> None: ...
def distribute_natural_allocation(extra_space: int, n_requested_sizes: int, sizes: list[RequestedSize]) -> int: ...
def editable_delegate_get_property(object: GObject.Object, prop_id: int, value: GObject.Value, pspec: GObject.ParamSpec) -> bool: ...
def editable_delegate_set_property(object: GObject.Object, prop_id: int, value: GObject.Value, pspec: GObject.ParamSpec) -> bool: ...
def editable_install_properties(object_class: GObject.ObjectClass, first_prop: int) -> int: ...
def enumerate_printers(func: PrinterFunc, data: object | None, destroy: GLib.DestroyNotify, wait: bool) -> None: ...
def file_chooser_error_quark() -> GLib.Quark: ...
def get_binary_age() -> int: ...
def get_debug_flags() -> DebugFlags: ...
def get_default_language() -> Pango.Language: ...
def get_interface_age() -> int: ...
def get_locale_direction() -> TextDirection: ...
def get_major_version() -> int: ...
def get_micro_version() -> int: ...
def get_minor_version() -> int: ...
def hsv_to_rgb(h: float, s: float, v: float, r: float, g: float, b: float) -> None: ...
def icon_theme_error_quark() -> GLib.Quark: ...
def init() -> None: ...
def init_check() -> bool: ...
def is_initialized() -> bool: ...
def native_get_for_surface(surface: Gdk.Surface) -> Native | None: ...
def ordering_from_cmpfunc(cmpfunc_result: int) -> Ordering: ...
def paper_size_get_default() -> str: ...
def paper_size_get_paper_sizes(include_custom: bool) -> GLib.List: ...
def param_spec_expression(name: str, nick: str, blurb: str, flags: GObject.ParamFlags) -> GObject.ParamSpec: ...
def print_error_quark() -> GLib.Quark: ...
def print_run_page_setup_dialog(parent: Window | None, page_setup: PageSetup | None, settings: PrintSettings) -> PageSetup: ...
def print_run_page_setup_dialog_async(parent: Window | None, page_setup: PageSetup | None, settings: PrintSettings, done_cb: PageSetupDoneFunc, data: object | None) -> None: ...
def recent_manager_error_quark() -> GLib.Quark: ...
def render_activity(context: StyleContext, cr: cairo.Context, x: float, y: float, width: float, height: float) -> None: ...
def render_arrow(context: StyleContext, cr: cairo.Context, angle: float, x: float, y: float, size: float) -> None: ...
def render_background(context: StyleContext, cr: cairo.Context, x: float, y: float, width: float, height: float) -> None: ...
def render_check(context: StyleContext, cr: cairo.Context, x: float, y: float, width: float, height: float) -> None: ...
def render_expander(context: StyleContext, cr: cairo.Context, x: float, y: float, width: float, height: float) -> None: ...
def render_focus(context: StyleContext, cr: cairo.Context, x: float, y: float, width: float, height: float) -> None: ...
def render_frame(context: StyleContext, cr: cairo.Context, x: float, y: float, width: float, height: float) -> None: ...
def render_handle(context: StyleContext, cr: cairo.Context, x: float, y: float, width: float, height: float) -> None: ...
def render_icon(context: StyleContext, cr: cairo.Context, texture: Gdk.Texture, x: float, y: float) -> None: ...
def render_layout(context: StyleContext, cr: cairo.Context, x: float, y: float, layout: Pango.Layout) -> None: ...
def render_line(context: StyleContext, cr: cairo.Context, x0: float, y0: float, x1: float, y1: float) -> None: ...
def render_option(context: StyleContext, cr: cairo.Context, x: float, y: float, width: float, height: float) -> None: ...
def rgb_to_hsv(r: float, g: float, b: float, h: float, s: float, v: float) -> None: ...
def set_debug_flags(flags: DebugFlags) -> None: ...
def show_about_dialog(parent: Window | None, first_property_name: str) -> None: ...
def show_uri(parent: Window | None, uri: str, timestamp: int) -> None: ...
def show_uri_full(parent: Window | None, uri: str, timestamp: int, cancellable: Gio.Cancellable | None, callback: Gio.AsyncReadyCallback | None, user_data: object | None) -> None: ...
def show_uri_full_finish(parent: Window, result: Gio.AsyncResult) -> bool: ...
def test_accessible_assertion_message_role(domain: str, file: str, line: int, func: str, expr: str, accessible: Accessible, expected_role: AccessibleRole, actual_role: AccessibleRole) -> None: ...
def test_accessible_check_property(accessible: Accessible, property: AccessibleProperty) -> str: ...
def test_accessible_check_relation(accessible: Accessible, relation: AccessibleRelation) -> str: ...
def test_accessible_check_state(accessible: Accessible, state: AccessibleState) -> str: ...
def test_accessible_has_property(accessible: Accessible, property: AccessibleProperty) -> bool: ...
def test_accessible_has_relation(accessible: Accessible, relation: AccessibleRelation) -> bool: ...
def test_accessible_has_role(accessible: Accessible, role: AccessibleRole) -> bool: ...
def test_accessible_has_state(accessible: Accessible, state: AccessibleState) -> bool: ...
def test_init(argcp: int, argvp: list[str]) -> None: ...
def test_list_all_types(n_types: int) -> list[GObject.Type]: ...
def test_register_all_types() -> None: ...
def test_widget_wait_for_draw(widget: Widget) -> None: ...
def tree_create_row_drag_content(tree_model: TreeModel, path: TreePath) -> Gdk.ContentProvider: ...
def tree_get_row_drag_data(value: GObject.Value, tree_model: TreeModel | None, path: TreePath | None) -> bool: ...
def tree_row_reference_deleted(proxy: GObject.Object, path: TreePath) -> None: ...
def tree_row_reference_inserted(proxy: GObject.Object, path: TreePath) -> None: ...
def tree_row_reference_reordered(proxy: GObject.Object, path: TreePath, iter: TreeIter, new_order: list[int]) -> None: ...
def value_dup_expression(value: GObject.Value) -> Expression | None: ...
def value_get_expression(value: GObject.Value) -> Expression | None: ...
def value_set_expression(value: GObject.Value, expression: Expression) -> None: ...
def value_take_expression(value: GObject.Value, expression: Expression | None) -> None: ...

class ATContext(GObject.Object): 
    @classmethod
    def create(cls, accessible_role: AccessibleRole, accessible: Accessible, display: Gdk.Display) -> ATContext | None: ...
    def get_accessible(self) -> Accessible: ...
    def get_accessible_role(self) -> AccessibleRole: ...

class AboutDialog(Window, Accessible, Buildable, ConstraintTarget, Native, Root, ShortcutManager): 
    @classmethod
    def new(cls) -> Widget: ...
    def add_credit_section(self, section_name: str, people: list[str]) -> None: ...
    def get_artists(self) -> list[str]: ...
    def get_authors(self) -> list[str]: ...
    def get_comments(self) -> str | None: ...
    def get_copyright(self) -> str | None: ...
    def get_documenters(self) -> list[str]: ...
    def get_license(self) -> str | None: ...
    def get_license_type(self) -> License: ...
    def get_logo(self) -> Gdk.Paintable | None: ...
    def get_logo_icon_name(self) -> str | None: ...
    def get_program_name(self) -> str | None: ...
    def get_system_information(self) -> str | None: ...
    def get_translator_credits(self) -> str | None: ...
    def get_version(self) -> str | None: ...
    def get_website(self) -> str | None: ...
    def get_website_label(self) -> str | None: ...
    def get_wrap_license(self) -> bool: ...
    def set_artists(self, artists: list[str]) -> None: ...
    def set_authors(self, authors: list[str]) -> None: ...
    def set_comments(self, comments: str | None) -> None: ...
    def set_copyright(self, copyright: str | None) -> None: ...
    def set_documenters(self, documenters: list[str]) -> None: ...
    def set_license(self, license: str | None) -> None: ...
    def set_license_type(self, license_type: License) -> None: ...
    def set_logo(self, logo: Gdk.Paintable | None) -> None: ...
    def set_logo_icon_name(self, icon_name: str | None) -> None: ...
    def set_program_name(self, name: str | None) -> None: ...
    def set_system_information(self, system_information: str | None) -> None: ...
    def set_translator_credits(self, translator_credits: str | None) -> None: ...
    def set_version(self, version: str | None) -> None: ...
    def set_website(self, website: str | None) -> None: ...
    def set_website_label(self, website_label: str) -> None: ...
    def set_wrap_license(self, wrap_license: bool) -> None: ...

class ActionBar(Widget, Accessible, Buildable, ConstraintTarget): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_center_widget(self) -> Widget | None: ...
    def get_revealed(self) -> bool: ...
    def pack_end(self, child: Widget) -> None: ...
    def pack_start(self, child: Widget) -> None: ...
    def remove(self, child: Widget) -> None: ...
    def set_center_widget(self, center_widget: Widget | None) -> None: ...
    def set_revealed(self, revealed: bool) -> None: ...

class ActivateAction(ShortcutAction): 
    @classmethod
    def get(cls) -> ActivateAction: ...

class Adjustment(GObject.InitiallyUnowned): 
    @classmethod
    def new(cls, value: float, lower: float, upper: float, step_increment: float, page_increment: float, page_size: float) -> Adjustment: ...
    def clamp_page(self, lower: float, upper: float) -> None: ...
    def configure(self, value: float, lower: float, upper: float, step_increment: float, page_increment: float, page_size: float) -> None: ...
    def get_lower(self) -> float: ...
    def get_minimum_increment(self) -> float: ...
    def get_page_increment(self) -> float: ...
    def get_page_size(self) -> float: ...
    def get_step_increment(self) -> float: ...
    def get_upper(self) -> float: ...
    def get_value(self) -> float: ...
    def set_lower(self, lower: float) -> None: ...
    def set_page_increment(self, page_increment: float) -> None: ...
    def set_page_size(self, page_size: float) -> None: ...
    def set_step_increment(self, step_increment: float) -> None: ...
    def set_upper(self, upper: float) -> None: ...
    def set_value(self, value: float) -> None: ...

class AlternativeTrigger(ShortcutTrigger): 
    @classmethod
    def new(cls, first: ShortcutTrigger, second: ShortcutTrigger) -> ShortcutTrigger: ...
    def get_first(self) -> ShortcutTrigger: ...
    def get_second(self) -> ShortcutTrigger: ...

class AnyFilter(MultiFilter, Gio.ListModel, Buildable): 
    @classmethod
    def new(cls) -> AnyFilter: ...

class AppChooserButton(Widget, Accessible, AppChooser, Buildable, ConstraintTarget): 
    @classmethod
    def new(cls, content_type: str) -> Widget: ...
    def append_custom_item(self, name: str, label: str, icon: Gio.Icon) -> None: ...
    def append_separator(self) -> None: ...
    def get_heading(self) -> str | None: ...
    def get_modal(self) -> bool: ...
    def get_show_default_item(self) -> bool: ...
    def get_show_dialog_item(self) -> bool: ...
    def set_active_custom_item(self, name: str) -> None: ...
    def set_heading(self, heading: str) -> None: ...
    def set_modal(self, modal: bool) -> None: ...
    def set_show_default_item(self, setting: bool) -> None: ...
    def set_show_dialog_item(self, setting: bool) -> None: ...

class AppChooserDialog(Dialog, Accessible, AppChooser, Buildable, ConstraintTarget, Native, Root, ShortcutManager): 
    @classmethod
    def new(cls, parent: Window | None, flags: DialogFlags, file: Gio.File) -> Widget: ...
    def get_heading(self) -> str | None: ...
    def get_widget(self) -> Widget: ...
    def set_heading(self, heading: str) -> None: ...

class AppChooserWidget(Widget, Accessible, AppChooser, Buildable, ConstraintTarget): 
    @classmethod
    def new(cls, content_type: str) -> Widget: ...
    def get_default_text(self) -> str | None: ...
    def get_show_all(self) -> bool: ...
    def get_show_default(self) -> bool: ...
    def get_show_fallback(self) -> bool: ...
    def get_show_other(self) -> bool: ...
    def get_show_recommended(self) -> bool: ...
    def set_default_text(self, text: str) -> None: ...
    def set_show_all(self, setting: bool) -> None: ...
    def set_show_default(self, setting: bool) -> None: ...
    def set_show_fallback(self, setting: bool) -> None: ...
    def set_show_other(self, setting: bool) -> None: ...
    def set_show_recommended(self, setting: bool) -> None: ...

class Application(Gio.Application, Gio.ActionGroup, Gio.ActionMap): 
    @classmethod
    def new(cls, application_id: str | None, flags: Gio.ApplicationFlags) -> Application: ...
    def add_window(self, window: Window) -> None: ...
    def get_accels_for_action(self, detailed_action_name: str) -> list[str]: ...
    def get_actions_for_accel(self, accel: str) -> list[str]: ...
    def get_active_window(self) -> Window | None: ...
    def get_menu_by_id(self, id: str) -> Gio.Menu | None: ...
    def get_menubar(self) -> Gio.MenuModel | None: ...
    def get_window_by_id(self, id: int) -> Window | None: ...
    def get_windows(self) -> GLib.List: ...
    def inhibit(self, window: Window | None, flags: ApplicationInhibitFlags, reason: str | None) -> int: ...
    def list_action_descriptions(self) -> list[str]: ...
    def remove_window(self, window: Window) -> None: ...
    def set_accels_for_action(self, detailed_action_name: str, accels: list[str]) -> None: ...
    def set_menubar(self, menubar: Gio.MenuModel | None) -> None: ...
    def uninhibit(self, cookie: int) -> None: ...

class ApplicationWindow(Window, Gio.ActionGroup, Gio.ActionMap, Accessible, Buildable, ConstraintTarget, Native, Root, ShortcutManager): 
    @classmethod
    def new(cls, application: Application) -> Widget: ...
    def get_help_overlay(self) -> ShortcutsWindow | None: ...
    def get_id(self) -> int: ...
    def get_show_menubar(self) -> bool: ...
    def set_help_overlay(self, help_overlay: ShortcutsWindow | None) -> None: ...
    def set_show_menubar(self, show_menubar: bool) -> None: ...

class AspectFrame(Widget, Accessible, Buildable, ConstraintTarget): 
    @classmethod
    def new(cls, xalign: float, yalign: float, ratio: float, obey_child: bool) -> Widget: ...
    def get_child(self) -> Widget | None: ...
    def get_obey_child(self) -> bool: ...
    def get_ratio(self) -> float: ...
    def get_xalign(self) -> float: ...
    def get_yalign(self) -> float: ...
    def set_child(self, child: Widget | None) -> None: ...
    def set_obey_child(self, obey_child: bool) -> None: ...
    def set_ratio(self, ratio: float) -> None: ...
    def set_xalign(self, xalign: float) -> None: ...
    def set_yalign(self, yalign: float) -> None: ...

class Assistant(Window, Accessible, Buildable, ConstraintTarget, Native, Root, ShortcutManager): 
    @classmethod
    def new(cls) -> Widget: ...
    def add_action_widget(self, child: Widget) -> None: ...
    def append_page(self, page: Widget) -> int: ...
    def commit(self) -> None: ...
    def get_current_page(self) -> int: ...
    def get_n_pages(self) -> int: ...
    def get_nth_page(self, page_num: int) -> Widget | None: ...
    def get_page(self, child: Widget) -> AssistantPage: ...
    def get_page_complete(self, page: Widget) -> bool: ...
    def get_page_title(self, page: Widget) -> str: ...
    def get_page_type(self, page: Widget) -> AssistantPageType: ...
    def get_pages(self) -> Gio.ListModel: ...
    def insert_page(self, page: Widget, position: int) -> int: ...
    def next_page(self) -> None: ...
    def prepend_page(self, page: Widget) -> int: ...
    def previous_page(self) -> None: ...
    def remove_action_widget(self, child: Widget) -> None: ...
    def remove_page(self, page_num: int) -> None: ...
    def set_current_page(self, page_num: int) -> None: ...
    def set_forward_page_func(self, page_func: AssistantPageFunc | None, data: object | None, destroy: GLib.DestroyNotify) -> None: ...
    def set_page_complete(self, page: Widget, complete: bool) -> None: ...
    def set_page_title(self, page: Widget, title: str) -> None: ...
    def set_page_type(self, page: Widget, type: AssistantPageType) -> None: ...
    def update_buttons_state(self) -> None: ...

class AssistantPage(GObject.Object): 
    def get_child(self) -> Widget: ...

class BinLayout(LayoutManager): 
    @classmethod
    def new(cls) -> LayoutManager: ...

class BookmarkList(GObject.Object, Gio.ListModel): 
    @classmethod
    def new(cls, filename: filename | None, attributes: str | None) -> BookmarkList: ...
    def get_attributes(self) -> str | None: ...
    def get_filename(self) -> filename: ...
    def get_io_priority(self) -> int: ...
    def is_loading(self) -> bool: ...
    def set_attributes(self, attributes: str | None) -> None: ...
    def set_io_priority(self, io_priority: int) -> None: ...

class BoolFilter(Filter): 
    @classmethod
    def new(cls, expression: Expression | None) -> BoolFilter: ...
    def get_expression(self) -> Expression | None: ...
    def get_invert(self) -> bool: ...
    def set_expression(self, expression: Expression | None) -> None: ...
    def set_invert(self, invert: bool) -> None: ...

class Box(Widget, Accessible, Buildable, ConstraintTarget, Orientable): 
    @classmethod
    def new(cls, orientation: Orientation, spacing: int) -> Widget: ...
    def append(self, child: Widget) -> None: ...
    def get_baseline_position(self) -> BaselinePosition: ...
    def get_homogeneous(self) -> bool: ...
    def get_spacing(self) -> int: ...
    def insert_child_after(self, child: Widget, sibling: Widget | None) -> None: ...
    def prepend(self, child: Widget) -> None: ...
    def remove(self, child: Widget) -> None: ...
    def reorder_child_after(self, child: Widget, sibling: Widget | None) -> None: ...
    def set_baseline_position(self, position: BaselinePosition) -> None: ...
    def set_homogeneous(self, homogeneous: bool) -> None: ...
    def set_spacing(self, spacing: int) -> None: ...

class BoxLayout(LayoutManager, Orientable): 
    @classmethod
    def new(cls, orientation: Orientation) -> LayoutManager: ...
    def get_baseline_position(self) -> BaselinePosition: ...
    def get_homogeneous(self) -> bool: ...
    def get_spacing(self) -> int: ...
    def set_baseline_position(self, position: BaselinePosition) -> None: ...
    def set_homogeneous(self, homogeneous: bool) -> None: ...
    def set_spacing(self, spacing: int) -> None: ...

class Builder(GObject.Object): 
    @classmethod
    def new(cls) -> Builder: ...
    def add_from_file(self, filename: filename) -> bool: ...
    def add_from_resource(self, resource_path: str) -> bool: ...
    def add_from_string(self, buffer: str, length: gssize) -> bool: ...
    def add_objects_from_file(self, filename: filename, object_ids: list[str]) -> bool: ...
    def add_objects_from_resource(self, resource_path: str, object_ids: list[str]) -> bool: ...
    def add_objects_from_string(self, buffer: str, length: gssize, object_ids: list[str]) -> bool: ...
    def create_closure(self, function_name: str, flags: BuilderClosureFlags, object: GObject.Object | None) -> GObject.Closure | None: ...
    def expose_object(self, name: str, object: GObject.Object) -> None: ...
    def extend_with_template(self, object: GObject.Object, template_type: GObject.Type, buffer: str, length: gssize) -> bool: ...
    def get_current_object(self) -> GObject.Object | None: ...
    def get_object(self, name: str) -> GObject.Object | None: ...
    def get_objects(self) -> GLib.SList: ...
    def get_scope(self) -> BuilderScope: ...
    def get_translation_domain(self) -> str | None: ...
    def get_type_from_name(self, type_name: str) -> GObject.Type: ...
    def set_current_object(self, current_object: GObject.Object | None) -> None: ...
    def set_scope(self, scope: BuilderScope | None) -> None: ...
    def set_translation_domain(self, domain: str | None) -> None: ...
    def value_from_string(self, pspec: GObject.ParamSpec, string: str, value: GObject.Value) -> bool: ...
    def value_from_string_type(self, type: GObject.Type, string: str, value: GObject.Value) -> bool: ...

class BuilderCScope(GObject.Object, BuilderScope): 
    @classmethod
    def new(cls) -> BuilderCScope: ...
    def add_callback_symbol(self, callback_name: str, callback_symbol: GObject.Callback) -> None: ...
    def add_callback_symbols(self, first_callback_name: str, first_callback_symbol: GObject.Callback) -> None: ...
    def lookup_callback_symbol(self, callback_name: str) -> GObject.Callback | None: ...

class BuilderListItemFactory(ListItemFactory): 
    @classmethod
    def new_from_bytes(cls, scope: BuilderScope | None, bytes: GLib.Bytes) -> ListItemFactory: ...
    def get_bytes(self) -> GLib.Bytes: ...
    def get_resource(self) -> str | None: ...
    def get_scope(self) -> BuilderScope | None: ...

class Button(Widget, Accessible, Actionable, Buildable, ConstraintTarget): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_child(self) -> Widget | None: ...
    def get_has_frame(self) -> bool: ...
    def get_icon_name(self) -> str | None: ...
    def get_label(self) -> str | None: ...
    def get_use_underline(self) -> bool: ...
    def set_child(self, child: Widget | None) -> None: ...
    def set_has_frame(self, has_frame: bool) -> None: ...
    def set_icon_name(self, icon_name: str) -> None: ...
    def set_label(self, label: str) -> None: ...
    def set_use_underline(self, use_underline: bool) -> None: ...

class CClosureExpression(Expression): 
    @classmethod
    def new(cls, value_type: GObject.Type, marshal: GObject.ClosureMarshal | None, n_params: int, params: list[Expression], callback_func: GObject.Callback, user_data: object | None, user_destroy: GObject.ClosureNotify | None) -> CClosureExpression: ...

class Calendar(Widget, Accessible, Buildable, ConstraintTarget): 
    @classmethod
    def new(cls) -> Widget: ...
    def clear_marks(self) -> None: ...
    def get_date(self) -> GLib.DateTime: ...
    def get_day_is_marked(self, day: int) -> bool: ...
    def get_show_day_names(self) -> bool: ...
    def get_show_heading(self) -> bool: ...
    def get_show_week_numbers(self) -> bool: ...
    def mark_day(self, day: int) -> None: ...
    def select_day(self, date: GLib.DateTime) -> None: ...
    def set_show_day_names(self, value: bool) -> None: ...
    def set_show_heading(self, value: bool) -> None: ...
    def set_show_week_numbers(self, value: bool) -> None: ...
    def unmark_day(self, day: int) -> None: ...

class CallbackAction(ShortcutAction): 
    @classmethod
    def new(cls, callback: ShortcutFunc | None, data: object | None, destroy: GLib.DestroyNotify) -> CallbackAction: ...

class CellArea(GObject.InitiallyUnowned, Buildable, CellLayout): 
    def activate(self, context: CellAreaContext, widget: Widget, cell_area: Gdk.Rectangle, flags: CellRendererState, edit_only: bool) -> bool: ...
    def activate_cell(self, widget: Widget, renderer: CellRenderer, event: Gdk.Event, cell_area: Gdk.Rectangle, flags: CellRendererState) -> bool: ...
    def add(self, renderer: CellRenderer) -> None: ...
    def add_focus_sibling(self, renderer: CellRenderer, sibling: CellRenderer) -> None: ...
    def add_with_properties(self, renderer: CellRenderer, first_prop_name: str) -> None: ...
    def apply_attributes(self, tree_model: TreeModel, iter: TreeIter, is_expander: bool, is_expanded: bool) -> None: ...
    def attribute_connect(self, renderer: CellRenderer, attribute: str, column: int) -> None: ...
    def attribute_disconnect(self, renderer: CellRenderer, attribute: str) -> None: ...
    def attribute_get_column(self, renderer: CellRenderer, attribute: str) -> int: ...
    def cell_get(self, renderer: CellRenderer, first_prop_name: str) -> None: ...
    def cell_get_property(self, renderer: CellRenderer, property_name: str, value: GObject.Value) -> None: ...
    def cell_get_valist(self, renderer: CellRenderer, first_property_name: str, var_args: va_list) -> None: ...
    def cell_set(self, renderer: CellRenderer, first_prop_name: str) -> None: ...
    def cell_set_property(self, renderer: CellRenderer, property_name: str, value: GObject.Value) -> None: ...
    def cell_set_valist(self, renderer: CellRenderer, first_property_name: str, var_args: va_list) -> None: ...
    def copy_context(self, context: CellAreaContext) -> CellAreaContext: ...
    def create_context(self) -> CellAreaContext: ...
    def event(self, context: CellAreaContext, widget: Widget, event: Gdk.Event, cell_area: Gdk.Rectangle, flags: CellRendererState) -> int: ...
    def focus(self, direction: DirectionType) -> bool: ...
    def foreach(self, callback: CellCallback, callback_data: object | None) -> None: ...
    def foreach_alloc(self, context: CellAreaContext, widget: Widget, cell_area: Gdk.Rectangle, background_area: Gdk.Rectangle, callback: CellAllocCallback, callback_data: object | None) -> None: ...
    def get_cell_allocation(self, context: CellAreaContext, widget: Widget, renderer: CellRenderer, cell_area: Gdk.Rectangle, allocation: Gdk.Rectangle) -> None: ...
    def get_cell_at_position(self, context: CellAreaContext, widget: Widget, cell_area: Gdk.Rectangle, x: int, y: int, alloc_area: Gdk.Rectangle) -> CellRenderer: ...
    def get_current_path_string(self) -> str: ...
    def get_edit_widget(self) -> CellEditable | None: ...
    def get_edited_cell(self) -> CellRenderer | None: ...
    def get_focus_cell(self) -> CellRenderer | None: ...
    def get_focus_from_sibling(self, renderer: CellRenderer) -> CellRenderer | None: ...
    def get_focus_siblings(self, renderer: CellRenderer) -> GLib.List: ...
    def get_preferred_height(self, context: CellAreaContext, widget: Widget, minimum_height: int, natural_height: int) -> None: ...
    def get_preferred_height_for_width(self, context: CellAreaContext, widget: Widget, width: int, minimum_height: int, natural_height: int) -> None: ...
    def get_preferred_width(self, context: CellAreaContext, widget: Widget, minimum_width: int, natural_width: int) -> None: ...
    def get_preferred_width_for_height(self, context: CellAreaContext, widget: Widget, height: int, minimum_width: int, natural_width: int) -> None: ...
    def get_request_mode(self) -> SizeRequestMode: ...
    def has_renderer(self, renderer: CellRenderer) -> bool: ...
    def inner_cell_area(self, widget: Widget, cell_area: Gdk.Rectangle, inner_area: Gdk.Rectangle) -> None: ...
    def is_activatable(self) -> bool: ...
    def is_focus_sibling(self, renderer: CellRenderer, sibling: CellRenderer) -> bool: ...
    def remove(self, renderer: CellRenderer) -> None: ...
    def remove_focus_sibling(self, renderer: CellRenderer, sibling: CellRenderer) -> None: ...
    def request_renderer(self, renderer: CellRenderer, orientation: Orientation, widget: Widget, for_size: int, minimum_size: int, natural_size: int) -> None: ...
    def set_focus_cell(self, renderer: CellRenderer | None) -> None: ...
    def snapshot(self, context: CellAreaContext, widget: Widget, snapshot: Snapshot, background_area: Gdk.Rectangle, cell_area: Gdk.Rectangle, flags: CellRendererState, paint_focus: bool) -> None: ...
    def stop_editing(self, canceled: bool) -> None: ...

class CellAreaBox(CellArea, Buildable, CellLayout, Orientable): 
    @classmethod
    def new(cls) -> CellArea: ...
    def get_spacing(self) -> int: ...
    def pack_end(self, renderer: CellRenderer, expand: bool, align: bool, fixed: bool) -> None: ...
    def pack_start(self, renderer: CellRenderer, expand: bool, align: bool, fixed: bool) -> None: ...
    def set_spacing(self, spacing: int) -> None: ...

class CellAreaContext(GObject.Object): 
    def allocate(self, width: int, height: int) -> None: ...
    def get_allocation(self, width: int, height: int) -> None: ...
    def get_area(self) -> CellArea: ...
    def get_preferred_height(self, minimum_height: int, natural_height: int) -> None: ...
    def get_preferred_height_for_width(self, width: int, minimum_height: int, natural_height: int) -> None: ...
    def get_preferred_width(self, minimum_width: int, natural_width: int) -> None: ...
    def get_preferred_width_for_height(self, height: int, minimum_width: int, natural_width: int) -> None: ...
    def push_preferred_height(self, minimum_height: int, natural_height: int) -> None: ...
    def push_preferred_width(self, minimum_width: int, natural_width: int) -> None: ...
    def reset(self) -> None: ...

class CellRenderer(GObject.InitiallyUnowned): 
    def activate(self, event: Gdk.Event, widget: Widget, path: str, background_area: Gdk.Rectangle, cell_area: Gdk.Rectangle, flags: CellRendererState) -> bool: ...
    def get_aligned_area(self, widget: Widget, flags: CellRendererState, cell_area: Gdk.Rectangle, aligned_area: Gdk.Rectangle) -> None: ...
    def get_alignment(self, xalign: float, yalign: float) -> None: ...
    def get_fixed_size(self, width: int, height: int) -> None: ...
    def get_is_expanded(self) -> bool: ...
    def get_is_expander(self) -> bool: ...
    def get_padding(self, xpad: int, ypad: int) -> None: ...
    def get_preferred_height(self, widget: Widget, minimum_size: int, natural_size: int) -> None: ...
    def get_preferred_height_for_width(self, widget: Widget, width: int, minimum_height: int, natural_height: int) -> None: ...
    def get_preferred_size(self, widget: Widget, minimum_size: Requisition, natural_size: Requisition) -> None: ...
    def get_preferred_width(self, widget: Widget, minimum_size: int, natural_size: int) -> None: ...
    def get_preferred_width_for_height(self, widget: Widget, height: int, minimum_width: int, natural_width: int) -> None: ...
    def get_request_mode(self) -> SizeRequestMode: ...
    def get_sensitive(self) -> bool: ...
    def get_state(self, widget: Widget | None, cell_state: CellRendererState) -> StateFlags: ...
    def get_visible(self) -> bool: ...
    def is_activatable(self) -> bool: ...
    def set_alignment(self, xalign: float, yalign: float) -> None: ...
    def set_fixed_size(self, width: int, height: int) -> None: ...
    def set_is_expanded(self, is_expanded: bool) -> None: ...
    def set_is_expander(self, is_expander: bool) -> None: ...
    def set_padding(self, xpad: int, ypad: int) -> None: ...
    def set_sensitive(self, sensitive: bool) -> None: ...
    def set_visible(self, visible: bool) -> None: ...
    def snapshot(self, snapshot: Snapshot, widget: Widget, background_area: Gdk.Rectangle, cell_area: Gdk.Rectangle, flags: CellRendererState) -> None: ...
    def start_editing(self, event: Gdk.Event | None, widget: Widget, path: str, background_area: Gdk.Rectangle, cell_area: Gdk.Rectangle, flags: CellRendererState) -> CellEditable | None: ...
    def stop_editing(self, canceled: bool) -> None: ...

class CellRendererAccel(CellRendererText): 
    @classmethod
    def new(cls) -> CellRenderer: ...

class CellRendererCombo(CellRendererText): 
    @classmethod
    def new(cls) -> CellRenderer: ...

class CellRendererPixbuf(CellRenderer): 
    @classmethod
    def new(cls) -> CellRenderer: ...

class CellRendererProgress(CellRenderer, Orientable): 
    @classmethod
    def new(cls) -> CellRenderer: ...

class CellRendererSpin(CellRendererText): 
    @classmethod
    def new(cls) -> CellRenderer: ...

class CellRendererSpinner(CellRenderer): 
    @classmethod
    def new(cls) -> CellRenderer: ...

class CellRendererText(CellRenderer): 
    @classmethod
    def new(cls) -> CellRenderer: ...
    def set_fixed_height_from_font(self, number_of_rows: int) -> None: ...

class CellRendererToggle(CellRenderer): 
    @classmethod
    def new(cls) -> CellRenderer: ...
    def get_activatable(self) -> bool: ...
    def get_active(self) -> bool: ...
    def get_radio(self) -> bool: ...
    def set_activatable(self, setting: bool) -> None: ...
    def set_active(self, setting: bool) -> None: ...
    def set_radio(self, radio: bool) -> None: ...

class CellView(Widget, Accessible, Buildable, CellLayout, ConstraintTarget, Orientable): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_displayed_row(self) -> TreePath | None: ...
    def get_draw_sensitive(self) -> bool: ...
    def get_fit_model(self) -> bool: ...
    def get_model(self) -> TreeModel | None: ...
    def set_displayed_row(self, path: TreePath | None) -> None: ...
    def set_draw_sensitive(self, draw_sensitive: bool) -> None: ...
    def set_fit_model(self, fit_model: bool) -> None: ...
    def set_model(self, model: TreeModel | None) -> None: ...

class CenterBox(Widget, Accessible, Buildable, ConstraintTarget, Orientable): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_baseline_position(self) -> BaselinePosition: ...
    def get_center_widget(self) -> Widget | None: ...
    def get_end_widget(self) -> Widget | None: ...
    def get_start_widget(self) -> Widget | None: ...
    def set_baseline_position(self, position: BaselinePosition) -> None: ...
    def set_center_widget(self, child: Widget | None) -> None: ...
    def set_end_widget(self, child: Widget | None) -> None: ...
    def set_start_widget(self, child: Widget | None) -> None: ...

class CenterLayout(LayoutManager): 
    @classmethod
    def new(cls) -> LayoutManager: ...
    def get_baseline_position(self) -> BaselinePosition: ...
    def get_center_widget(self) -> Widget | None: ...
    def get_end_widget(self) -> Widget | None: ...
    def get_orientation(self) -> Orientation: ...
    def get_start_widget(self) -> Widget | None: ...
    def set_baseline_position(self, baseline_position: BaselinePosition) -> None: ...
    def set_center_widget(self, widget: Widget | None) -> None: ...
    def set_end_widget(self, widget: Widget | None) -> None: ...
    def set_orientation(self, orientation: Orientation) -> None: ...
    def set_start_widget(self, widget: Widget | None) -> None: ...

class CheckButton(Widget, Accessible, Actionable, Buildable, ConstraintTarget): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_active(self) -> bool: ...
    def get_child(self) -> Widget | None: ...
    def get_inconsistent(self) -> bool: ...
    def get_label(self) -> str | None: ...
    def get_use_underline(self) -> bool: ...
    def set_active(self, setting: bool) -> None: ...
    def set_child(self, child: Widget | None) -> None: ...
    def set_group(self, group: CheckButton | None) -> None: ...
    def set_inconsistent(self, inconsistent: bool) -> None: ...
    def set_label(self, label: str | None) -> None: ...
    def set_use_underline(self, setting: bool) -> None: ...

class ClosureExpression(Expression): 
    @classmethod
    def new(cls, value_type: GObject.Type, closure: GObject.Closure, n_params: int, params: list[Expression] | None) -> ClosureExpression: ...

class ColorButton(Widget, Accessible, Buildable, ColorChooser, ConstraintTarget): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_modal(self) -> bool: ...
    def get_title(self) -> str: ...
    def set_modal(self, modal: bool) -> None: ...
    def set_title(self, title: str) -> None: ...

class ColorChooserDialog(Dialog, Accessible, Buildable, ColorChooser, ConstraintTarget, Native, Root, ShortcutManager): 
    @classmethod
    def new(cls, title: str | None, parent: Window | None) -> Widget: ...

class ColorChooserWidget(Widget, Accessible, Buildable, ColorChooser, ConstraintTarget): 
    @classmethod
    def new(cls) -> Widget: ...

class ColumnView(Widget, Accessible, Buildable, ConstraintTarget, Scrollable): 
    @classmethod
    def new(cls, model: SelectionModel | None) -> Widget: ...
    def append_column(self, column: ColumnViewColumn) -> None: ...
    def get_columns(self) -> Gio.ListModel: ...
    def get_enable_rubberband(self) -> bool: ...
    def get_model(self) -> SelectionModel | None: ...
    def get_reorderable(self) -> bool: ...
    def get_show_column_separators(self) -> bool: ...
    def get_show_row_separators(self) -> bool: ...
    def get_single_click_activate(self) -> bool: ...
    def get_sorter(self) -> Sorter | None: ...
    def insert_column(self, position: int, column: ColumnViewColumn) -> None: ...
    def remove_column(self, column: ColumnViewColumn) -> None: ...
    def set_enable_rubberband(self, enable_rubberband: bool) -> None: ...
    def set_model(self, model: SelectionModel | None) -> None: ...
    def set_reorderable(self, reorderable: bool) -> None: ...
    def set_show_column_separators(self, show_column_separators: bool) -> None: ...
    def set_show_row_separators(self, show_row_separators: bool) -> None: ...
    def set_single_click_activate(self, single_click_activate: bool) -> None: ...
    def sort_by_column(self, column: ColumnViewColumn | None, direction: SortType) -> None: ...

class ColumnViewColumn(GObject.Object): 
    @classmethod
    def new(cls, title: str | None, factory: ListItemFactory | None) -> ColumnViewColumn: ...
    def get_column_view(self) -> ColumnView | None: ...
    def get_expand(self) -> bool: ...
    def get_factory(self) -> ListItemFactory | None: ...
    def get_fixed_width(self) -> int: ...
    def get_header_menu(self) -> Gio.MenuModel | None: ...
    def get_resizable(self) -> bool: ...
    def get_sorter(self) -> Sorter | None: ...
    def get_title(self) -> str | None: ...
    def get_visible(self) -> bool: ...
    def set_expand(self, expand: bool) -> None: ...
    def set_factory(self, factory: ListItemFactory | None) -> None: ...
    def set_fixed_width(self, fixed_width: int) -> None: ...
    def set_header_menu(self, menu: Gio.MenuModel | None) -> None: ...
    def set_resizable(self, resizable: bool) -> None: ...
    def set_sorter(self, sorter: Sorter | None) -> None: ...
    def set_title(self, title: str | None) -> None: ...
    def set_visible(self, visible: bool) -> None: ...

class ComboBox(Widget, Accessible, Buildable, CellEditable, CellLayout, ConstraintTarget): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_active(self) -> int: ...
    def get_active_id(self) -> str | None: ...
    def get_active_iter(self, iter: TreeIter) -> bool: ...
    def get_button_sensitivity(self) -> SensitivityType: ...
    def get_child(self) -> Widget | None: ...
    def get_entry_text_column(self) -> int: ...
    def get_has_entry(self) -> bool: ...
    def get_id_column(self) -> int: ...
    def get_model(self) -> TreeModel | None: ...
    def get_popup_fixed_width(self) -> bool: ...
    def get_row_separator_func(self) -> TreeViewRowSeparatorFunc | None: ...
    def popdown(self) -> None: ...
    def popup(self) -> None: ...
    def popup_for_device(self, device: Gdk.Device) -> None: ...
    def set_active(self, index_: int) -> None: ...
    def set_active_id(self, active_id: str | None) -> bool: ...
    def set_active_iter(self, iter: TreeIter | None) -> None: ...
    def set_button_sensitivity(self, sensitivity: SensitivityType) -> None: ...
    def set_child(self, child: Widget | None) -> None: ...
    def set_entry_text_column(self, text_column: int) -> None: ...
    def set_id_column(self, id_column: int) -> None: ...
    def set_model(self, model: TreeModel | None) -> None: ...
    def set_popup_fixed_width(self, fixed: bool) -> None: ...
    def set_row_separator_func(self, func: TreeViewRowSeparatorFunc | None, data: object | None, destroy: GLib.DestroyNotify | None) -> None: ...

class ComboBoxText(ComboBox, Accessible, Buildable, CellEditable, CellLayout, ConstraintTarget): 
    @classmethod
    def new(cls) -> Widget: ...
    def append(self, id: str | None, text: str) -> None: ...
    def append_text(self, text: str) -> None: ...
    def get_active_text(self) -> str | None: ...
    def insert(self, position: int, id: str | None, text: str) -> None: ...
    def insert_text(self, position: int, text: str) -> None: ...
    def prepend(self, id: str | None, text: str) -> None: ...
    def prepend_text(self, text: str) -> None: ...
    def remove(self, position: int) -> None: ...
    def remove_all(self) -> None: ...

class ConstantExpression(Expression): 
    @classmethod
    def new(cls, value_type: GObject.Type) -> ConstantExpression: ...
    def get_value(self) -> GObject.Value: ...

class Constraint(GObject.Object): 
    @classmethod
    def new(cls, target: ConstraintTarget | None, target_attribute: ConstraintAttribute, relation: ConstraintRelation, source: ConstraintTarget | None, source_attribute: ConstraintAttribute, multiplier: float, constant: float, strength: int) -> Constraint: ...
    def get_constant(self) -> float: ...
    def get_multiplier(self) -> float: ...
    def get_relation(self) -> ConstraintRelation: ...
    def get_source(self) -> ConstraintTarget | None: ...
    def get_source_attribute(self) -> ConstraintAttribute: ...
    def get_strength(self) -> int: ...
    def get_target(self) -> ConstraintTarget | None: ...
    def get_target_attribute(self) -> ConstraintAttribute: ...
    def is_attached(self) -> bool: ...
    def is_constant(self) -> bool: ...
    def is_required(self) -> bool: ...

class ConstraintGuide(GObject.Object, ConstraintTarget): 
    @classmethod
    def new(cls) -> ConstraintGuide: ...
    def get_max_size(self, width: int, height: int) -> None: ...
    def get_min_size(self, width: int, height: int) -> None: ...
    def get_name(self) -> str | None: ...
    def get_nat_size(self, width: int, height: int) -> None: ...
    def get_strength(self) -> ConstraintStrength: ...
    def set_max_size(self, width: int, height: int) -> None: ...
    def set_min_size(self, width: int, height: int) -> None: ...
    def set_name(self, name: str | None) -> None: ...
    def set_nat_size(self, width: int, height: int) -> None: ...
    def set_strength(self, strength: ConstraintStrength) -> None: ...

class ConstraintLayout(LayoutManager, Buildable): 
    @classmethod
    def new(cls) -> LayoutManager: ...
    def add_constraint(self, constraint: Constraint) -> None: ...
    def add_constraints_from_description(self, lines: list[str], n_lines: gsize, hspacing: int, vspacing: int, error: GLib.Error, first_view: str) -> GLib.List: ...
    def add_constraints_from_descriptionv(self, lines: list[str], n_lines: gsize, hspacing: int, vspacing: int, views: GLib.HashTable) -> GLib.List: ...
    def add_guide(self, guide: ConstraintGuide) -> None: ...
    def observe_constraints(self) -> Gio.ListModel: ...
    def observe_guides(self) -> Gio.ListModel: ...
    def remove_all_constraints(self) -> None: ...
    def remove_constraint(self, constraint: Constraint) -> None: ...
    def remove_guide(self, guide: ConstraintGuide) -> None: ...

class ConstraintLayoutChild(LayoutChild): ...

class CssProvider(GObject.Object, StyleProvider): 
    @classmethod
    def new(cls) -> CssProvider: ...
    def load_from_data(self, data: list[int], length: gssize) -> None: ...
    def load_from_file(self, file: Gio.File) -> None: ...
    def load_from_path(self, path: filename) -> None: ...
    def load_from_resource(self, resource_path: str) -> None: ...
    def load_named(self, name: str, variant: str | None) -> None: ...
    def to_string(self) -> str: ...

class CustomFilter(Filter): 
    @classmethod
    def new(cls, match_func: CustomFilterFunc | None, user_data: object | None, user_destroy: GLib.DestroyNotify) -> CustomFilter: ...
    def set_filter_func(self, match_func: CustomFilterFunc | None, user_data: object | None, user_destroy: GLib.DestroyNotify) -> None: ...

class CustomLayout(LayoutManager): 
    @classmethod
    def new(cls, request_mode: CustomRequestModeFunc | None, measure: CustomMeasureFunc, allocate: CustomAllocateFunc) -> LayoutManager: ...

class CustomSorter(Sorter): 
    @classmethod
    def new(cls, sort_func: GLib.CompareDataFunc | None, user_data: object | None, user_destroy: GLib.DestroyNotify | None) -> CustomSorter: ...
    def set_sort_func(self, sort_func: GLib.CompareDataFunc | None, user_data: object | None, user_destroy: GLib.DestroyNotify) -> None: ...

class Dialog(Window, Accessible, Buildable, ConstraintTarget, Native, Root, ShortcutManager): 
    @classmethod
    def new(cls) -> Widget: ...
    def add_action_widget(self, child: Widget, response_id: int) -> None: ...
    def add_button(self, button_text: str, response_id: int) -> Widget: ...
    def add_buttons(self, first_button_text: str) -> None: ...
    def get_content_area(self) -> Box: ...
    def get_header_bar(self) -> HeaderBar: ...
    def get_response_for_widget(self, widget: Widget) -> int: ...
    def get_widget_for_response(self, response_id: int) -> Widget | None: ...
    def response(self, response_id: int) -> None: ...
    def set_default_response(self, response_id: int) -> None: ...
    def set_response_sensitive(self, response_id: int, setting: bool) -> None: ...

class DirectoryList(GObject.Object, Gio.ListModel): 
    @classmethod
    def new(cls, attributes: str | None, file: Gio.File | None) -> DirectoryList: ...
    def get_attributes(self) -> str | None: ...
    def get_error(self) -> GLib.Error | None: ...
    def get_file(self) -> Gio.File | None: ...
    def get_io_priority(self) -> int: ...
    def get_monitored(self) -> bool: ...
    def is_loading(self) -> bool: ...
    def set_attributes(self, attributes: str | None) -> None: ...
    def set_file(self, file: Gio.File | None) -> None: ...
    def set_io_priority(self, io_priority: int) -> None: ...
    def set_monitored(self, monitored: bool) -> None: ...

class DragIcon(Widget, Accessible, Buildable, ConstraintTarget, Native, Root): 
    @classmethod
    def create_widget_for_value(cls, value: GObject.Value) -> Widget | None: ...
    @classmethod
    def get_for_drag(cls, drag: Gdk.Drag) -> Widget: ...
    @classmethod
    def set_from_paintable(cls, drag: Gdk.Drag, paintable: Gdk.Paintable, hot_x: int, hot_y: int) -> None: ...
    def get_child(self) -> Widget | None: ...
    def set_child(self, child: Widget | None) -> None: ...

class DragSource(GestureSingle): 
    @classmethod
    def new(cls) -> DragSource: ...
    def drag_cancel(self) -> None: ...
    def get_actions(self) -> Gdk.DragAction: ...
    def get_content(self) -> Gdk.ContentProvider | None: ...
    def get_drag(self) -> Gdk.Drag | None: ...
    def set_actions(self, actions: Gdk.DragAction) -> None: ...
    def set_content(self, content: Gdk.ContentProvider | None) -> None: ...
    def set_icon(self, paintable: Gdk.Paintable | None, hot_x: int, hot_y: int) -> None: ...

class DrawingArea(Widget, Accessible, Buildable, ConstraintTarget): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_content_height(self) -> int: ...
    def get_content_width(self) -> int: ...
    def set_content_height(self, height: int) -> None: ...
    def set_content_width(self, width: int) -> None: ...
    def set_draw_func(self, draw_func: DrawingAreaDrawFunc | None, user_data: object | None, destroy: GLib.DestroyNotify) -> None: ...

class DropControllerMotion(EventController): 
    @classmethod
    def new(cls) -> EventController: ...
    def contains_pointer(self) -> bool: ...
    def get_drop(self) -> Gdk.Drop | None: ...
    def is_pointer(self) -> bool: ...

class DropDown(Widget, Accessible, Buildable, ConstraintTarget): 
    @classmethod
    def new(cls, model: Gio.ListModel | None, expression: Expression | None) -> Widget: ...
    def get_enable_search(self) -> bool: ...
    def get_expression(self) -> Expression | None: ...
    def get_factory(self) -> ListItemFactory | None: ...
    def get_list_factory(self) -> ListItemFactory | None: ...
    def get_model(self) -> Gio.ListModel | None: ...
    def get_selected(self) -> int: ...
    def get_selected_item(self) -> GObject.Object | None: ...
    def get_show_arrow(self) -> bool: ...
    def set_enable_search(self, enable_search: bool) -> None: ...
    def set_expression(self, expression: Expression | None) -> None: ...
    def set_factory(self, factory: ListItemFactory | None) -> None: ...
    def set_list_factory(self, factory: ListItemFactory | None) -> None: ...
    def set_model(self, model: Gio.ListModel | None) -> None: ...
    def set_selected(self, position: int) -> None: ...
    def set_show_arrow(self, show_arrow: bool) -> None: ...

class DropTarget(EventController): 
    @classmethod
    def new(cls, type: GObject.Type, actions: Gdk.DragAction) -> DropTarget: ...
    def get_actions(self) -> Gdk.DragAction: ...
    def get_current_drop(self) -> Gdk.Drop | None: ...
    def get_drop(self) -> Gdk.Drop | None: ...
    def get_formats(self) -> Gdk.ContentFormats | None: ...
    def get_gtypes(self, n_types: gsize) -> list[GObject.Type] | None: ...
    def get_preload(self) -> bool: ...
    def get_value(self) -> GObject.Value | None: ...
    def reject(self) -> None: ...
    def set_actions(self, actions: Gdk.DragAction) -> None: ...
    def set_gtypes(self, types: list[GObject.Type] | None, n_types: gsize) -> None: ...
    def set_preload(self, preload: bool) -> None: ...

class DropTargetAsync(EventController): 
    @classmethod
    def new(cls, formats: Gdk.ContentFormats | None, actions: Gdk.DragAction) -> DropTargetAsync: ...
    def get_actions(self) -> Gdk.DragAction: ...
    def get_formats(self) -> Gdk.ContentFormats | None: ...
    def reject_drop(self, drop: Gdk.Drop) -> None: ...
    def set_actions(self, actions: Gdk.DragAction) -> None: ...
    def set_formats(self, formats: Gdk.ContentFormats | None) -> None: ...

class EditableLabel(Widget, Accessible, Buildable, ConstraintTarget, Editable): 
    @classmethod
    def new(cls, str: str) -> Widget: ...
    def get_editing(self) -> bool: ...
    def start_editing(self) -> None: ...
    def stop_editing(self, commit: bool) -> None: ...

class EmojiChooser(Popover, Accessible, Buildable, ConstraintTarget, Native, ShortcutManager): 
    @classmethod
    def new(cls) -> Widget: ...

class Entry(Widget, Accessible, Buildable, CellEditable, ConstraintTarget, Editable): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_activates_default(self) -> bool: ...
    def get_alignment(self) -> float: ...
    def get_attributes(self) -> Pango.AttrList | None: ...
    def get_buffer(self) -> EntryBuffer: ...
    def get_completion(self) -> EntryCompletion | None: ...
    def get_current_icon_drag_source(self) -> int: ...
    def get_extra_menu(self) -> Gio.MenuModel | None: ...
    def get_has_frame(self) -> bool: ...
    def get_icon_activatable(self, icon_pos: EntryIconPosition) -> bool: ...
    def get_icon_area(self, icon_pos: EntryIconPosition, icon_area: Gdk.Rectangle) -> None: ...
    def get_icon_at_pos(self, x: int, y: int) -> int: ...
    def get_icon_gicon(self, icon_pos: EntryIconPosition) -> Gio.Icon | None: ...
    def get_icon_name(self, icon_pos: EntryIconPosition) -> str | None: ...
    def get_icon_paintable(self, icon_pos: EntryIconPosition) -> Gdk.Paintable | None: ...
    def get_icon_sensitive(self, icon_pos: EntryIconPosition) -> bool: ...
    def get_icon_storage_type(self, icon_pos: EntryIconPosition) -> ImageType: ...
    def get_icon_tooltip_markup(self, icon_pos: EntryIconPosition) -> str | None: ...
    def get_icon_tooltip_text(self, icon_pos: EntryIconPosition) -> str | None: ...
    def get_input_hints(self) -> InputHints: ...
    def get_input_purpose(self) -> InputPurpose: ...
    def get_invisible_char(self) -> gunichar: ...
    def get_max_length(self) -> int: ...
    def get_overwrite_mode(self) -> bool: ...
    def get_placeholder_text(self) -> str | None: ...
    def get_progress_fraction(self) -> float: ...
    def get_progress_pulse_step(self) -> float: ...
    def get_tabs(self) -> Pango.TabArray | None: ...
    def get_text_length(self) -> int: ...
    def get_visibility(self) -> bool: ...
    def grab_focus_without_selecting(self) -> bool: ...
    def progress_pulse(self) -> None: ...
    def reset_im_context(self) -> None: ...
    def set_activates_default(self, setting: bool) -> None: ...
    def set_alignment(self, xalign: float) -> None: ...
    def set_attributes(self, attrs: Pango.AttrList) -> None: ...
    def set_buffer(self, buffer: EntryBuffer) -> None: ...
    def set_completion(self, completion: EntryCompletion | None) -> None: ...
    def set_extra_menu(self, model: Gio.MenuModel | None) -> None: ...
    def set_has_frame(self, setting: bool) -> None: ...
    def set_icon_activatable(self, icon_pos: EntryIconPosition, activatable: bool) -> None: ...
    def set_icon_drag_source(self, icon_pos: EntryIconPosition, provider: Gdk.ContentProvider, actions: Gdk.DragAction) -> None: ...
    def set_icon_from_gicon(self, icon_pos: EntryIconPosition, icon: Gio.Icon | None) -> None: ...
    def set_icon_from_icon_name(self, icon_pos: EntryIconPosition, icon_name: str | None) -> None: ...
    def set_icon_from_paintable(self, icon_pos: EntryIconPosition, paintable: Gdk.Paintable | None) -> None: ...
    def set_icon_sensitive(self, icon_pos: EntryIconPosition, sensitive: bool) -> None: ...
    def set_icon_tooltip_markup(self, icon_pos: EntryIconPosition, tooltip: str | None) -> None: ...
    def set_icon_tooltip_text(self, icon_pos: EntryIconPosition, tooltip: str | None) -> None: ...
    def set_input_hints(self, hints: InputHints) -> None: ...
    def set_input_purpose(self, purpose: InputPurpose) -> None: ...
    def set_invisible_char(self, ch: gunichar) -> None: ...
    def set_max_length(self, max: int) -> None: ...
    def set_overwrite_mode(self, overwrite: bool) -> None: ...
    def set_placeholder_text(self, text: str | None) -> None: ...
    def set_progress_fraction(self, fraction: float) -> None: ...
    def set_progress_pulse_step(self, fraction: float) -> None: ...
    def set_tabs(self, tabs: Pango.TabArray | None) -> None: ...
    def set_visibility(self, visible: bool) -> None: ...
    def unset_invisible_char(self) -> None: ...

class EntryBuffer(GObject.Object): 
    @classmethod
    def new(cls, initial_chars: str | None, n_initial_chars: int) -> EntryBuffer: ...
    def delete_text(self, position: int, n_chars: int) -> int: ...
    def emit_deleted_text(self, position: int, n_chars: int) -> None: ...
    def emit_inserted_text(self, position: int, chars: str, n_chars: int) -> None: ...
    def get_bytes(self) -> gsize: ...
    def get_length(self) -> int: ...
    def get_max_length(self) -> int: ...
    def get_text(self) -> str: ...
    def insert_text(self, position: int, chars: str, n_chars: int) -> int: ...
    def set_max_length(self, max_length: int) -> None: ...
    def set_text(self, chars: str, n_chars: int) -> None: ...

class EntryCompletion(GObject.Object, Buildable, CellLayout): 
    @classmethod
    def new(cls) -> EntryCompletion: ...
    def complete(self) -> None: ...
    def compute_prefix(self, key: str) -> str | None: ...
    def get_completion_prefix(self) -> str | None: ...
    def get_entry(self) -> Widget: ...
    def get_inline_completion(self) -> bool: ...
    def get_inline_selection(self) -> bool: ...
    def get_minimum_key_length(self) -> int: ...
    def get_model(self) -> TreeModel | None: ...
    def get_popup_completion(self) -> bool: ...
    def get_popup_set_width(self) -> bool: ...
    def get_popup_single_match(self) -> bool: ...
    def get_text_column(self) -> int: ...
    def insert_prefix(self) -> None: ...
    def set_inline_completion(self, inline_completion: bool) -> None: ...
    def set_inline_selection(self, inline_selection: bool) -> None: ...
    def set_match_func(self, func: EntryCompletionMatchFunc, func_data: object | None, func_notify: GLib.DestroyNotify) -> None: ...
    def set_minimum_key_length(self, length: int) -> None: ...
    def set_model(self, model: TreeModel | None) -> None: ...
    def set_popup_completion(self, popup_completion: bool) -> None: ...
    def set_popup_set_width(self, popup_set_width: bool) -> None: ...
    def set_popup_single_match(self, popup_single_match: bool) -> None: ...
    def set_text_column(self, column: int) -> None: ...

class EventController(GObject.Object): 
    def get_current_event(self) -> Gdk.Event | None: ...
    def get_current_event_device(self) -> Gdk.Device | None: ...
    def get_current_event_state(self) -> Gdk.ModifierType: ...
    def get_current_event_time(self) -> int: ...
    def get_name(self) -> str | None: ...
    def get_propagation_limit(self) -> PropagationLimit: ...
    def get_propagation_phase(self) -> PropagationPhase: ...
    def get_widget(self) -> Widget: ...
    def reset(self) -> None: ...
    def set_name(self, name: str | None) -> None: ...
    def set_propagation_limit(self, limit: PropagationLimit) -> None: ...
    def set_propagation_phase(self, phase: PropagationPhase) -> None: ...
    def set_static_name(self, name: str | None) -> None: ...

class EventControllerFocus(EventController): 
    @classmethod
    def new(cls) -> EventController: ...
    def contains_focus(self) -> bool: ...
    def is_focus(self) -> bool: ...

class EventControllerKey(EventController): 
    @classmethod
    def new(cls) -> EventController: ...
    def forward(self, widget: Widget) -> bool: ...
    def get_group(self) -> int: ...
    def get_im_context(self) -> IMContext | None: ...
    def set_im_context(self, im_context: IMContext | None) -> None: ...

class EventControllerLegacy(EventController): 
    @classmethod
    def new(cls) -> EventController: ...

class EventControllerMotion(EventController): 
    @classmethod
    def new(cls) -> EventController: ...
    def contains_pointer(self) -> bool: ...
    def is_pointer(self) -> bool: ...

class EventControllerScroll(EventController): 
    @classmethod
    def new(cls, flags: EventControllerScrollFlags) -> EventController: ...
    def get_flags(self) -> EventControllerScrollFlags: ...
    def get_unit(self) -> Gdk.ScrollUnit: ...
    def set_flags(self, flags: EventControllerScrollFlags) -> None: ...

class EveryFilter(MultiFilter, Gio.ListModel, Buildable): 
    @classmethod
    def new(cls) -> EveryFilter: ...

class Expander(Widget, Accessible, Buildable, ConstraintTarget): 
    @classmethod
    def new(cls, label: str | None) -> Widget: ...
    def get_child(self) -> Widget | None: ...
    def get_expanded(self) -> bool: ...
    def get_label(self) -> str | None: ...
    def get_label_widget(self) -> Widget | None: ...
    def get_resize_toplevel(self) -> bool: ...
    def get_use_markup(self) -> bool: ...
    def get_use_underline(self) -> bool: ...
    def set_child(self, child: Widget | None) -> None: ...
    def set_expanded(self, expanded: bool) -> None: ...
    def set_label(self, label: str | None) -> None: ...
    def set_label_widget(self, label_widget: Widget | None) -> None: ...
    def set_resize_toplevel(self, resize_toplevel: bool) -> None: ...
    def set_use_markup(self, use_markup: bool) -> None: ...
    def set_use_underline(self, use_underline: bool) -> None: ...

class Expression: 
    def bind(self, target: GObject.Object, property: str, this_: GObject.Object | None) -> ExpressionWatch: ...
    def evaluate(self, this_: GObject.Object | None, value: GObject.Value) -> bool: ...
    def get_value_type(self) -> GObject.Type: ...
    def is_static(self) -> bool: ...
    def ref(self) -> Expression: ...
    def unref(self) -> None: ...
    def watch(self, this_: GObject.Object | None, notify: ExpressionNotify, user_data: object | None, user_destroy: GLib.DestroyNotify) -> ExpressionWatch: ...

class FileChooserDialog(Dialog, Accessible, Buildable, ConstraintTarget, FileChooser, Native, Root, ShortcutManager): 
    @classmethod
    def new(cls, title: str | None, parent: Window | None, action: FileChooserAction, first_button_text: str | None) -> Widget: ...

class FileChooserNative(NativeDialog, FileChooser): 
    @classmethod
    def new(cls, title: str | None, parent: Window | None, action: FileChooserAction, accept_label: str | None, cancel_label: str | None) -> FileChooserNative: ...
    def get_accept_label(self) -> str | None: ...
    def get_cancel_label(self) -> str | None: ...
    def set_accept_label(self, accept_label: str | None) -> None: ...
    def set_cancel_label(self, cancel_label: str | None) -> None: ...

class FileChooserWidget(Widget, Accessible, Buildable, ConstraintTarget, FileChooser): 
    @classmethod
    def new(cls, action: FileChooserAction) -> Widget: ...

class FileFilter(Filter, Buildable): 
    @classmethod
    def new(cls) -> FileFilter: ...
    def add_mime_type(self, mime_type: str) -> None: ...
    def add_pattern(self, pattern: str) -> None: ...
    def add_pixbuf_formats(self) -> None: ...
    def add_suffix(self, suffix: str) -> None: ...
    def get_attributes(self) -> list[str]: ...
    def get_name(self) -> str | None: ...
    def set_name(self, name: str | None) -> None: ...
    def to_gvariant(self) -> GLib.Variant: ...

class Filter(GObject.Object): 
    def changed(self, change: FilterChange) -> None: ...
    def get_strictness(self) -> FilterMatch: ...
    def match(self, item: GObject.Object) -> bool: ...

class FilterListModel(GObject.Object, Gio.ListModel): 
    @classmethod
    def new(cls, model: Gio.ListModel | None, filter: Filter | None) -> FilterListModel: ...
    def get_filter(self) -> Filter | None: ...
    def get_incremental(self) -> bool: ...
    def get_model(self) -> Gio.ListModel | None: ...
    def get_pending(self) -> int: ...
    def set_filter(self, filter: Filter | None) -> None: ...
    def set_incremental(self, incremental: bool) -> None: ...
    def set_model(self, model: Gio.ListModel | None) -> None: ...

class Fixed(Widget, Accessible, Buildable, ConstraintTarget): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_child_position(self, widget: Widget, x: float, y: float) -> None: ...
    def get_child_transform(self, widget: Widget) -> Gsk.Transform | None: ...
    def move(self, widget: Widget, x: float, y: float) -> None: ...
    def put(self, widget: Widget, x: float, y: float) -> None: ...
    def remove(self, widget: Widget) -> None: ...
    def set_child_transform(self, widget: Widget, transform: Gsk.Transform | None) -> None: ...

class FixedLayout(LayoutManager): 
    @classmethod
    def new(cls) -> LayoutManager: ...

class FixedLayoutChild(LayoutChild): 
    def get_transform(self) -> Gsk.Transform | None: ...
    def set_transform(self, transform: Gsk.Transform) -> None: ...

class FlattenListModel(GObject.Object, Gio.ListModel): 
    @classmethod
    def new(cls, model: Gio.ListModel | None) -> FlattenListModel: ...
    def get_model(self) -> Gio.ListModel | None: ...
    def get_model_for_item(self, position: int) -> Gio.ListModel | None: ...
    def set_model(self, model: Gio.ListModel | None) -> None: ...

class FlowBox(Widget, Accessible, Buildable, ConstraintTarget, Orientable): 
    @classmethod
    def new(cls) -> Widget: ...
    def append(self, child: Widget) -> None: ...
    def bind_model(self, model: Gio.ListModel | None, create_widget_func: FlowBoxCreateWidgetFunc, user_data: object | None, user_data_free_func: GLib.DestroyNotify) -> None: ...
    def get_activate_on_single_click(self) -> bool: ...
    def get_child_at_index(self, idx: int) -> FlowBoxChild | None: ...
    def get_child_at_pos(self, x: int, y: int) -> FlowBoxChild | None: ...
    def get_column_spacing(self) -> int: ...
    def get_homogeneous(self) -> bool: ...
    def get_max_children_per_line(self) -> int: ...
    def get_min_children_per_line(self) -> int: ...
    def get_row_spacing(self) -> int: ...
    def get_selected_children(self) -> GLib.List: ...
    def get_selection_mode(self) -> SelectionMode: ...
    def insert(self, widget: Widget, position: int) -> None: ...
    def invalidate_filter(self) -> None: ...
    def invalidate_sort(self) -> None: ...
    def prepend(self, child: Widget) -> None: ...
    def remove(self, widget: Widget) -> None: ...
    def select_all(self) -> None: ...
    def select_child(self, child: FlowBoxChild) -> None: ...
    def selected_foreach(self, func: FlowBoxForeachFunc, data: object | None) -> None: ...
    def set_activate_on_single_click(self, single: bool) -> None: ...
    def set_column_spacing(self, spacing: int) -> None: ...
    def set_filter_func(self, filter_func: FlowBoxFilterFunc | None, user_data: object | None, destroy: GLib.DestroyNotify) -> None: ...
    def set_hadjustment(self, adjustment: Adjustment) -> None: ...
    def set_homogeneous(self, homogeneous: bool) -> None: ...
    def set_max_children_per_line(self, n_children: int) -> None: ...
    def set_min_children_per_line(self, n_children: int) -> None: ...
    def set_row_spacing(self, spacing: int) -> None: ...
    def set_selection_mode(self, mode: SelectionMode) -> None: ...
    def set_sort_func(self, sort_func: FlowBoxSortFunc | None, user_data: object | None, destroy: GLib.DestroyNotify) -> None: ...
    def set_vadjustment(self, adjustment: Adjustment) -> None: ...
    def unselect_all(self) -> None: ...
    def unselect_child(self, child: FlowBoxChild) -> None: ...

class FlowBoxChild(Widget, Accessible, Buildable, ConstraintTarget): 
    @classmethod
    def new(cls) -> Widget: ...
    def changed(self) -> None: ...
    def get_child(self) -> Widget | None: ...
    def get_index(self) -> int: ...
    def is_selected(self) -> bool: ...
    def set_child(self, child: Widget | None) -> None: ...

class FontButton(Widget, Accessible, Buildable, ConstraintTarget, FontChooser): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_modal(self) -> bool: ...
    def get_title(self) -> str: ...
    def get_use_font(self) -> bool: ...
    def get_use_size(self) -> bool: ...
    def set_modal(self, modal: bool) -> None: ...
    def set_title(self, title: str) -> None: ...
    def set_use_font(self, use_font: bool) -> None: ...
    def set_use_size(self, use_size: bool) -> None: ...

class FontChooserDialog(Dialog, Accessible, Buildable, ConstraintTarget, FontChooser, Native, Root, ShortcutManager): 
    @classmethod
    def new(cls, title: str | None, parent: Window | None) -> Widget: ...

class FontChooserWidget(Widget, Accessible, Buildable, ConstraintTarget, FontChooser): 
    @classmethod
    def new(cls) -> Widget: ...

class Frame(Widget, Accessible, Buildable, ConstraintTarget): 
    @classmethod
    def new(cls, label: str | None) -> Widget: ...
    def get_child(self) -> Widget | None: ...
    def get_label(self) -> str | None: ...
    def get_label_align(self) -> float: ...
    def get_label_widget(self) -> Widget | None: ...
    def set_child(self, child: Widget | None) -> None: ...
    def set_label(self, label: str | None) -> None: ...
    def set_label_align(self, xalign: float) -> None: ...
    def set_label_widget(self, label_widget: Widget | None) -> None: ...

class GLArea(Widget, Accessible, Buildable, ConstraintTarget): 
    @classmethod
    def new(cls) -> Widget: ...
    def attach_buffers(self) -> None: ...
    def get_auto_render(self) -> bool: ...
    def get_context(self) -> Gdk.GLContext | None: ...
    def get_error(self) -> GLib.Error | None: ...
    def get_has_depth_buffer(self) -> bool: ...
    def get_has_stencil_buffer(self) -> bool: ...
    def get_required_version(self, major: int, minor: int) -> None: ...
    def get_use_es(self) -> bool: ...
    def make_current(self) -> None: ...
    def queue_render(self) -> None: ...
    def set_auto_render(self, auto_render: bool) -> None: ...
    def set_error(self, error: GLib.Error | None) -> None: ...
    def set_has_depth_buffer(self, has_depth_buffer: bool) -> None: ...
    def set_has_stencil_buffer(self, has_stencil_buffer: bool) -> None: ...
    def set_required_version(self, major: int, minor: int) -> None: ...
    def set_use_es(self, use_es: bool) -> None: ...

class Gesture(EventController): 
    def get_bounding_box(self, rect: Gdk.Rectangle) -> bool: ...
    def get_bounding_box_center(self, x: float, y: float) -> bool: ...
    def get_device(self) -> Gdk.Device | None: ...
    def get_group(self) -> GLib.List: ...
    def get_last_event(self, sequence: Gdk.EventSequence | None) -> Gdk.Event | None: ...
    def get_last_updated_sequence(self) -> Gdk.EventSequence | None: ...
    def get_point(self, sequence: Gdk.EventSequence | None, x: float, y: float) -> bool: ...
    def get_sequence_state(self, sequence: Gdk.EventSequence) -> EventSequenceState: ...
    def get_sequences(self) -> GLib.List: ...
    def group(self, gesture: Gesture) -> None: ...
    def handles_sequence(self, sequence: Gdk.EventSequence | None) -> bool: ...
    def is_active(self) -> bool: ...
    def is_grouped_with(self, other: Gesture) -> bool: ...
    def is_recognized(self) -> bool: ...
    def set_sequence_state(self, sequence: Gdk.EventSequence, state: EventSequenceState) -> bool: ...
    def set_state(self, state: EventSequenceState) -> bool: ...
    def ungroup(self) -> None: ...

class GestureClick(GestureSingle): 
    @classmethod
    def new(cls) -> Gesture: ...

class GestureDrag(GestureSingle): 
    @classmethod
    def new(cls) -> Gesture: ...
    def get_offset(self, x: float | None, y: float | None) -> bool: ...
    def get_start_point(self, x: float | None, y: float | None) -> bool: ...

class GestureLongPress(GestureSingle): 
    @classmethod
    def new(cls) -> Gesture: ...
    def get_delay_factor(self) -> float: ...
    def set_delay_factor(self, delay_factor: float) -> None: ...

class GesturePan(GestureDrag): 
    @classmethod
    def new(cls, orientation: Orientation) -> Gesture: ...
    def get_orientation(self) -> Orientation: ...
    def set_orientation(self, orientation: Orientation) -> None: ...

class GestureRotate(Gesture): 
    @classmethod
    def new(cls) -> Gesture: ...
    def get_angle_delta(self) -> float: ...

class GestureSingle(Gesture): 
    def get_button(self) -> int: ...
    def get_current_button(self) -> int: ...
    def get_current_sequence(self) -> Gdk.EventSequence | None: ...
    def get_exclusive(self) -> bool: ...
    def get_touch_only(self) -> bool: ...
    def set_button(self, button: int) -> None: ...
    def set_exclusive(self, exclusive: bool) -> None: ...
    def set_touch_only(self, touch_only: bool) -> None: ...

class GestureStylus(GestureSingle): 
    @classmethod
    def new(cls) -> Gesture: ...
    def get_axes(self, axes: list[Gdk.AxisUse], values: list[float]) -> bool: ...
    def get_axis(self, axis: Gdk.AxisUse, value: float) -> bool: ...
    def get_backlog(self, backlog: list[Gdk.TimeCoord], n_elems: int) -> bool: ...
    def get_device_tool(self) -> Gdk.DeviceTool | None: ...

class GestureSwipe(GestureSingle): 
    @classmethod
    def new(cls) -> Gesture: ...
    def get_velocity(self, velocity_x: float, velocity_y: float) -> bool: ...

class GestureZoom(Gesture): 
    @classmethod
    def new(cls) -> Gesture: ...
    def get_scale_delta(self) -> float: ...

class Grid(Widget, Accessible, Buildable, ConstraintTarget, Orientable): 
    @classmethod
    def new(cls) -> Widget: ...
    def attach(self, child: Widget, column: int, row: int, width: int, height: int) -> None: ...
    def attach_next_to(self, child: Widget, sibling: Widget | None, side: PositionType, width: int, height: int) -> None: ...
    def get_baseline_row(self) -> int: ...
    def get_child_at(self, column: int, row: int) -> Widget | None: ...
    def get_column_homogeneous(self) -> bool: ...
    def get_column_spacing(self) -> int: ...
    def get_row_baseline_position(self, row: int) -> BaselinePosition: ...
    def get_row_homogeneous(self) -> bool: ...
    def get_row_spacing(self) -> int: ...
    def insert_column(self, position: int) -> None: ...
    def insert_next_to(self, sibling: Widget, side: PositionType) -> None: ...
    def insert_row(self, position: int) -> None: ...
    def query_child(self, child: Widget, column: int, row: int, width: int, height: int) -> None: ...
    def remove(self, child: Widget) -> None: ...
    def remove_column(self, position: int) -> None: ...
    def remove_row(self, position: int) -> None: ...
    def set_baseline_row(self, row: int) -> None: ...
    def set_column_homogeneous(self, homogeneous: bool) -> None: ...
    def set_column_spacing(self, spacing: int) -> None: ...
    def set_row_baseline_position(self, row: int, pos: BaselinePosition) -> None: ...
    def set_row_homogeneous(self, homogeneous: bool) -> None: ...
    def set_row_spacing(self, spacing: int) -> None: ...

class GridLayout(LayoutManager): 
    @classmethod
    def new(cls) -> LayoutManager: ...
    def get_baseline_row(self) -> int: ...
    def get_column_homogeneous(self) -> bool: ...
    def get_column_spacing(self) -> int: ...
    def get_row_baseline_position(self, row: int) -> BaselinePosition: ...
    def get_row_homogeneous(self) -> bool: ...
    def get_row_spacing(self) -> int: ...
    def set_baseline_row(self, row: int) -> None: ...
    def set_column_homogeneous(self, homogeneous: bool) -> None: ...
    def set_column_spacing(self, spacing: int) -> None: ...
    def set_row_baseline_position(self, row: int, pos: BaselinePosition) -> None: ...
    def set_row_homogeneous(self, homogeneous: bool) -> None: ...
    def set_row_spacing(self, spacing: int) -> None: ...

class GridLayoutChild(LayoutChild): 
    def get_column(self) -> int: ...
    def get_column_span(self) -> int: ...
    def get_row(self) -> int: ...
    def get_row_span(self) -> int: ...
    def set_column(self, column: int) -> None: ...
    def set_column_span(self, span: int) -> None: ...
    def set_row(self, row: int) -> None: ...
    def set_row_span(self, span: int) -> None: ...

class GridView(ListBase, Accessible, Buildable, ConstraintTarget, Orientable, Scrollable): 
    @classmethod
    def new(cls, model: SelectionModel | None, factory: ListItemFactory | None) -> Widget: ...
    def get_enable_rubberband(self) -> bool: ...
    def get_factory(self) -> ListItemFactory | None: ...
    def get_max_columns(self) -> int: ...
    def get_min_columns(self) -> int: ...
    def get_model(self) -> SelectionModel | None: ...
    def get_single_click_activate(self) -> bool: ...
    def set_enable_rubberband(self, enable_rubberband: bool) -> None: ...
    def set_factory(self, factory: ListItemFactory | None) -> None: ...
    def set_max_columns(self, max_columns: int) -> None: ...
    def set_min_columns(self, min_columns: int) -> None: ...
    def set_model(self, model: SelectionModel | None) -> None: ...
    def set_single_click_activate(self, single_click_activate: bool) -> None: ...

class HeaderBar(Widget, Accessible, Buildable, ConstraintTarget): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_decoration_layout(self) -> str | None: ...
    def get_show_title_buttons(self) -> bool: ...
    def get_title_widget(self) -> Widget | None: ...
    def pack_end(self, child: Widget) -> None: ...
    def pack_start(self, child: Widget) -> None: ...
    def remove(self, child: Widget) -> None: ...
    def set_decoration_layout(self, layout: str | None) -> None: ...
    def set_show_title_buttons(self, setting: bool) -> None: ...
    def set_title_widget(self, title_widget: Widget | None) -> None: ...

class IMContext(GObject.Object): 
    def delete_surrounding(self, offset: int, n_chars: int) -> bool: ...
    def filter_key(self, press: bool, surface: Gdk.Surface, device: Gdk.Device, time: int, keycode: int, state: Gdk.ModifierType, group: int) -> bool: ...
    def filter_keypress(self, event: Gdk.Event) -> bool: ...
    def focus_in(self) -> None: ...
    def focus_out(self) -> None: ...
    def get_preedit_string(self, str: str, attrs: Pango.AttrList, cursor_pos: int) -> None: ...
    def get_surrounding(self, text: str, cursor_index: int) -> bool: ...
    def get_surrounding_with_selection(self, text: str, cursor_index: int, anchor_index: int) -> bool: ...
    def reset(self) -> None: ...
    def set_client_widget(self, widget: Widget | None) -> None: ...
    def set_cursor_location(self, area: Gdk.Rectangle) -> None: ...
    def set_surrounding(self, text: str, len: int, cursor_index: int) -> None: ...
    def set_surrounding_with_selection(self, text: str, len: int, cursor_index: int, anchor_index: int) -> None: ...
    def set_use_preedit(self, use_preedit: bool) -> None: ...

class IMContextSimple(IMContext): 
    @classmethod
    def new(cls) -> IMContext: ...
    def add_compose_file(self, compose_file: str) -> None: ...
    def add_table(self, data: list[int], max_seq_len: int, n_seqs: int) -> None: ...

class IMMulticontext(IMContext): 
    @classmethod
    def new(cls) -> IMContext: ...
    def get_context_id(self) -> str: ...
    def set_context_id(self, context_id: str | None) -> None: ...

class IconPaintable(GObject.Object, Gdk.Paintable, SymbolicPaintable): 
    @classmethod
    def new_for_file(cls, file: Gio.File, size: int, scale: int) -> IconPaintable: ...
    def get_file(self) -> Gio.File | None: ...
    def get_icon_name(self) -> filename | None: ...
    def is_symbolic(self) -> bool: ...

class IconTheme(GObject.Object): 
    @classmethod
    def new(cls) -> IconTheme: ...
    @classmethod
    def get_for_display(cls, display: Gdk.Display) -> IconTheme: ...
    def add_resource_path(self, path: str) -> None: ...
    def add_search_path(self, path: filename) -> None: ...
    def get_display(self) -> Gdk.Display | None: ...
    def get_icon_names(self) -> list[str]: ...
    def get_icon_sizes(self, icon_name: str) -> list[int]: ...
    def get_resource_path(self) -> list[str] | None: ...
    def get_search_path(self) -> list[filename] | None: ...
    def get_theme_name(self) -> str: ...
    def has_gicon(self, gicon: Gio.Icon) -> bool: ...
    def has_icon(self, icon_name: str) -> bool: ...
    def lookup_by_gicon(self, icon: Gio.Icon, size: int, scale: int, direction: TextDirection, flags: IconLookupFlags) -> IconPaintable: ...
    def lookup_icon(self, icon_name: str, fallbacks: list[str] | None, size: int, scale: int, direction: TextDirection, flags: IconLookupFlags) -> IconPaintable: ...
    def set_resource_path(self, path: list[str] | None) -> None: ...
    def set_search_path(self, path: list[filename] | None) -> None: ...
    def set_theme_name(self, theme_name: str | None) -> None: ...

class IconView(Widget, Accessible, Buildable, CellLayout, ConstraintTarget, Scrollable): 
    @classmethod
    def new(cls) -> Widget: ...
    def create_drag_icon(self, path: TreePath) -> Gdk.Paintable | None: ...
    def enable_model_drag_dest(self, formats: Gdk.ContentFormats, actions: Gdk.DragAction) -> None: ...
    def enable_model_drag_source(self, start_button_mask: Gdk.ModifierType, formats: Gdk.ContentFormats, actions: Gdk.DragAction) -> None: ...
    def get_activate_on_single_click(self) -> bool: ...
    def get_cell_rect(self, path: TreePath, cell: CellRenderer | None, rect: Gdk.Rectangle) -> bool: ...
    def get_column_spacing(self) -> int: ...
    def get_columns(self) -> int: ...
    def get_cursor(self, path: TreePath, cell: CellRenderer) -> bool: ...
    def get_dest_item_at_pos(self, drag_x: int, drag_y: int, path: TreePath, pos: IconViewDropPosition) -> bool: ...
    def get_drag_dest_item(self, path: TreePath | None, pos: IconViewDropPosition) -> None: ...
    def get_item_at_pos(self, x: int, y: int, path: TreePath, cell: CellRenderer) -> bool: ...
    def get_item_column(self, path: TreePath) -> int: ...
    def get_item_orientation(self) -> Orientation: ...
    def get_item_padding(self) -> int: ...
    def get_item_row(self, path: TreePath) -> int: ...
    def get_item_width(self) -> int: ...
    def get_margin(self) -> int: ...
    def get_markup_column(self) -> int: ...
    def get_model(self) -> TreeModel | None: ...
    def get_path_at_pos(self, x: int, y: int) -> TreePath | None: ...
    def get_pixbuf_column(self) -> int: ...
    def get_reorderable(self) -> bool: ...
    def get_row_spacing(self) -> int: ...
    def get_selected_items(self) -> GLib.List: ...
    def get_selection_mode(self) -> SelectionMode: ...
    def get_spacing(self) -> int: ...
    def get_text_column(self) -> int: ...
    def get_tooltip_column(self) -> int: ...
    def get_tooltip_context(self, x: int, y: int, keyboard_tip: bool, model: TreeModel, path: TreePath, iter: TreeIter) -> bool: ...
    def get_visible_range(self, start_path: TreePath, end_path: TreePath) -> bool: ...
    def item_activated(self, path: TreePath) -> None: ...
    def path_is_selected(self, path: TreePath) -> bool: ...
    def scroll_to_path(self, path: TreePath, use_align: bool, row_align: float, col_align: float) -> None: ...
    def select_all(self) -> None: ...
    def select_path(self, path: TreePath) -> None: ...
    def selected_foreach(self, func: IconViewForeachFunc, data: object | None) -> None: ...
    def set_activate_on_single_click(self, single: bool) -> None: ...
    def set_column_spacing(self, column_spacing: int) -> None: ...
    def set_columns(self, columns: int) -> None: ...
    def set_cursor(self, path: TreePath, cell: CellRenderer | None, start_editing: bool) -> None: ...
    def set_drag_dest_item(self, path: TreePath | None, pos: IconViewDropPosition) -> None: ...
    def set_item_orientation(self, orientation: Orientation) -> None: ...
    def set_item_padding(self, item_padding: int) -> None: ...
    def set_item_width(self, item_width: int) -> None: ...
    def set_margin(self, margin: int) -> None: ...
    def set_markup_column(self, column: int) -> None: ...
    def set_model(self, model: TreeModel | None) -> None: ...
    def set_pixbuf_column(self, column: int) -> None: ...
    def set_reorderable(self, reorderable: bool) -> None: ...
    def set_row_spacing(self, row_spacing: int) -> None: ...
    def set_selection_mode(self, mode: SelectionMode) -> None: ...
    def set_spacing(self, spacing: int) -> None: ...
    def set_text_column(self, column: int) -> None: ...
    def set_tooltip_cell(self, tooltip: Tooltip, path: TreePath, cell: CellRenderer | None) -> None: ...
    def set_tooltip_column(self, column: int) -> None: ...
    def set_tooltip_item(self, tooltip: Tooltip, path: TreePath) -> None: ...
    def unselect_all(self) -> None: ...
    def unselect_path(self, path: TreePath) -> None: ...
    def unset_model_drag_dest(self) -> None: ...
    def unset_model_drag_source(self) -> None: ...

class Image(Widget, Accessible, Buildable, ConstraintTarget): 
    @classmethod
    def new(cls) -> Widget: ...
    def clear(self) -> None: ...
    def get_gicon(self) -> Gio.Icon | None: ...
    def get_icon_name(self) -> str | None: ...
    def get_icon_size(self) -> IconSize: ...
    def get_paintable(self) -> Gdk.Paintable | None: ...
    def get_pixel_size(self) -> int: ...
    def get_storage_type(self) -> ImageType: ...
    def set_from_file(self, filename: filename | None) -> None: ...
    def set_from_gicon(self, icon: Gio.Icon) -> None: ...
    def set_from_icon_name(self, icon_name: str | None) -> None: ...
    def set_from_paintable(self, paintable: Gdk.Paintable | None) -> None: ...
    def set_from_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf | None) -> None: ...
    def set_from_resource(self, resource_path: str | None) -> None: ...
    def set_icon_size(self, icon_size: IconSize) -> None: ...
    def set_pixel_size(self, pixel_size: int) -> None: ...

class InfoBar(Widget, Accessible, Buildable, ConstraintTarget): 
    @classmethod
    def new(cls) -> Widget: ...
    def add_action_widget(self, child: Widget, response_id: int) -> None: ...
    def add_button(self, button_text: str, response_id: int) -> Button: ...
    def add_buttons(self, first_button_text: str) -> None: ...
    def add_child(self, widget: Widget) -> None: ...
    def get_message_type(self) -> MessageType: ...
    def get_revealed(self) -> bool: ...
    def get_show_close_button(self) -> bool: ...
    def remove_action_widget(self, widget: Widget) -> None: ...
    def remove_child(self, widget: Widget) -> None: ...
    def response(self, response_id: int) -> None: ...
    def set_default_response(self, response_id: int) -> None: ...
    def set_message_type(self, message_type: MessageType) -> None: ...
    def set_response_sensitive(self, response_id: int, setting: bool) -> None: ...
    def set_revealed(self, revealed: bool) -> None: ...
    def set_show_close_button(self, setting: bool) -> None: ...

class Inscription(Widget, Accessible, Buildable, ConstraintTarget): 
    @classmethod
    def new(cls, text: str | None) -> Widget: ...
    def get_attributes(self) -> Pango.AttrList | None: ...
    def get_min_chars(self) -> int: ...
    def get_min_lines(self) -> int: ...
    def get_nat_chars(self) -> int: ...
    def get_nat_lines(self) -> int: ...
    def get_text(self) -> str | None: ...
    def get_text_overflow(self) -> InscriptionOverflow: ...
    def get_wrap_mode(self) -> Pango.WrapMode: ...
    def get_xalign(self) -> float: ...
    def get_yalign(self) -> float: ...
    def set_attributes(self, attrs: Pango.AttrList | None) -> None: ...
    def set_markup(self, markup: str | None) -> None: ...
    def set_min_chars(self, min_chars: int) -> None: ...
    def set_min_lines(self, min_lines: int) -> None: ...
    def set_nat_chars(self, nat_chars: int) -> None: ...
    def set_nat_lines(self, nat_lines: int) -> None: ...
    def set_text(self, text: str | None) -> None: ...
    def set_text_overflow(self, overflow: InscriptionOverflow) -> None: ...
    def set_wrap_mode(self, wrap_mode: Pango.WrapMode) -> None: ...
    def set_xalign(self, xalign: float) -> None: ...
    def set_yalign(self, yalign: float) -> None: ...

class KeyvalTrigger(ShortcutTrigger): 
    @classmethod
    def new(cls, keyval: int, modifiers: Gdk.ModifierType) -> ShortcutTrigger: ...
    def get_keyval(self) -> int: ...
    def get_modifiers(self) -> Gdk.ModifierType: ...

class Label(Widget, Accessible, Buildable, ConstraintTarget): 
    @classmethod
    def new(cls, str: str | None) -> Widget: ...
    def get_attributes(self) -> Pango.AttrList | None: ...
    def get_current_uri(self) -> str | None: ...
    def get_ellipsize(self) -> Pango.EllipsizeMode: ...
    def get_extra_menu(self) -> Gio.MenuModel | None: ...
    def get_justify(self) -> Justification: ...
    def get_label(self) -> str: ...
    def get_layout(self) -> Pango.Layout: ...
    def get_layout_offsets(self, x: int, y: int) -> None: ...
    def get_lines(self) -> int: ...
    def get_max_width_chars(self) -> int: ...
    def get_mnemonic_keyval(self) -> int: ...
    def get_mnemonic_widget(self) -> Widget | None: ...
    def get_natural_wrap_mode(self) -> NaturalWrapMode: ...
    def get_selectable(self) -> bool: ...
    def get_selection_bounds(self, start: int, end: int) -> bool: ...
    def get_single_line_mode(self) -> bool: ...
    def get_tabs(self) -> Pango.TabArray | None: ...
    def get_text(self) -> str: ...
    def get_use_markup(self) -> bool: ...
    def get_use_underline(self) -> bool: ...
    def get_width_chars(self) -> int: ...
    def get_wrap(self) -> bool: ...
    def get_wrap_mode(self) -> Pango.WrapMode: ...
    def get_xalign(self) -> float: ...
    def get_yalign(self) -> float: ...
    def select_region(self, start_offset: int, end_offset: int) -> None: ...
    def set_attributes(self, attrs: Pango.AttrList | None) -> None: ...
    def set_ellipsize(self, mode: Pango.EllipsizeMode) -> None: ...
    def set_extra_menu(self, model: Gio.MenuModel | None) -> None: ...
    def set_justify(self, jtype: Justification) -> None: ...
    def set_label(self, str: str) -> None: ...
    def set_lines(self, lines: int) -> None: ...
    def set_markup(self, str: str) -> None: ...
    def set_markup_with_mnemonic(self, str: str) -> None: ...
    def set_max_width_chars(self, n_chars: int) -> None: ...
    def set_mnemonic_widget(self, widget: Widget | None) -> None: ...
    def set_natural_wrap_mode(self, wrap_mode: NaturalWrapMode) -> None: ...
    def set_selectable(self, setting: bool) -> None: ...
    def set_single_line_mode(self, single_line_mode: bool) -> None: ...
    def set_tabs(self, tabs: Pango.TabArray | None) -> None: ...
    def set_text(self, str: str) -> None: ...
    def set_text_with_mnemonic(self, str: str) -> None: ...
    def set_use_markup(self, setting: bool) -> None: ...
    def set_use_underline(self, setting: bool) -> None: ...
    def set_width_chars(self, n_chars: int) -> None: ...
    def set_wrap(self, wrap: bool) -> None: ...
    def set_wrap_mode(self, wrap_mode: Pango.WrapMode) -> None: ...
    def set_xalign(self, xalign: float) -> None: ...
    def set_yalign(self, yalign: float) -> None: ...

class LayoutChild(GObject.Object): 
    def get_child_widget(self) -> Widget: ...
    def get_layout_manager(self) -> LayoutManager: ...

class LayoutManager(GObject.Object): 
    def allocate(self, widget: Widget, width: int, height: int, baseline: int) -> None: ...
    def get_layout_child(self, child: Widget) -> LayoutChild: ...
    def get_request_mode(self) -> SizeRequestMode: ...
    def get_widget(self) -> Widget | None: ...
    def layout_changed(self) -> None: ...
    def measure(self, widget: Widget, orientation: Orientation, for_size: int, minimum: int, natural: int, minimum_baseline: int, natural_baseline: int) -> None: ...

class LevelBar(Widget, Accessible, Buildable, ConstraintTarget, Orientable): 
    @classmethod
    def new(cls) -> Widget: ...
    def add_offset_value(self, name: str, value: float) -> None: ...
    def get_inverted(self) -> bool: ...
    def get_max_value(self) -> float: ...
    def get_min_value(self) -> float: ...
    def get_mode(self) -> LevelBarMode: ...
    def get_offset_value(self, name: str | None, value: float) -> bool: ...
    def get_value(self) -> float: ...
    def remove_offset_value(self, name: str | None) -> None: ...
    def set_inverted(self, inverted: bool) -> None: ...
    def set_max_value(self, value: float) -> None: ...
    def set_min_value(self, value: float) -> None: ...
    def set_mode(self, mode: LevelBarMode) -> None: ...
    def set_value(self, value: float) -> None: ...

class LinkButton(Button, Accessible, Actionable, Buildable, ConstraintTarget): 
    @classmethod
    def new(cls, uri: str) -> Widget: ...
    def get_uri(self) -> str: ...
    def get_visited(self) -> bool: ...
    def set_uri(self, uri: str) -> None: ...
    def set_visited(self, visited: bool) -> None: ...

class ListBase(Widget, Accessible, Buildable, ConstraintTarget, Orientable, Scrollable): ...

class ListBox(Widget, Accessible, Buildable, ConstraintTarget): 
    @classmethod
    def new(cls) -> Widget: ...
    def append(self, child: Widget) -> None: ...
    def bind_model(self, model: Gio.ListModel | None, create_widget_func: ListBoxCreateWidgetFunc | None, user_data: object | None, user_data_free_func: GLib.DestroyNotify) -> None: ...
    def drag_highlight_row(self, row: ListBoxRow) -> None: ...
    def drag_unhighlight_row(self) -> None: ...
    def get_activate_on_single_click(self) -> bool: ...
    def get_adjustment(self) -> Adjustment | None: ...
    def get_row_at_index(self, index_: int) -> ListBoxRow | None: ...
    def get_row_at_y(self, y: int) -> ListBoxRow | None: ...
    def get_selected_row(self) -> ListBoxRow | None: ...
    def get_selected_rows(self) -> GLib.List: ...
    def get_selection_mode(self) -> SelectionMode: ...
    def get_show_separators(self) -> bool: ...
    def insert(self, child: Widget, position: int) -> None: ...
    def invalidate_filter(self) -> None: ...
    def invalidate_headers(self) -> None: ...
    def invalidate_sort(self) -> None: ...
    def prepend(self, child: Widget) -> None: ...
    def remove(self, child: Widget) -> None: ...
    def select_all(self) -> None: ...
    def select_row(self, row: ListBoxRow | None) -> None: ...
    def selected_foreach(self, func: ListBoxForeachFunc, data: object | None) -> None: ...
    def set_activate_on_single_click(self, single: bool) -> None: ...
    def set_adjustment(self, adjustment: Adjustment | None) -> None: ...
    def set_filter_func(self, filter_func: ListBoxFilterFunc | None, user_data: object | None, destroy: GLib.DestroyNotify) -> None: ...
    def set_header_func(self, update_header: ListBoxUpdateHeaderFunc | None, user_data: object | None, destroy: GLib.DestroyNotify) -> None: ...
    def set_placeholder(self, placeholder: Widget | None) -> None: ...
    def set_selection_mode(self, mode: SelectionMode) -> None: ...
    def set_show_separators(self, show_separators: bool) -> None: ...
    def set_sort_func(self, sort_func: ListBoxSortFunc | None, user_data: object | None, destroy: GLib.DestroyNotify) -> None: ...
    def unselect_all(self) -> None: ...
    def unselect_row(self, row: ListBoxRow) -> None: ...

class ListBoxRow(Widget, Accessible, Actionable, Buildable, ConstraintTarget): 
    @classmethod
    def new(cls) -> Widget: ...
    def changed(self) -> None: ...
    def get_activatable(self) -> bool: ...
    def get_child(self) -> Widget | None: ...
    def get_header(self) -> Widget | None: ...
    def get_index(self) -> int: ...
    def get_selectable(self) -> bool: ...
    def is_selected(self) -> bool: ...
    def set_activatable(self, activatable: bool) -> None: ...
    def set_child(self, child: Widget | None) -> None: ...
    def set_header(self, header: Widget | None) -> None: ...
    def set_selectable(self, selectable: bool) -> None: ...

class ListItem(GObject.Object): 
    def get_activatable(self) -> bool: ...
    def get_child(self) -> Widget | None: ...
    def get_item(self) -> GObject.Object | None: ...
    def get_position(self) -> int: ...
    def get_selectable(self) -> bool: ...
    def get_selected(self) -> bool: ...
    def set_activatable(self, activatable: bool) -> None: ...
    def set_child(self, child: Widget | None) -> None: ...
    def set_selectable(self, selectable: bool) -> None: ...

class ListItemFactory(GObject.Object): ...

class ListStore(GObject.Object, Buildable, TreeDragDest, TreeDragSource, TreeModel, TreeSortable): 
    @classmethod
    def new(cls, n_columns: int) -> ListStore: ...
    def append(self, iter: TreeIter) -> None: ...
    def clear(self) -> None: ...
    def insert(self, iter: TreeIter, position: int) -> None: ...
    def insert_after(self, iter: TreeIter, sibling: TreeIter | None) -> None: ...
    def insert_before(self, iter: TreeIter, sibling: TreeIter | None) -> None: ...
    def insert_with_values(self, iter: TreeIter, position: int) -> None: ...
    def insert_with_valuesv(self, iter: TreeIter, position: int, columns: list[int], values: list[GObject.Value], n_values: int) -> None: ...
    def iter_is_valid(self, iter: TreeIter) -> bool: ...
    def move_after(self, iter: TreeIter, position: TreeIter | None) -> None: ...
    def move_before(self, iter: TreeIter, position: TreeIter | None) -> None: ...
    def prepend(self, iter: TreeIter) -> None: ...
    def remove(self, iter: TreeIter) -> bool: ...
    def reorder(self, new_order: list[int]) -> None: ...
    def set(self, iter: TreeIter) -> None: ...
    def set_column_types(self, n_columns: int, types: list[GObject.Type]) -> None: ...
    def set_valist(self, iter: TreeIter, var_args: va_list) -> None: ...
    def set_value(self, iter: TreeIter, column: int, value: GObject.Value) -> None: ...
    def set_valuesv(self, iter: TreeIter, columns: list[int], values: list[GObject.Value], n_values: int) -> None: ...
    def swap(self, a: TreeIter, b: TreeIter) -> None: ...

class ListView(ListBase, Accessible, Buildable, ConstraintTarget, Orientable, Scrollable): 
    @classmethod
    def new(cls, model: SelectionModel | None, factory: ListItemFactory | None) -> Widget: ...
    def get_enable_rubberband(self) -> bool: ...
    def get_factory(self) -> ListItemFactory | None: ...
    def get_model(self) -> SelectionModel | None: ...
    def get_show_separators(self) -> bool: ...
    def get_single_click_activate(self) -> bool: ...
    def set_enable_rubberband(self, enable_rubberband: bool) -> None: ...
    def set_factory(self, factory: ListItemFactory | None) -> None: ...
    def set_model(self, model: SelectionModel | None) -> None: ...
    def set_show_separators(self, show_separators: bool) -> None: ...
    def set_single_click_activate(self, single_click_activate: bool) -> None: ...

class LockButton(Button, Accessible, Actionable, Buildable, ConstraintTarget): 
    @classmethod
    def new(cls, permission: Gio.Permission | None) -> Widget: ...
    def get_permission(self) -> Gio.Permission | None: ...
    def set_permission(self, permission: Gio.Permission | None) -> None: ...

class MapListModel(GObject.Object, Gio.ListModel): 
    @classmethod
    def new(cls, model: Gio.ListModel | None, map_func: MapListModelMapFunc | None, user_data: object | None, user_destroy: GLib.DestroyNotify) -> MapListModel: ...
    def get_model(self) -> Gio.ListModel | None: ...
    def has_map(self) -> bool: ...
    def set_map_func(self, map_func: MapListModelMapFunc | None, user_data: object | None, user_destroy: GLib.DestroyNotify) -> None: ...
    def set_model(self, model: Gio.ListModel | None) -> None: ...

class MediaControls(Widget, Accessible, Buildable, ConstraintTarget): 
    @classmethod
    def new(cls, stream: MediaStream | None) -> Widget: ...
    def get_media_stream(self) -> MediaStream | None: ...
    def set_media_stream(self, stream: MediaStream | None) -> None: ...

class MediaFile(MediaStream, Gdk.Paintable): 
    @classmethod
    def new(cls) -> MediaFile: ...
    def clear(self) -> None: ...
    def get_file(self) -> Gio.File | None: ...
    def get_input_stream(self) -> Gio.InputStream | None: ...
    def set_file(self, file: Gio.File | None) -> None: ...
    def set_filename(self, filename: filename | None) -> None: ...
    def set_input_stream(self, stream: Gio.InputStream | None) -> None: ...
    def set_resource(self, resource_path: str | None) -> None: ...

class MediaStream(GObject.Object, Gdk.Paintable): 
    def ended(self) -> None: ...
    def error(self, domain: GLib.Quark, code: int, format: str) -> None: ...
    def error_valist(self, domain: GLib.Quark, code: int, format: str, args: va_list) -> None: ...
    def gerror(self, error: GLib.Error) -> None: ...
    def get_duration(self) -> int: ...
    def get_ended(self) -> bool: ...
    def get_error(self) -> GLib.Error | None: ...
    def get_loop(self) -> bool: ...
    def get_muted(self) -> bool: ...
    def get_playing(self) -> bool: ...
    def get_timestamp(self) -> int: ...
    def get_volume(self) -> float: ...
    def has_audio(self) -> bool: ...
    def has_video(self) -> bool: ...
    def is_prepared(self) -> bool: ...
    def is_seekable(self) -> bool: ...
    def is_seeking(self) -> bool: ...
    def pause(self) -> None: ...
    def play(self) -> None: ...
    def prepared(self, has_audio: bool, has_video: bool, seekable: bool, duration: int) -> None: ...
    def realize(self, surface: Gdk.Surface) -> None: ...
    def seek(self, timestamp: int) -> None: ...
    def seek_failed(self) -> None: ...
    def seek_success(self) -> None: ...
    def set_loop(self, loop: bool) -> None: ...
    def set_muted(self, muted: bool) -> None: ...
    def set_playing(self, playing: bool) -> None: ...
    def set_volume(self, volume: float) -> None: ...
    def stream_ended(self) -> None: ...
    def stream_prepared(self, has_audio: bool, has_video: bool, seekable: bool, duration: int) -> None: ...
    def stream_unprepared(self) -> None: ...
    def unprepared(self) -> None: ...
    def unrealize(self, surface: Gdk.Surface) -> None: ...
    def update(self, timestamp: int) -> None: ...

class MenuButton(Widget, Accessible, Buildable, ConstraintTarget): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_always_show_arrow(self) -> bool: ...
    def get_child(self) -> Widget | None: ...
    def get_direction(self) -> ArrowType: ...
    def get_has_frame(self) -> bool: ...
    def get_icon_name(self) -> str | None: ...
    def get_label(self) -> str | None: ...
    def get_menu_model(self) -> Gio.MenuModel | None: ...
    def get_popover(self) -> Popover | None: ...
    def get_primary(self) -> bool: ...
    def get_use_underline(self) -> bool: ...
    def popdown(self) -> None: ...
    def popup(self) -> None: ...
    def set_always_show_arrow(self, always_show_arrow: bool) -> None: ...
    def set_child(self, child: Widget | None) -> None: ...
    def set_create_popup_func(self, func: MenuButtonCreatePopupFunc | None, user_data: object | None, destroy_notify: GLib.DestroyNotify | None) -> None: ...
    def set_direction(self, direction: ArrowType) -> None: ...
    def set_has_frame(self, has_frame: bool) -> None: ...
    def set_icon_name(self, icon_name: str) -> None: ...
    def set_label(self, label: str) -> None: ...
    def set_menu_model(self, menu_model: Gio.MenuModel | None) -> None: ...
    def set_popover(self, popover: Widget | None) -> None: ...
    def set_primary(self, primary: bool) -> None: ...
    def set_use_underline(self, use_underline: bool) -> None: ...

class MessageDialog(Dialog, Accessible, Buildable, ConstraintTarget, Native, Root, ShortcutManager): 
    @classmethod
    def new(cls, parent: Window | None, flags: DialogFlags, type: MessageType, buttons: ButtonsType, message_format: str | None) -> Widget: ...
    def format_secondary_markup(self, message_format: str) -> None: ...
    def format_secondary_text(self, message_format: str | None) -> None: ...
    def get_message_area(self) -> Widget: ...
    def set_markup(self, str: str) -> None: ...

class MnemonicAction(ShortcutAction): 
    @classmethod
    def get(cls) -> MnemonicAction: ...

class MnemonicTrigger(ShortcutTrigger): 
    @classmethod
    def new(cls, keyval: int) -> MnemonicTrigger: ...
    def get_keyval(self) -> int: ...

class MountOperation(Gio.MountOperation): 
    @classmethod
    def new(cls, parent: Window | None) -> Gio.MountOperation: ...
    def get_display(self) -> Gdk.Display: ...
    def get_parent(self) -> Window | None: ...
    def is_showing(self) -> bool: ...
    def set_display(self, display: Gdk.Display) -> None: ...
    def set_parent(self, parent: Window | None) -> None: ...

class MultiFilter(Filter, Gio.ListModel, Buildable): 
    def append(self, filter: Filter) -> None: ...
    def remove(self, position: int) -> None: ...

class MultiSelection(GObject.Object, Gio.ListModel, SelectionModel): 
    @classmethod
    def new(cls, model: Gio.ListModel | None) -> MultiSelection: ...
    def get_model(self) -> Gio.ListModel | None: ...
    def set_model(self, model: Gio.ListModel | None) -> None: ...

class MultiSorter(Sorter, Gio.ListModel, Buildable): 
    @classmethod
    def new(cls) -> MultiSorter: ...
    def append(self, sorter: Sorter) -> None: ...
    def remove(self, position: int) -> None: ...

class NamedAction(ShortcutAction): 
    @classmethod
    def new(cls, name: str) -> NamedAction: ...
    def get_action_name(self) -> str: ...

class NativeDialog(GObject.Object): 
    def destroy(self) -> None: ...
    def get_modal(self) -> bool: ...
    def get_title(self) -> str | None: ...
    def get_transient_for(self) -> Window | None: ...
    def get_visible(self) -> bool: ...
    def hide(self) -> None: ...
    def set_modal(self, modal: bool) -> None: ...
    def set_title(self, title: str) -> None: ...
    def set_transient_for(self, parent: Window | None) -> None: ...
    def show(self) -> None: ...

class NeverTrigger(ShortcutTrigger): 
    @classmethod
    def get(cls) -> NeverTrigger: ...

class NoSelection(GObject.Object, Gio.ListModel, SelectionModel): 
    @classmethod
    def new(cls, model: Gio.ListModel | None) -> NoSelection: ...
    def get_model(self) -> Gio.ListModel | None: ...
    def set_model(self, model: Gio.ListModel | None) -> None: ...

class Notebook(Widget, Accessible, Buildable, ConstraintTarget): 
    @classmethod
    def new(cls) -> Widget: ...
    def append_page(self, child: Widget, tab_label: Widget | None) -> int: ...
    def append_page_menu(self, child: Widget, tab_label: Widget | None, menu_label: Widget | None) -> int: ...
    def detach_tab(self, child: Widget) -> None: ...
    def get_action_widget(self, pack_type: PackType) -> Widget | None: ...
    def get_current_page(self) -> int: ...
    def get_group_name(self) -> str | None: ...
    def get_menu_label(self, child: Widget) -> Widget | None: ...
    def get_menu_label_text(self, child: Widget) -> str | None: ...
    def get_n_pages(self) -> int: ...
    def get_nth_page(self, page_num: int) -> Widget | None: ...
    def get_page(self, child: Widget) -> NotebookPage: ...
    def get_pages(self) -> Gio.ListModel: ...
    def get_scrollable(self) -> bool: ...
    def get_show_border(self) -> bool: ...
    def get_show_tabs(self) -> bool: ...
    def get_tab_detachable(self, child: Widget) -> bool: ...
    def get_tab_label(self, child: Widget) -> Widget | None: ...
    def get_tab_label_text(self, child: Widget) -> str | None: ...
    def get_tab_pos(self) -> PositionType: ...
    def get_tab_reorderable(self, child: Widget) -> bool: ...
    def insert_page(self, child: Widget, tab_label: Widget | None, position: int) -> int: ...
    def insert_page_menu(self, child: Widget, tab_label: Widget | None, menu_label: Widget | None, position: int) -> int: ...
    def next_page(self) -> None: ...
    def page_num(self, child: Widget) -> int: ...
    def popup_disable(self) -> None: ...
    def popup_enable(self) -> None: ...
    def prepend_page(self, child: Widget, tab_label: Widget | None) -> int: ...
    def prepend_page_menu(self, child: Widget, tab_label: Widget | None, menu_label: Widget | None) -> int: ...
    def prev_page(self) -> None: ...
    def remove_page(self, page_num: int) -> None: ...
    def reorder_child(self, child: Widget, position: int) -> None: ...
    def set_action_widget(self, widget: Widget, pack_type: PackType) -> None: ...
    def set_current_page(self, page_num: int) -> None: ...
    def set_group_name(self, group_name: str | None) -> None: ...
    def set_menu_label(self, child: Widget, menu_label: Widget | None) -> None: ...
    def set_menu_label_text(self, child: Widget, menu_text: str) -> None: ...
    def set_scrollable(self, scrollable: bool) -> None: ...
    def set_show_border(self, show_border: bool) -> None: ...
    def set_show_tabs(self, show_tabs: bool) -> None: ...
    def set_tab_detachable(self, child: Widget, detachable: bool) -> None: ...
    def set_tab_label(self, child: Widget, tab_label: Widget | None) -> None: ...
    def set_tab_label_text(self, child: Widget, tab_text: str) -> None: ...
    def set_tab_pos(self, pos: PositionType) -> None: ...
    def set_tab_reorderable(self, child: Widget, reorderable: bool) -> None: ...

class NotebookPage(GObject.Object): 
    def get_child(self) -> Widget: ...

class NothingAction(ShortcutAction): 
    @classmethod
    def get(cls) -> NothingAction: ...

class NumericSorter(Sorter): 
    @classmethod
    def new(cls, expression: Expression | None) -> NumericSorter: ...
    def get_expression(self) -> Expression | None: ...
    def get_sort_order(self) -> SortType: ...
    def set_expression(self, expression: Expression | None) -> None: ...
    def set_sort_order(self, sort_order: SortType) -> None: ...

class ObjectExpression(Expression): 
    @classmethod
    def new(cls, object: GObject.Object) -> ObjectExpression: ...
    def get_object(self) -> GObject.Object | None: ...

class Overlay(Widget, Accessible, Buildable, ConstraintTarget): 
    @classmethod
    def new(cls) -> Widget: ...
    def add_overlay(self, widget: Widget) -> None: ...
    def get_child(self) -> Widget | None: ...
    def get_clip_overlay(self, widget: Widget) -> bool: ...
    def get_measure_overlay(self, widget: Widget) -> bool: ...
    def remove_overlay(self, widget: Widget) -> None: ...
    def set_child(self, child: Widget | None) -> None: ...
    def set_clip_overlay(self, widget: Widget, clip_overlay: bool) -> None: ...
    def set_measure_overlay(self, widget: Widget, measure: bool) -> None: ...

class OverlayLayout(LayoutManager): 
    @classmethod
    def new(cls) -> LayoutManager: ...

class OverlayLayoutChild(LayoutChild): 
    def get_clip_overlay(self) -> bool: ...
    def get_measure(self) -> bool: ...
    def set_clip_overlay(self, clip_overlay: bool) -> None: ...
    def set_measure(self, measure: bool) -> None: ...

class PadController(EventController): 
    @classmethod
    def new(cls, group: Gio.ActionGroup, pad: Gdk.Device | None) -> PadController: ...
    def set_action(self, type: PadActionType, index: int, mode: int, label: str, action_name: str) -> None: ...
    def set_action_entries(self, entries: list[PadActionEntry], n_entries: int) -> None: ...

class PageSetup(GObject.Object): 
    @classmethod
    def new(cls) -> PageSetup: ...
    def copy(self) -> PageSetup: ...
    def get_bottom_margin(self, unit: Unit) -> float: ...
    def get_left_margin(self, unit: Unit) -> float: ...
    def get_orientation(self) -> PageOrientation: ...
    def get_page_height(self, unit: Unit) -> float: ...
    def get_page_width(self, unit: Unit) -> float: ...
    def get_paper_height(self, unit: Unit) -> float: ...
    def get_paper_size(self) -> PaperSize: ...
    def get_paper_width(self, unit: Unit) -> float: ...
    def get_right_margin(self, unit: Unit) -> float: ...
    def get_top_margin(self, unit: Unit) -> float: ...
    def load_file(self, file_name: filename) -> bool: ...
    def load_key_file(self, key_file: GLib.KeyFile, group_name: str | None) -> bool: ...
    def set_bottom_margin(self, margin: float, unit: Unit) -> None: ...
    def set_left_margin(self, margin: float, unit: Unit) -> None: ...
    def set_orientation(self, orientation: PageOrientation) -> None: ...
    def set_paper_size(self, size: PaperSize) -> None: ...
    def set_paper_size_and_default_margins(self, size: PaperSize) -> None: ...
    def set_right_margin(self, margin: float, unit: Unit) -> None: ...
    def set_top_margin(self, margin: float, unit: Unit) -> None: ...
    def to_file(self, file_name: filename) -> bool: ...
    def to_gvariant(self) -> GLib.Variant: ...
    def to_key_file(self, key_file: GLib.KeyFile, group_name: str | None) -> None: ...

class PageSetupUnixDialog(Dialog, Accessible, Buildable, ConstraintTarget, Native, Root, ShortcutManager): 
    @classmethod
    def new(cls, title: str | None, parent: Window | None) -> Widget: ...
    def get_page_setup(self) -> PageSetup: ...
    def get_print_settings(self) -> PrintSettings | None: ...
    def set_page_setup(self, page_setup: PageSetup) -> None: ...
    def set_print_settings(self, print_settings: PrintSettings | None) -> None: ...

class Paned(Widget, Accessible, Buildable, ConstraintTarget, Orientable): 
    @classmethod
    def new(cls, orientation: Orientation) -> Widget: ...
    def get_end_child(self) -> Widget | None: ...
    def get_position(self) -> int: ...
    def get_resize_end_child(self) -> bool: ...
    def get_resize_start_child(self) -> bool: ...
    def get_shrink_end_child(self) -> bool: ...
    def get_shrink_start_child(self) -> bool: ...
    def get_start_child(self) -> Widget | None: ...
    def get_wide_handle(self) -> bool: ...
    def set_end_child(self, child: Widget | None) -> None: ...
    def set_position(self, position: int) -> None: ...
    def set_resize_end_child(self, resize: bool) -> None: ...
    def set_resize_start_child(self, resize: bool) -> None: ...
    def set_shrink_end_child(self, resize: bool) -> None: ...
    def set_shrink_start_child(self, resize: bool) -> None: ...
    def set_start_child(self, child: Widget | None) -> None: ...
    def set_wide_handle(self, wide: bool) -> None: ...

class ParamSpecExpression(GObject.ParamSpec): ...

class PasswordEntry(Widget, Accessible, Buildable, ConstraintTarget, Editable): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_extra_menu(self) -> Gio.MenuModel | None: ...
    def get_show_peek_icon(self) -> bool: ...
    def set_extra_menu(self, model: Gio.MenuModel | None) -> None: ...
    def set_show_peek_icon(self, show_peek_icon: bool) -> None: ...

class PasswordEntryBuffer(EntryBuffer): 
    @classmethod
    def new(cls) -> EntryBuffer: ...

class Picture(Widget, Accessible, Buildable, ConstraintTarget): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_alternative_text(self) -> str | None: ...
    def get_can_shrink(self) -> bool: ...
    def get_content_fit(self) -> ContentFit: ...
    def get_file(self) -> Gio.File | None: ...
    def get_keep_aspect_ratio(self) -> bool: ...
    def get_paintable(self) -> Gdk.Paintable | None: ...
    def set_alternative_text(self, alternative_text: str | None) -> None: ...
    def set_can_shrink(self, can_shrink: bool) -> None: ...
    def set_content_fit(self, content_fit: ContentFit) -> None: ...
    def set_file(self, file: Gio.File | None) -> None: ...
    def set_filename(self, filename: filename | None) -> None: ...
    def set_keep_aspect_ratio(self, keep_aspect_ratio: bool) -> None: ...
    def set_paintable(self, paintable: Gdk.Paintable | None) -> None: ...
    def set_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf | None) -> None: ...
    def set_resource(self, resource_path: str | None) -> None: ...

class Popover(Widget, Accessible, Buildable, ConstraintTarget, Native, ShortcutManager): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_autohide(self) -> bool: ...
    def get_cascade_popdown(self) -> bool: ...
    def get_child(self) -> Widget | None: ...
    def get_has_arrow(self) -> bool: ...
    def get_mnemonics_visible(self) -> bool: ...
    def get_offset(self, x_offset: int | None, y_offset: int | None) -> None: ...
    def get_pointing_to(self, rect: Gdk.Rectangle) -> bool: ...
    def get_position(self) -> PositionType: ...
    def popdown(self) -> None: ...
    def popup(self) -> None: ...
    def present(self) -> None: ...
    def set_autohide(self, autohide: bool) -> None: ...
    def set_cascade_popdown(self, cascade_popdown: bool) -> None: ...
    def set_child(self, child: Widget | None) -> None: ...
    def set_default_widget(self, widget: Widget | None) -> None: ...
    def set_has_arrow(self, has_arrow: bool) -> None: ...
    def set_mnemonics_visible(self, mnemonics_visible: bool) -> None: ...
    def set_offset(self, x_offset: int, y_offset: int) -> None: ...
    def set_pointing_to(self, rect: Gdk.Rectangle | None) -> None: ...
    def set_position(self, position: PositionType) -> None: ...

class PopoverMenu(Popover, Accessible, Buildable, ConstraintTarget, Native, ShortcutManager): 
    @classmethod
    def new_from_model(cls, model: Gio.MenuModel | None) -> Widget: ...
    def add_child(self, child: Widget, id: str) -> bool: ...
    def get_menu_model(self) -> Gio.MenuModel | None: ...
    def remove_child(self, child: Widget) -> bool: ...
    def set_menu_model(self, model: Gio.MenuModel | None) -> None: ...

class PopoverMenuBar(Widget, Accessible, Buildable, ConstraintTarget): 
    @classmethod
    def new_from_model(cls, model: Gio.MenuModel | None) -> Widget: ...
    def add_child(self, child: Widget, id: str) -> bool: ...
    def get_menu_model(self) -> Gio.MenuModel | None: ...
    def remove_child(self, child: Widget) -> bool: ...
    def set_menu_model(self, model: Gio.MenuModel | None) -> None: ...

class PrintContext(GObject.Object): 
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self) -> Pango.Layout: ...
    def get_cairo_context(self) -> cairo.Context: ...
    def get_dpi_x(self) -> float: ...
    def get_dpi_y(self) -> float: ...
    def get_hard_margins(self, top: float, bottom: float, left: float, right: float) -> bool: ...
    def get_height(self) -> float: ...
    def get_page_setup(self) -> PageSetup: ...
    def get_pango_fontmap(self) -> Pango.FontMap: ...
    def get_width(self) -> float: ...
    def set_cairo_context(self, cr: cairo.Context, dpi_x: float, dpi_y: float) -> None: ...

class PrintJob(GObject.Object): 
    @classmethod
    def new(cls, title: str, printer: Printer, settings: PrintSettings, page_setup: PageSetup) -> PrintJob: ...
    def get_collate(self) -> bool: ...
    def get_n_up(self) -> int: ...
    def get_n_up_layout(self) -> NumberUpLayout: ...
    def get_num_copies(self) -> int: ...
    def get_page_ranges(self, n_ranges: int) -> list[PageRange]: ...
    def get_page_set(self) -> PageSet: ...
    def get_pages(self) -> PrintPages: ...
    def get_printer(self) -> Printer: ...
    def get_reverse(self) -> bool: ...
    def get_rotate(self) -> bool: ...
    def get_scale(self) -> float: ...
    def get_settings(self) -> PrintSettings: ...
    def get_status(self) -> PrintStatus: ...
    def get_surface(self) -> cairo.Surface: ...
    def get_title(self) -> str: ...
    def get_track_print_status(self) -> bool: ...
    def send(self, callback: PrintJobCompleteFunc, user_data: object | None, dnotify: GLib.DestroyNotify) -> None: ...
    def set_collate(self, collate: bool) -> None: ...
    def set_n_up(self, n_up: int) -> None: ...
    def set_n_up_layout(self, layout: NumberUpLayout) -> None: ...
    def set_num_copies(self, num_copies: int) -> None: ...
    def set_page_ranges(self, ranges: list[PageRange], n_ranges: int) -> None: ...
    def set_page_set(self, page_set: PageSet) -> None: ...
    def set_pages(self, pages: PrintPages) -> None: ...
    def set_reverse(self, reverse: bool) -> None: ...
    def set_rotate(self, rotate: bool) -> None: ...
    def set_scale(self, scale: float) -> None: ...
    def set_source_fd(self, fd: int) -> bool: ...
    def set_source_file(self, filename: filename) -> bool: ...
    def set_track_print_status(self, track_status: bool) -> None: ...

class PrintOperation(GObject.Object, PrintOperationPreview): 
    @classmethod
    def new(cls) -> PrintOperation: ...
    def cancel(self) -> None: ...
    def draw_page_finish(self) -> None: ...
    def get_default_page_setup(self) -> PageSetup: ...
    def get_embed_page_setup(self) -> bool: ...
    def get_error(self) -> None: ...
    def get_has_selection(self) -> bool: ...
    def get_n_pages_to_print(self) -> int: ...
    def get_print_settings(self) -> PrintSettings | None: ...
    def get_status(self) -> PrintStatus: ...
    def get_status_string(self) -> str: ...
    def get_support_selection(self) -> bool: ...
    def is_finished(self) -> bool: ...
    def run(self, action: PrintOperationAction, parent: Window | None) -> PrintOperationResult: ...
    def set_allow_async(self, allow_async: bool) -> None: ...
    def set_current_page(self, current_page: int) -> None: ...
    def set_custom_tab_label(self, label: str | None) -> None: ...
    def set_default_page_setup(self, default_page_setup: PageSetup | None) -> None: ...
    def set_defer_drawing(self) -> None: ...
    def set_embed_page_setup(self, embed: bool) -> None: ...
    def set_export_filename(self, filename: filename) -> None: ...
    def set_has_selection(self, has_selection: bool) -> None: ...
    def set_job_name(self, job_name: str) -> None: ...
    def set_n_pages(self, n_pages: int) -> None: ...
    def set_print_settings(self, print_settings: PrintSettings | None) -> None: ...
    def set_show_progress(self, show_progress: bool) -> None: ...
    def set_support_selection(self, support_selection: bool) -> None: ...
    def set_track_print_status(self, track_status: bool) -> None: ...
    def set_unit(self, unit: Unit) -> None: ...
    def set_use_full_page(self, full_page: bool) -> None: ...

class PrintSettings(GObject.Object): 
    @classmethod
    def new(cls) -> PrintSettings: ...
    def copy(self) -> PrintSettings: ...
    def foreach(self, func: PrintSettingsFunc, user_data: object | None) -> None: ...
    def get(self, key: str) -> str | None: ...
    def get_bool(self, key: str) -> bool: ...
    def get_collate(self) -> bool: ...
    def get_default_source(self) -> str | None: ...
    def get_dither(self) -> str | None: ...
    def get_double(self, key: str) -> float: ...
    def get_double_with_default(self, key: str, def: float) -> float: ...
    def get_duplex(self) -> PrintDuplex: ...
    def get_finishings(self) -> str | None: ...
    def get_int(self, key: str) -> int: ...
    def get_int_with_default(self, key: str, def: int) -> int: ...
    def get_length(self, key: str, unit: Unit) -> float: ...
    def get_media_type(self) -> str | None: ...
    def get_n_copies(self) -> int: ...
    def get_number_up(self) -> int: ...
    def get_number_up_layout(self) -> NumberUpLayout: ...
    def get_orientation(self) -> PageOrientation: ...
    def get_output_bin(self) -> str | None: ...
    def get_page_ranges(self, num_ranges: int) -> list[PageRange]: ...
    def get_page_set(self) -> PageSet: ...
    def get_paper_height(self, unit: Unit) -> float: ...
    def get_paper_size(self) -> PaperSize | None: ...
    def get_paper_width(self, unit: Unit) -> float: ...
    def get_print_pages(self) -> PrintPages: ...
    def get_printer(self) -> str | None: ...
    def get_printer_lpi(self) -> float: ...
    def get_quality(self) -> PrintQuality: ...
    def get_resolution(self) -> int: ...
    def get_resolution_x(self) -> int: ...
    def get_resolution_y(self) -> int: ...
    def get_reverse(self) -> bool: ...
    def get_scale(self) -> float: ...
    def get_use_color(self) -> bool: ...
    def has_key(self, key: str) -> bool: ...
    def load_file(self, file_name: filename) -> bool: ...
    def load_key_file(self, key_file: GLib.KeyFile, group_name: str | None) -> bool: ...
    def set(self, key: str, value: str | None) -> None: ...
    def set_bool(self, key: str, value: bool) -> None: ...
    def set_collate(self, collate: bool) -> None: ...
    def set_default_source(self, default_source: str) -> None: ...
    def set_dither(self, dither: str) -> None: ...
    def set_double(self, key: str, value: float) -> None: ...
    def set_duplex(self, duplex: PrintDuplex) -> None: ...
    def set_finishings(self, finishings: str) -> None: ...
    def set_int(self, key: str, value: int) -> None: ...
    def set_length(self, key: str, value: float, unit: Unit) -> None: ...
    def set_media_type(self, media_type: str) -> None: ...
    def set_n_copies(self, num_copies: int) -> None: ...
    def set_number_up(self, number_up: int) -> None: ...
    def set_number_up_layout(self, number_up_layout: NumberUpLayout) -> None: ...
    def set_orientation(self, orientation: PageOrientation) -> None: ...
    def set_output_bin(self, output_bin: str) -> None: ...
    def set_page_ranges(self, page_ranges: list[PageRange], num_ranges: int) -> None: ...
    def set_page_set(self, page_set: PageSet) -> None: ...
    def set_paper_height(self, height: float, unit: Unit) -> None: ...
    def set_paper_size(self, paper_size: PaperSize) -> None: ...
    def set_paper_width(self, width: float, unit: Unit) -> None: ...
    def set_print_pages(self, pages: PrintPages) -> None: ...
    def set_printer(self, printer: str) -> None: ...
    def set_printer_lpi(self, lpi: float) -> None: ...
    def set_quality(self, quality: PrintQuality) -> None: ...
    def set_resolution(self, resolution: int) -> None: ...
    def set_resolution_xy(self, resolution_x: int, resolution_y: int) -> None: ...
    def set_reverse(self, reverse: bool) -> None: ...
    def set_scale(self, scale: float) -> None: ...
    def set_use_color(self, use_color: bool) -> None: ...
    def to_file(self, file_name: filename) -> bool: ...
    def to_gvariant(self) -> GLib.Variant: ...
    def to_key_file(self, key_file: GLib.KeyFile, group_name: str | None) -> None: ...
    def unset(self, key: str) -> None: ...

class PrintUnixDialog(Dialog, Accessible, Buildable, ConstraintTarget, Native, Root, ShortcutManager): 
    @classmethod
    def new(cls, title: str | None, parent: Window | None) -> Widget: ...
    def add_custom_tab(self, child: Widget, tab_label: Widget) -> None: ...
    def get_current_page(self) -> int: ...
    def get_embed_page_setup(self) -> bool: ...
    def get_has_selection(self) -> bool: ...
    def get_manual_capabilities(self) -> PrintCapabilities: ...
    def get_page_setup(self) -> PageSetup: ...
    def get_page_setup_set(self) -> bool: ...
    def get_selected_printer(self) -> Printer | None: ...
    def get_settings(self) -> PrintSettings: ...
    def get_support_selection(self) -> bool: ...
    def set_current_page(self, current_page: int) -> None: ...
    def set_embed_page_setup(self, embed: bool) -> None: ...
    def set_has_selection(self, has_selection: bool) -> None: ...
    def set_manual_capabilities(self, capabilities: PrintCapabilities) -> None: ...
    def set_page_setup(self, page_setup: PageSetup) -> None: ...
    def set_settings(self, settings: PrintSettings | None) -> None: ...
    def set_support_selection(self, support_selection: bool) -> None: ...

class Printer(GObject.Object): 
    @classmethod
    def new(cls, name: str, backend: PrintBackend, virtual_: bool) -> Printer: ...
    def accepts_pdf(self) -> bool: ...
    def accepts_ps(self) -> bool: ...
    def compare(self, b: Printer) -> int: ...
    def get_backend(self) -> PrintBackend: ...
    def get_capabilities(self) -> PrintCapabilities: ...
    def get_default_page_size(self) -> PageSetup: ...
    def get_description(self) -> str: ...
    def get_hard_margins(self, top: float, bottom: float, left: float, right: float) -> bool: ...
    def get_hard_margins_for_paper_size(self, paper_size: PaperSize, top: float, bottom: float, left: float, right: float) -> bool: ...
    def get_icon_name(self) -> str: ...
    def get_job_count(self) -> int: ...
    def get_location(self) -> str: ...
    def get_name(self) -> str: ...
    def get_state_message(self) -> str: ...
    def has_details(self) -> bool: ...
    def is_accepting_jobs(self) -> bool: ...
    def is_active(self) -> bool: ...
    def is_default(self) -> bool: ...
    def is_paused(self) -> bool: ...
    def is_virtual(self) -> bool: ...
    def list_papers(self) -> GLib.List: ...
    def request_details(self) -> None: ...

class ProgressBar(Widget, Accessible, Buildable, ConstraintTarget, Orientable): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_ellipsize(self) -> Pango.EllipsizeMode: ...
    def get_fraction(self) -> float: ...
    def get_inverted(self) -> bool: ...
    def get_pulse_step(self) -> float: ...
    def get_show_text(self) -> bool: ...
    def get_text(self) -> str | None: ...
    def pulse(self) -> None: ...
    def set_ellipsize(self, mode: Pango.EllipsizeMode) -> None: ...
    def set_fraction(self, fraction: float) -> None: ...
    def set_inverted(self, inverted: bool) -> None: ...
    def set_pulse_step(self, fraction: float) -> None: ...
    def set_show_text(self, show_text: bool) -> None: ...
    def set_text(self, text: str | None) -> None: ...

class PropertyExpression(Expression): 
    @classmethod
    def new(cls, this_type: GObject.Type, expression: Expression | None, property_name: str) -> PropertyExpression: ...
    def get_expression(self) -> Expression | None: ...
    def get_pspec(self) -> GObject.ParamSpec: ...

class Range(Widget, Accessible, Buildable, ConstraintTarget, Orientable): 
    def get_adjustment(self) -> Adjustment: ...
    def get_fill_level(self) -> float: ...
    def get_flippable(self) -> bool: ...
    def get_inverted(self) -> bool: ...
    def get_range_rect(self, range_rect: Gdk.Rectangle) -> None: ...
    def get_restrict_to_fill_level(self) -> bool: ...
    def get_round_digits(self) -> int: ...
    def get_show_fill_level(self) -> bool: ...
    def get_slider_range(self, slider_start: int, slider_end: int) -> None: ...
    def get_slider_size_fixed(self) -> bool: ...
    def get_value(self) -> float: ...
    def set_adjustment(self, adjustment: Adjustment) -> None: ...
    def set_fill_level(self, fill_level: float) -> None: ...
    def set_flippable(self, flippable: bool) -> None: ...
    def set_increments(self, step: float, page: float) -> None: ...
    def set_inverted(self, setting: bool) -> None: ...
    def set_range(self, min: float, max: float) -> None: ...
    def set_restrict_to_fill_level(self, restrict_to_fill_level: bool) -> None: ...
    def set_round_digits(self, round_digits: int) -> None: ...
    def set_show_fill_level(self, show_fill_level: bool) -> None: ...
    def set_slider_size_fixed(self, size_fixed: bool) -> None: ...
    def set_value(self, value: float) -> None: ...

class RecentManager(GObject.Object): 
    @classmethod
    def new(cls) -> RecentManager: ...
    @classmethod
    def get_default(cls) -> RecentManager: ...
    def add_full(self, uri: str, recent_data: RecentData) -> bool: ...
    def add_item(self, uri: str) -> bool: ...
    def get_items(self) -> GLib.List: ...
    def has_item(self, uri: str) -> bool: ...
    def lookup_item(self, uri: str) -> RecentInfo | None: ...
    def move_item(self, uri: str, new_uri: str | None) -> bool: ...
    def purge_items(self) -> int: ...
    def remove_item(self, uri: str) -> bool: ...

class Revealer(Widget, Accessible, Buildable, ConstraintTarget): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_child(self) -> Widget | None: ...
    def get_child_revealed(self) -> bool: ...
    def get_reveal_child(self) -> bool: ...
    def get_transition_duration(self) -> int: ...
    def get_transition_type(self) -> RevealerTransitionType: ...
    def set_child(self, child: Widget | None) -> None: ...
    def set_reveal_child(self, reveal_child: bool) -> None: ...
    def set_transition_duration(self, duration: int) -> None: ...
    def set_transition_type(self, transition: RevealerTransitionType) -> None: ...

class Scale(Range, Accessible, Buildable, ConstraintTarget, Orientable): 
    @classmethod
    def new(cls, orientation: Orientation, adjustment: Adjustment | None) -> Widget: ...
    def add_mark(self, value: float, position: PositionType, markup: str | None) -> None: ...
    def clear_marks(self) -> None: ...
    def get_digits(self) -> int: ...
    def get_draw_value(self) -> bool: ...
    def get_has_origin(self) -> bool: ...
    def get_layout(self) -> Pango.Layout | None: ...
    def get_layout_offsets(self, x: int, y: int) -> None: ...
    def get_value_pos(self) -> PositionType: ...
    def set_digits(self, digits: int) -> None: ...
    def set_draw_value(self, draw_value: bool) -> None: ...
    def set_format_value_func(self, func: ScaleFormatValueFunc | None, user_data: object | None, destroy_notify: GLib.DestroyNotify | None) -> None: ...
    def set_has_origin(self, has_origin: bool) -> None: ...
    def set_value_pos(self, pos: PositionType) -> None: ...

class ScaleButton(Widget, Accessible, Buildable, ConstraintTarget, Orientable): 
    @classmethod
    def new(cls, min: float, max: float, step: float, icons: list[str] | None) -> Widget: ...
    def get_adjustment(self) -> Adjustment: ...
    def get_minus_button(self) -> Button: ...
    def get_plus_button(self) -> Button: ...
    def get_popup(self) -> Widget: ...
    def get_value(self) -> float: ...
    def set_adjustment(self, adjustment: Adjustment) -> None: ...
    def set_icons(self, icons: list[str]) -> None: ...
    def set_value(self, value: float) -> None: ...

class Scrollbar(Widget, Accessible, Buildable, ConstraintTarget, Orientable): 
    @classmethod
    def new(cls, orientation: Orientation, adjustment: Adjustment | None) -> Widget: ...
    def get_adjustment(self) -> Adjustment: ...
    def set_adjustment(self, adjustment: Adjustment | None) -> None: ...

class ScrolledWindow(Widget, Accessible, Buildable, ConstraintTarget): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_child(self) -> Widget | None: ...
    def get_hadjustment(self) -> Adjustment: ...
    def get_has_frame(self) -> bool: ...
    def get_hscrollbar(self) -> Widget: ...
    def get_kinetic_scrolling(self) -> bool: ...
    def get_max_content_height(self) -> int: ...
    def get_max_content_width(self) -> int: ...
    def get_min_content_height(self) -> int: ...
    def get_min_content_width(self) -> int: ...
    def get_overlay_scrolling(self) -> bool: ...
    def get_placement(self) -> CornerType: ...
    def get_policy(self, hscrollbar_policy: PolicyType, vscrollbar_policy: PolicyType) -> None: ...
    def get_propagate_natural_height(self) -> bool: ...
    def get_propagate_natural_width(self) -> bool: ...
    def get_vadjustment(self) -> Adjustment: ...
    def get_vscrollbar(self) -> Widget: ...
    def set_child(self, child: Widget | None) -> None: ...
    def set_hadjustment(self, hadjustment: Adjustment | None) -> None: ...
    def set_has_frame(self, has_frame: bool) -> None: ...
    def set_kinetic_scrolling(self, kinetic_scrolling: bool) -> None: ...
    def set_max_content_height(self, height: int) -> None: ...
    def set_max_content_width(self, width: int) -> None: ...
    def set_min_content_height(self, height: int) -> None: ...
    def set_min_content_width(self, width: int) -> None: ...
    def set_overlay_scrolling(self, overlay_scrolling: bool) -> None: ...
    def set_placement(self, window_placement: CornerType) -> None: ...
    def set_policy(self, hscrollbar_policy: PolicyType, vscrollbar_policy: PolicyType) -> None: ...
    def set_propagate_natural_height(self, propagate: bool) -> None: ...
    def set_propagate_natural_width(self, propagate: bool) -> None: ...
    def set_vadjustment(self, vadjustment: Adjustment | None) -> None: ...
    def unset_placement(self) -> None: ...

class SearchBar(Widget, Accessible, Buildable, ConstraintTarget): 
    @classmethod
    def new(cls) -> Widget: ...
    def connect_entry(self, entry: Editable) -> None: ...
    def get_child(self) -> Widget | None: ...
    def get_key_capture_widget(self) -> Widget | None: ...
    def get_search_mode(self) -> bool: ...
    def get_show_close_button(self) -> bool: ...
    def set_child(self, child: Widget | None) -> None: ...
    def set_key_capture_widget(self, widget: Widget | None) -> None: ...
    def set_search_mode(self, search_mode: bool) -> None: ...
    def set_show_close_button(self, visible: bool) -> None: ...

class SearchEntry(Widget, Accessible, Buildable, ConstraintTarget, Editable): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_key_capture_widget(self) -> Widget | None: ...
    def get_search_delay(self) -> int: ...
    def set_key_capture_widget(self, widget: Widget | None) -> None: ...
    def set_search_delay(self, delay: int) -> None: ...

class SelectionFilterModel(GObject.Object, Gio.ListModel): 
    @classmethod
    def new(cls, model: SelectionModel | None) -> SelectionFilterModel: ...
    def get_model(self) -> SelectionModel | None: ...
    def set_model(self, model: SelectionModel | None) -> None: ...

class Separator(Widget, Accessible, Buildable, ConstraintTarget, Orientable): 
    @classmethod
    def new(cls, orientation: Orientation) -> Widget: ...

class Settings(GObject.Object, StyleProvider): 
    @classmethod
    def get_default(cls) -> Settings | None: ...
    @classmethod
    def get_for_display(cls, display: Gdk.Display) -> Settings: ...
    def reset_property(self, name: str) -> None: ...

class Shortcut(GObject.Object): 
    @classmethod
    def new(cls, trigger: ShortcutTrigger | None, action: ShortcutAction | None) -> Shortcut: ...
    def get_action(self) -> ShortcutAction | None: ...
    def get_arguments(self) -> GLib.Variant | None: ...
    def get_trigger(self) -> ShortcutTrigger | None: ...
    def set_action(self, action: ShortcutAction | None) -> None: ...
    def set_arguments(self, args: GLib.Variant | None) -> None: ...
    def set_trigger(self, trigger: ShortcutTrigger | None) -> None: ...

class ShortcutAction(GObject.Object): 
    @classmethod
    def parse_string(cls, string: str) -> ShortcutAction | None: ...
    def activate(self, flags: ShortcutActionFlags, widget: Widget, args: GLib.Variant | None) -> bool: ...
    def print(self, string: GLib.String) -> None: ...
    def to_string(self) -> str: ...

class ShortcutController(EventController, Gio.ListModel, Buildable): 
    @classmethod
    def new(cls) -> EventController: ...
    def add_shortcut(self, shortcut: Shortcut) -> None: ...
    def get_mnemonics_modifiers(self) -> Gdk.ModifierType: ...
    def get_scope(self) -> ShortcutScope: ...
    def remove_shortcut(self, shortcut: Shortcut) -> None: ...
    def set_mnemonics_modifiers(self, modifiers: Gdk.ModifierType) -> None: ...
    def set_scope(self, scope: ShortcutScope) -> None: ...

class ShortcutLabel(Widget, Accessible, Buildable, ConstraintTarget): 
    @classmethod
    def new(cls, accelerator: str) -> Widget: ...
    def get_accelerator(self) -> str | None: ...
    def get_disabled_text(self) -> str | None: ...
    def set_accelerator(self, accelerator: str) -> None: ...
    def set_disabled_text(self, disabled_text: str) -> None: ...

class ShortcutTrigger(GObject.Object): 
    @classmethod
    def parse_string(cls, string: str) -> ShortcutTrigger | None: ...
    def compare(self, trigger2: ShortcutTrigger) -> int: ...
    def equal(self, trigger2: ShortcutTrigger) -> bool: ...
    def hash(self) -> int: ...
    def print(self, string: GLib.String) -> None: ...
    def print_label(self, display: Gdk.Display, string: GLib.String) -> bool: ...
    def to_label(self, display: Gdk.Display) -> str: ...
    def to_string(self) -> str: ...
    def trigger(self, event: Gdk.Event, enable_mnemonics: bool) -> Gdk.KeyMatch: ...

class ShortcutsGroup(Box, Accessible, Buildable, ConstraintTarget, Orientable): ...

class ShortcutsSection(Box, Accessible, Buildable, ConstraintTarget, Orientable): ...

class ShortcutsShortcut(Widget, Accessible, Buildable, ConstraintTarget): ...

class ShortcutsWindow(Window, Accessible, Buildable, ConstraintTarget, Native, Root, ShortcutManager): ...

class SignalAction(ShortcutAction): 
    @classmethod
    def new(cls, signal_name: str) -> SignalAction: ...
    def get_signal_name(self) -> str: ...

class SignalListItemFactory(ListItemFactory): 
    @classmethod
    def new(cls) -> ListItemFactory: ...

class SingleSelection(GObject.Object, Gio.ListModel, SelectionModel): 
    @classmethod
    def new(cls, model: Gio.ListModel | None) -> SingleSelection: ...
    def get_autoselect(self) -> bool: ...
    def get_can_unselect(self) -> bool: ...
    def get_model(self) -> Gio.ListModel | None: ...
    def get_selected(self) -> int: ...
    def get_selected_item(self) -> GObject.Object | None: ...
    def set_autoselect(self, autoselect: bool) -> None: ...
    def set_can_unselect(self, can_unselect: bool) -> None: ...
    def set_model(self, model: Gio.ListModel | None) -> None: ...
    def set_selected(self, position: int) -> None: ...

class SizeGroup(GObject.Object, Buildable): 
    @classmethod
    def new(cls, mode: SizeGroupMode) -> SizeGroup: ...
    def add_widget(self, widget: Widget) -> None: ...
    def get_mode(self) -> SizeGroupMode: ...
    def get_widgets(self) -> GLib.SList: ...
    def remove_widget(self, widget: Widget) -> None: ...
    def set_mode(self, mode: SizeGroupMode) -> None: ...

class SliceListModel(GObject.Object, Gio.ListModel): 
    @classmethod
    def new(cls, model: Gio.ListModel | None, offset: int, size: int) -> SliceListModel: ...
    def get_model(self) -> Gio.ListModel | None: ...
    def get_offset(self) -> int: ...
    def get_size(self) -> int: ...
    def set_model(self, model: Gio.ListModel | None) -> None: ...
    def set_offset(self, offset: int) -> None: ...
    def set_size(self, size: int) -> None: ...

class Snapshot(Gdk.Snapshot): 
    @classmethod
    def new(cls) -> Snapshot: ...
    def append_border(self, outline: Gsk.RoundedRect, border_width: list[float], border_color: list[Gdk.RGBA]) -> None: ...
    def append_cairo(self, bounds: Graphene.Rect) -> cairo.Context: ...
    def append_color(self, color: Gdk.RGBA, bounds: Graphene.Rect) -> None: ...
    def append_conic_gradient(self, bounds: Graphene.Rect, center: Graphene.Point, rotation: float, stops: list[Gsk.ColorStop], n_stops: gsize) -> None: ...
    def append_inset_shadow(self, outline: Gsk.RoundedRect, color: Gdk.RGBA, dx: float, dy: float, spread: float, blur_radius: float) -> None: ...
    def append_layout(self, layout: Pango.Layout, color: Gdk.RGBA) -> None: ...
    def append_linear_gradient(self, bounds: Graphene.Rect, start_point: Graphene.Point, end_point: Graphene.Point, stops: list[Gsk.ColorStop], n_stops: gsize) -> None: ...
    def append_node(self, node: Gsk.RenderNode) -> None: ...
    def append_outset_shadow(self, outline: Gsk.RoundedRect, color: Gdk.RGBA, dx: float, dy: float, spread: float, blur_radius: float) -> None: ...
    def append_radial_gradient(self, bounds: Graphene.Rect, center: Graphene.Point, hradius: float, vradius: float, start: float, end: float, stops: list[Gsk.ColorStop], n_stops: gsize) -> None: ...
    def append_repeating_linear_gradient(self, bounds: Graphene.Rect, start_point: Graphene.Point, end_point: Graphene.Point, stops: list[Gsk.ColorStop], n_stops: gsize) -> None: ...
    def append_repeating_radial_gradient(self, bounds: Graphene.Rect, center: Graphene.Point, hradius: float, vradius: float, start: float, end: float, stops: list[Gsk.ColorStop], n_stops: gsize) -> None: ...
    def append_texture(self, texture: Gdk.Texture, bounds: Graphene.Rect) -> None: ...
    def free_to_node(self) -> Gsk.RenderNode | None: ...
    def free_to_paintable(self, size: Graphene.Size | None) -> Gdk.Paintable | None: ...
    def gl_shader_pop_texture(self) -> None: ...
    def perspective(self, depth: float) -> None: ...
    def pop(self) -> None: ...
    def push_blend(self, blend_mode: Gsk.BlendMode) -> None: ...
    def push_blur(self, radius: float) -> None: ...
    def push_clip(self, bounds: Graphene.Rect) -> None: ...
    def push_color_matrix(self, color_matrix: Graphene.Matrix, color_offset: Graphene.Vec4) -> None: ...
    def push_cross_fade(self, progress: float) -> None: ...
    def push_debug(self, message: str) -> None: ...
    def push_gl_shader(self, shader: Gsk.GLShader, bounds: Graphene.Rect, take_args: GLib.Bytes) -> None: ...
    def push_opacity(self, opacity: float) -> None: ...
    def push_repeat(self, bounds: Graphene.Rect, child_bounds: Graphene.Rect | None) -> None: ...
    def push_rounded_clip(self, bounds: Gsk.RoundedRect) -> None: ...
    def push_shadow(self, shadow: list[Gsk.Shadow], n_shadows: gsize) -> None: ...
    def render_background(self, context: StyleContext, x: float, y: float, width: float, height: float) -> None: ...
    def render_focus(self, context: StyleContext, x: float, y: float, width: float, height: float) -> None: ...
    def render_frame(self, context: StyleContext, x: float, y: float, width: float, height: float) -> None: ...
    def render_insertion_cursor(self, context: StyleContext, x: float, y: float, layout: Pango.Layout, index: int, direction: Pango.Direction) -> None: ...
    def render_layout(self, context: StyleContext, x: float, y: float, layout: Pango.Layout) -> None: ...
    def restore(self) -> None: ...
    def rotate(self, angle: float) -> None: ...
    def rotate_3d(self, angle: float, axis: Graphene.Vec3) -> None: ...
    def save(self) -> None: ...
    def scale(self, factor_x: float, factor_y: float) -> None: ...
    def scale_3d(self, factor_x: float, factor_y: float, factor_z: float) -> None: ...
    def to_node(self) -> Gsk.RenderNode | None: ...
    def to_paintable(self, size: Graphene.Size | None) -> Gdk.Paintable | None: ...
    def transform(self, transform: Gsk.Transform | None) -> None: ...
    def transform_matrix(self, matrix: Graphene.Matrix) -> None: ...
    def translate(self, point: Graphene.Point) -> None: ...
    def translate_3d(self, point: Graphene.Point3D) -> None: ...

class SortListModel(GObject.Object, Gio.ListModel): 
    @classmethod
    def new(cls, model: Gio.ListModel | None, sorter: Sorter | None) -> SortListModel: ...
    def get_incremental(self) -> bool: ...
    def get_model(self) -> Gio.ListModel | None: ...
    def get_pending(self) -> int: ...
    def get_sorter(self) -> Sorter | None: ...
    def set_incremental(self, incremental: bool) -> None: ...
    def set_model(self, model: Gio.ListModel | None) -> None: ...
    def set_sorter(self, sorter: Sorter | None) -> None: ...

class Sorter(GObject.Object): 
    def changed(self, change: SorterChange) -> None: ...
    def compare(self, item1: GObject.Object, item2: GObject.Object) -> Ordering: ...
    def get_order(self) -> SorterOrder: ...

class SpinButton(Widget, Accessible, Buildable, CellEditable, ConstraintTarget, Editable, Orientable): 
    @classmethod
    def new(cls, adjustment: Adjustment | None, climb_rate: float, digits: int) -> Widget: ...
    def configure(self, adjustment: Adjustment | None, climb_rate: float, digits: int) -> None: ...
    def get_adjustment(self) -> Adjustment: ...
    def get_climb_rate(self) -> float: ...
    def get_digits(self) -> int: ...
    def get_increments(self, step: float, page: float) -> None: ...
    def get_numeric(self) -> bool: ...
    def get_range(self, min: float, max: float) -> None: ...
    def get_snap_to_ticks(self) -> bool: ...
    def get_update_policy(self) -> SpinButtonUpdatePolicy: ...
    def get_value(self) -> float: ...
    def get_value_as_int(self) -> int: ...
    def get_wrap(self) -> bool: ...
    def set_adjustment(self, adjustment: Adjustment) -> None: ...
    def set_climb_rate(self, climb_rate: float) -> None: ...
    def set_digits(self, digits: int) -> None: ...
    def set_increments(self, step: float, page: float) -> None: ...
    def set_numeric(self, numeric: bool) -> None: ...
    def set_range(self, min: float, max: float) -> None: ...
    def set_snap_to_ticks(self, snap_to_ticks: bool) -> None: ...
    def set_update_policy(self, policy: SpinButtonUpdatePolicy) -> None: ...
    def set_value(self, value: float) -> None: ...
    def set_wrap(self, wrap: bool) -> None: ...
    def spin(self, direction: SpinType, increment: float) -> None: ...
    def update(self) -> None: ...

class Spinner(Widget, Accessible, Buildable, ConstraintTarget): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_spinning(self) -> bool: ...
    def set_spinning(self, spinning: bool) -> None: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...

class Stack(Widget, Accessible, Buildable, ConstraintTarget): 
    @classmethod
    def new(cls) -> Widget: ...
    def add_child(self, child: Widget) -> StackPage: ...
    def add_named(self, child: Widget, name: str | None) -> StackPage: ...
    def add_titled(self, child: Widget, name: str | None, title: str) -> StackPage: ...
    def get_child_by_name(self, name: str) -> Widget | None: ...
    def get_hhomogeneous(self) -> bool: ...
    def get_interpolate_size(self) -> bool: ...
    def get_page(self, child: Widget) -> StackPage: ...
    def get_pages(self) -> SelectionModel: ...
    def get_transition_duration(self) -> int: ...
    def get_transition_running(self) -> bool: ...
    def get_transition_type(self) -> StackTransitionType: ...
    def get_vhomogeneous(self) -> bool: ...
    def get_visible_child(self) -> Widget | None: ...
    def get_visible_child_name(self) -> str | None: ...
    def remove(self, child: Widget) -> None: ...
    def set_hhomogeneous(self, hhomogeneous: bool) -> None: ...
    def set_interpolate_size(self, interpolate_size: bool) -> None: ...
    def set_transition_duration(self, duration: int) -> None: ...
    def set_transition_type(self, transition: StackTransitionType) -> None: ...
    def set_vhomogeneous(self, vhomogeneous: bool) -> None: ...
    def set_visible_child(self, child: Widget) -> None: ...
    def set_visible_child_full(self, name: str, transition: StackTransitionType) -> None: ...
    def set_visible_child_name(self, name: str) -> None: ...

class StackPage(GObject.Object, Accessible): 
    def get_child(self) -> Widget: ...
    def get_icon_name(self) -> str | None: ...
    def get_name(self) -> str | None: ...
    def get_needs_attention(self) -> bool: ...
    def get_title(self) -> str | None: ...
    def get_use_underline(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def set_icon_name(self, setting: str) -> None: ...
    def set_name(self, setting: str) -> None: ...
    def set_needs_attention(self, setting: bool) -> None: ...
    def set_title(self, setting: str) -> None: ...
    def set_use_underline(self, setting: bool) -> None: ...
    def set_visible(self, visible: bool) -> None: ...

class StackSidebar(Widget, Accessible, Buildable, ConstraintTarget): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_stack(self) -> Stack | None: ...
    def set_stack(self, stack: Stack) -> None: ...

class StackSwitcher(Widget, Accessible, Buildable, ConstraintTarget, Orientable): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_stack(self) -> Stack | None: ...
    def set_stack(self, stack: Stack | None) -> None: ...

class Statusbar(Widget, Accessible, Buildable, ConstraintTarget): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_context_id(self, context_description: str) -> int: ...
    def pop(self, context_id: int) -> None: ...
    def push(self, context_id: int, text: str) -> int: ...
    def remove(self, context_id: int, message_id: int) -> None: ...
    def remove_all(self, context_id: int) -> None: ...

class StringFilter(Filter): 
    @classmethod
    def new(cls, expression: Expression | None) -> StringFilter: ...
    def get_expression(self) -> Expression | None: ...
    def get_ignore_case(self) -> bool: ...
    def get_match_mode(self) -> StringFilterMatchMode: ...
    def get_search(self) -> str | None: ...
    def set_expression(self, expression: Expression | None) -> None: ...
    def set_ignore_case(self, ignore_case: bool) -> None: ...
    def set_match_mode(self, mode: StringFilterMatchMode) -> None: ...
    def set_search(self, search: str | None) -> None: ...

class StringList(GObject.Object, Gio.ListModel, Buildable): 
    @classmethod
    def new(cls, strings: list[str] | None) -> StringList: ...
    def append(self, string: str) -> None: ...
    def get_string(self, position: int) -> str | None: ...
    def remove(self, position: int) -> None: ...
    def splice(self, position: int, n_removals: int, additions: list[str] | None) -> None: ...
    def take(self, string: str) -> None: ...

class StringObject(GObject.Object): 
    @classmethod
    def new(cls, string: str) -> StringObject: ...
    def get_string(self) -> str: ...

class StringSorter(Sorter): 
    @classmethod
    def new(cls, expression: Expression | None) -> StringSorter: ...
    def get_expression(self) -> Expression | None: ...
    def get_ignore_case(self) -> bool: ...
    def set_expression(self, expression: Expression | None) -> None: ...
    def set_ignore_case(self, ignore_case: bool) -> None: ...

class StyleContext(GObject.Object): 
    @classmethod
    def add_provider_for_display(cls, display: Gdk.Display, provider: StyleProvider, priority: int) -> None: ...
    @classmethod
    def remove_provider_for_display(cls, display: Gdk.Display, provider: StyleProvider) -> None: ...
    def add_class(self, class_name: str) -> None: ...
    def add_provider(self, provider: StyleProvider, priority: int) -> None: ...
    def get_border(self, border: Border) -> None: ...
    def get_color(self, color: Gdk.RGBA) -> None: ...
    def get_display(self) -> Gdk.Display: ...
    def get_margin(self, margin: Border) -> None: ...
    def get_padding(self, padding: Border) -> None: ...
    def get_scale(self) -> int: ...
    def get_state(self) -> StateFlags: ...
    def has_class(self, class_name: str) -> bool: ...
    def lookup_color(self, color_name: str, color: Gdk.RGBA) -> bool: ...
    def remove_class(self, class_name: str) -> None: ...
    def remove_provider(self, provider: StyleProvider) -> None: ...
    def restore(self) -> None: ...
    def save(self) -> None: ...
    def set_display(self, display: Gdk.Display) -> None: ...
    def set_scale(self, scale: int) -> None: ...
    def set_state(self, flags: StateFlags) -> None: ...
    def to_string(self, flags: StyleContextPrintFlags) -> str: ...

class Switch(Widget, Accessible, Actionable, Buildable, ConstraintTarget): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_active(self) -> bool: ...
    def get_state(self) -> bool: ...
    def set_active(self, is_active: bool) -> None: ...
    def set_state(self, state: bool) -> None: ...

class Text(Widget, Accessible, Buildable, ConstraintTarget, Editable): 
    @classmethod
    def new(cls) -> Widget: ...
    def compute_cursor_extents(self, position: gsize, strong: Graphene.Rect, weak: Graphene.Rect) -> None: ...
    def get_activates_default(self) -> bool: ...
    def get_attributes(self) -> Pango.AttrList | None: ...
    def get_buffer(self) -> EntryBuffer: ...
    def get_enable_emoji_completion(self) -> bool: ...
    def get_extra_menu(self) -> Gio.MenuModel | None: ...
    def get_input_hints(self) -> InputHints: ...
    def get_input_purpose(self) -> InputPurpose: ...
    def get_invisible_char(self) -> gunichar: ...
    def get_max_length(self) -> int: ...
    def get_overwrite_mode(self) -> bool: ...
    def get_placeholder_text(self) -> str | None: ...
    def get_propagate_text_width(self) -> bool: ...
    def get_tabs(self) -> Pango.TabArray | None: ...
    def get_text_length(self) -> int: ...
    def get_truncate_multiline(self) -> bool: ...
    def get_visibility(self) -> bool: ...
    def grab_focus_without_selecting(self) -> bool: ...
    def set_activates_default(self, activates: bool) -> None: ...
    def set_attributes(self, attrs: Pango.AttrList | None) -> None: ...
    def set_buffer(self, buffer: EntryBuffer) -> None: ...
    def set_enable_emoji_completion(self, enable_emoji_completion: bool) -> None: ...
    def set_extra_menu(self, model: Gio.MenuModel | None) -> None: ...
    def set_input_hints(self, hints: InputHints) -> None: ...
    def set_input_purpose(self, purpose: InputPurpose) -> None: ...
    def set_invisible_char(self, ch: gunichar) -> None: ...
    def set_max_length(self, length: int) -> None: ...
    def set_overwrite_mode(self, overwrite: bool) -> None: ...
    def set_placeholder_text(self, text: str | None) -> None: ...
    def set_propagate_text_width(self, propagate_text_width: bool) -> None: ...
    def set_tabs(self, tabs: Pango.TabArray | None) -> None: ...
    def set_truncate_multiline(self, truncate_multiline: bool) -> None: ...
    def set_visibility(self, visible: bool) -> None: ...
    def unset_invisible_char(self) -> None: ...

class TextBuffer(GObject.Object): 
    @classmethod
    def new(cls, table: TextTagTable | None) -> TextBuffer: ...
    def add_mark(self, mark: TextMark, where: TextIter) -> None: ...
    def add_selection_clipboard(self, clipboard: Gdk.Clipboard) -> None: ...
    def apply_tag(self, tag: TextTag, start: TextIter, end: TextIter) -> None: ...
    def apply_tag_by_name(self, name: str, start: TextIter, end: TextIter) -> None: ...
    def backspace(self, iter: TextIter, interactive: bool, default_editable: bool) -> bool: ...
    def begin_irreversible_action(self) -> None: ...
    def begin_user_action(self) -> None: ...
    def copy_clipboard(self, clipboard: Gdk.Clipboard) -> None: ...
    def create_child_anchor(self, iter: TextIter) -> TextChildAnchor: ...
    def create_mark(self, mark_name: str | None, where: TextIter, left_gravity: bool) -> TextMark: ...
    def create_tag(self, tag_name: str | None, first_property_name: str | None) -> TextTag: ...
    def cut_clipboard(self, clipboard: Gdk.Clipboard, default_editable: bool) -> None: ...
    def delete(self, start: TextIter, end: TextIter) -> None: ...
    def delete_interactive(self, start_iter: TextIter, end_iter: TextIter, default_editable: bool) -> bool: ...
    def delete_mark(self, mark: TextMark) -> None: ...
    def delete_mark_by_name(self, name: str) -> None: ...
    def delete_selection(self, interactive: bool, default_editable: bool) -> bool: ...
    def end_irreversible_action(self) -> None: ...
    def end_user_action(self) -> None: ...
    def get_bounds(self, start: TextIter, end: TextIter) -> None: ...
    def get_can_redo(self) -> bool: ...
    def get_can_undo(self) -> bool: ...
    def get_char_count(self) -> int: ...
    def get_enable_undo(self) -> bool: ...
    def get_end_iter(self, iter: TextIter) -> None: ...
    def get_has_selection(self) -> bool: ...
    def get_insert(self) -> TextMark: ...
    def get_iter_at_child_anchor(self, iter: TextIter, anchor: TextChildAnchor) -> None: ...
    def get_iter_at_line(self, iter: TextIter, line_number: int) -> bool: ...
    def get_iter_at_line_index(self, iter: TextIter, line_number: int, byte_index: int) -> bool: ...
    def get_iter_at_line_offset(self, iter: TextIter, line_number: int, char_offset: int) -> bool: ...
    def get_iter_at_mark(self, iter: TextIter, mark: TextMark) -> None: ...
    def get_iter_at_offset(self, iter: TextIter, char_offset: int) -> None: ...
    def get_line_count(self) -> int: ...
    def get_mark(self, name: str) -> TextMark | None: ...
    def get_max_undo_levels(self) -> int: ...
    def get_modified(self) -> bool: ...
    def get_selection_bound(self) -> TextMark: ...
    def get_selection_bounds(self, start: TextIter, end: TextIter) -> bool: ...
    def get_selection_content(self) -> Gdk.ContentProvider: ...
    def get_slice(self, start: TextIter, end: TextIter, include_hidden_chars: bool) -> str: ...
    def get_start_iter(self, iter: TextIter) -> None: ...
    def get_tag_table(self) -> TextTagTable: ...
    def get_text(self, start: TextIter, end: TextIter, include_hidden_chars: bool) -> str: ...
    def insert(self, iter: TextIter, text: str, len: int) -> None: ...
    def insert_at_cursor(self, text: str, len: int) -> None: ...
    def insert_child_anchor(self, iter: TextIter, anchor: TextChildAnchor) -> None: ...
    def insert_interactive(self, iter: TextIter, text: str, len: int, default_editable: bool) -> bool: ...
    def insert_interactive_at_cursor(self, text: str, len: int, default_editable: bool) -> bool: ...
    def insert_markup(self, iter: TextIter, markup: str, len: int) -> None: ...
    def insert_paintable(self, iter: TextIter, paintable: Gdk.Paintable) -> None: ...
    def insert_range(self, iter: TextIter, start: TextIter, end: TextIter) -> None: ...
    def insert_range_interactive(self, iter: TextIter, start: TextIter, end: TextIter, default_editable: bool) -> bool: ...
    def insert_with_tags(self, iter: TextIter, text: str, len: int, first_tag: TextTag) -> None: ...
    def insert_with_tags_by_name(self, iter: TextIter, text: str, len: int, first_tag_name: str) -> None: ...
    def move_mark(self, mark: TextMark, where: TextIter) -> None: ...
    def move_mark_by_name(self, name: str, where: TextIter) -> None: ...
    def paste_clipboard(self, clipboard: Gdk.Clipboard, override_location: TextIter | None, default_editable: bool) -> None: ...
    def place_cursor(self, where: TextIter) -> None: ...
    def redo(self) -> None: ...
    def remove_all_tags(self, start: TextIter, end: TextIter) -> None: ...
    def remove_selection_clipboard(self, clipboard: Gdk.Clipboard) -> None: ...
    def remove_tag(self, tag: TextTag, start: TextIter, end: TextIter) -> None: ...
    def remove_tag_by_name(self, name: str, start: TextIter, end: TextIter) -> None: ...
    def select_range(self, ins: TextIter, bound: TextIter) -> None: ...
    def set_enable_undo(self, enable_undo: bool) -> None: ...
    def set_max_undo_levels(self, max_undo_levels: int) -> None: ...
    def set_modified(self, setting: bool) -> None: ...
    def set_text(self, text: str, len: int) -> None: ...
    def undo(self) -> None: ...

class TextChildAnchor(GObject.Object): 
    @classmethod
    def new(cls) -> TextChildAnchor: ...
    def get_deleted(self) -> bool: ...
    def get_widgets(self, out_len: int) -> list[Widget]: ...

class TextMark(GObject.Object): 
    @classmethod
    def new(cls, name: str | None, left_gravity: bool) -> TextMark: ...
    def get_buffer(self) -> TextBuffer | None: ...
    def get_deleted(self) -> bool: ...
    def get_left_gravity(self) -> bool: ...
    def get_name(self) -> str | None: ...
    def get_visible(self) -> bool: ...
    def set_visible(self, setting: bool) -> None: ...

class TextTag(GObject.Object): 
    @classmethod
    def new(cls, name: str | None) -> TextTag: ...
    def changed(self, size_changed: bool) -> None: ...
    def get_priority(self) -> int: ...
    def set_priority(self, priority: int) -> None: ...

class TextTagTable(GObject.Object, Buildable): 
    @classmethod
    def new(cls) -> TextTagTable: ...
    def add(self, tag: TextTag) -> bool: ...
    def foreach(self, func: TextTagTableForeach, data: object | None) -> None: ...
    def get_size(self) -> int: ...
    def lookup(self, name: str) -> TextTag | None: ...
    def remove(self, tag: TextTag) -> None: ...

class TextView(Widget, Accessible, Buildable, ConstraintTarget, Scrollable): 
    @classmethod
    def new(cls) -> Widget: ...
    def add_child_at_anchor(self, child: Widget, anchor: TextChildAnchor) -> None: ...
    def add_overlay(self, child: Widget, xpos: int, ypos: int) -> None: ...
    def backward_display_line(self, iter: TextIter) -> bool: ...
    def backward_display_line_start(self, iter: TextIter) -> bool: ...
    def buffer_to_window_coords(self, win: TextWindowType, buffer_x: int, buffer_y: int, window_x: int, window_y: int) -> None: ...
    def forward_display_line(self, iter: TextIter) -> bool: ...
    def forward_display_line_end(self, iter: TextIter) -> bool: ...
    def get_accepts_tab(self) -> bool: ...
    def get_bottom_margin(self) -> int: ...
    def get_buffer(self) -> TextBuffer: ...
    def get_cursor_locations(self, iter: TextIter | None, strong: Gdk.Rectangle, weak: Gdk.Rectangle) -> None: ...
    def get_cursor_visible(self) -> bool: ...
    def get_editable(self) -> bool: ...
    def get_extra_menu(self) -> Gio.MenuModel: ...
    def get_gutter(self, win: TextWindowType) -> Widget | None: ...
    def get_indent(self) -> int: ...
    def get_input_hints(self) -> InputHints: ...
    def get_input_purpose(self) -> InputPurpose: ...
    def get_iter_at_location(self, iter: TextIter, x: int, y: int) -> bool: ...
    def get_iter_at_position(self, iter: TextIter, trailing: int, x: int, y: int) -> bool: ...
    def get_iter_location(self, iter: TextIter, location: Gdk.Rectangle) -> None: ...
    def get_justification(self) -> Justification: ...
    def get_left_margin(self) -> int: ...
    def get_line_at_y(self, target_iter: TextIter, y: int, line_top: int) -> None: ...
    def get_line_yrange(self, iter: TextIter, y: int, height: int) -> None: ...
    def get_ltr_context(self) -> Pango.Context: ...
    def get_monospace(self) -> bool: ...
    def get_overwrite(self) -> bool: ...
    def get_pixels_above_lines(self) -> int: ...
    def get_pixels_below_lines(self) -> int: ...
    def get_pixels_inside_wrap(self) -> int: ...
    def get_right_margin(self) -> int: ...
    def get_rtl_context(self) -> Pango.Context: ...
    def get_tabs(self) -> Pango.TabArray | None: ...
    def get_top_margin(self) -> int: ...
    def get_visible_rect(self, visible_rect: Gdk.Rectangle) -> None: ...
    def get_wrap_mode(self) -> WrapMode: ...
    def im_context_filter_keypress(self, event: Gdk.Event) -> bool: ...
    def move_mark_onscreen(self, mark: TextMark) -> bool: ...
    def move_overlay(self, child: Widget, xpos: int, ypos: int) -> None: ...
    def move_visually(self, iter: TextIter, count: int) -> bool: ...
    def place_cursor_onscreen(self) -> bool: ...
    def remove(self, child: Widget) -> None: ...
    def reset_cursor_blink(self) -> None: ...
    def reset_im_context(self) -> None: ...
    def scroll_mark_onscreen(self, mark: TextMark) -> None: ...
    def scroll_to_iter(self, iter: TextIter, within_margin: float, use_align: bool, xalign: float, yalign: float) -> bool: ...
    def scroll_to_mark(self, mark: TextMark, within_margin: float, use_align: bool, xalign: float, yalign: float) -> None: ...
    def set_accepts_tab(self, accepts_tab: bool) -> None: ...
    def set_bottom_margin(self, bottom_margin: int) -> None: ...
    def set_buffer(self, buffer: TextBuffer | None) -> None: ...
    def set_cursor_visible(self, setting: bool) -> None: ...
    def set_editable(self, setting: bool) -> None: ...
    def set_extra_menu(self, model: Gio.MenuModel | None) -> None: ...
    def set_gutter(self, win: TextWindowType, widget: Widget | None) -> None: ...
    def set_indent(self, indent: int) -> None: ...
    def set_input_hints(self, hints: InputHints) -> None: ...
    def set_input_purpose(self, purpose: InputPurpose) -> None: ...
    def set_justification(self, justification: Justification) -> None: ...
    def set_left_margin(self, left_margin: int) -> None: ...
    def set_monospace(self, monospace: bool) -> None: ...
    def set_overwrite(self, overwrite: bool) -> None: ...
    def set_pixels_above_lines(self, pixels_above_lines: int) -> None: ...
    def set_pixels_below_lines(self, pixels_below_lines: int) -> None: ...
    def set_pixels_inside_wrap(self, pixels_inside_wrap: int) -> None: ...
    def set_right_margin(self, right_margin: int) -> None: ...
    def set_tabs(self, tabs: Pango.TabArray) -> None: ...
    def set_top_margin(self, top_margin: int) -> None: ...
    def set_wrap_mode(self, wrap_mode: WrapMode) -> None: ...
    def starts_display_line(self, iter: TextIter) -> bool: ...
    def window_to_buffer_coords(self, win: TextWindowType, window_x: int, window_y: int, buffer_x: int, buffer_y: int) -> None: ...

class ToggleButton(Button, Accessible, Actionable, Buildable, ConstraintTarget): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_active(self) -> bool: ...
    def set_active(self, is_active: bool) -> None: ...
    def set_group(self, group: ToggleButton | None) -> None: ...
    def toggled(self) -> None: ...

class Tooltip(GObject.Object): 
    def set_custom(self, custom_widget: Widget | None) -> None: ...
    def set_icon(self, paintable: Gdk.Paintable | None) -> None: ...
    def set_icon_from_gicon(self, gicon: Gio.Icon | None) -> None: ...
    def set_icon_from_icon_name(self, icon_name: str | None) -> None: ...
    def set_markup(self, markup: str | None) -> None: ...
    def set_text(self, text: str | None) -> None: ...
    def set_tip_area(self, rect: Gdk.Rectangle) -> None: ...

class TreeExpander(Widget, Accessible, Buildable, ConstraintTarget): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_child(self) -> Widget | None: ...
    def get_indent_for_icon(self) -> bool: ...
    def get_item(self) -> GObject.Object | None: ...
    def get_list_row(self) -> TreeListRow | None: ...
    def set_child(self, child: Widget | None) -> None: ...
    def set_indent_for_icon(self, indent_for_icon: bool) -> None: ...
    def set_list_row(self, list_row: TreeListRow | None) -> None: ...

class TreeListModel(GObject.Object, Gio.ListModel): 
    @classmethod
    def new(cls, root: Gio.ListModel, passthrough: bool, autoexpand: bool, create_func: TreeListModelCreateModelFunc, user_data: object | None, user_destroy: GLib.DestroyNotify) -> TreeListModel: ...
    def get_autoexpand(self) -> bool: ...
    def get_child_row(self, position: int) -> TreeListRow | None: ...
    def get_model(self) -> Gio.ListModel: ...
    def get_passthrough(self) -> bool: ...
    def get_row(self, position: int) -> TreeListRow | None: ...
    def set_autoexpand(self, autoexpand: bool) -> None: ...

class TreeListRow(GObject.Object): 
    def get_child_row(self, position: int) -> TreeListRow | None: ...
    def get_children(self) -> Gio.ListModel | None: ...
    def get_depth(self) -> int: ...
    def get_expanded(self) -> bool: ...
    def get_item(self) -> GObject.Object | None: ...
    def get_parent(self) -> TreeListRow | None: ...
    def get_position(self) -> int: ...
    def is_expandable(self) -> bool: ...
    def set_expanded(self, expanded: bool) -> None: ...

class TreeListRowSorter(Sorter): 
    @classmethod
    def new(cls, sorter: Sorter | None) -> TreeListRowSorter: ...
    def get_sorter(self) -> Sorter | None: ...
    def set_sorter(self, sorter: Sorter | None) -> None: ...

class TreeModelFilter(GObject.Object, TreeDragSource, TreeModel): 
    def clear_cache(self) -> None: ...
    def convert_child_iter_to_iter(self, filter_iter: TreeIter, child_iter: TreeIter) -> bool: ...
    def convert_child_path_to_path(self, child_path: TreePath) -> TreePath | None: ...
    def convert_iter_to_child_iter(self, child_iter: TreeIter, filter_iter: TreeIter) -> None: ...
    def convert_path_to_child_path(self, filter_path: TreePath) -> TreePath | None: ...
    def get_model(self) -> TreeModel: ...
    def refilter(self) -> None: ...
    def set_modify_func(self, n_columns: int, types: list[GObject.Type], func: TreeModelFilterModifyFunc, data: object | None, destroy: GLib.DestroyNotify | None) -> None: ...
    def set_visible_column(self, column: int) -> None: ...
    def set_visible_func(self, func: TreeModelFilterVisibleFunc, data: object | None, destroy: GLib.DestroyNotify | None) -> None: ...

class TreeModelSort(GObject.Object, TreeDragSource, TreeModel, TreeSortable): 
    @classmethod
    def new_with_model(cls, child_model: TreeModel) -> TreeModelSort: ...
    def clear_cache(self) -> None: ...
    def convert_child_iter_to_iter(self, sort_iter: TreeIter, child_iter: TreeIter) -> bool: ...
    def convert_child_path_to_path(self, child_path: TreePath) -> TreePath | None: ...
    def convert_iter_to_child_iter(self, child_iter: TreeIter, sorted_iter: TreeIter) -> None: ...
    def convert_path_to_child_path(self, sorted_path: TreePath) -> TreePath | None: ...
    def get_model(self) -> TreeModel: ...
    def iter_is_valid(self, iter: TreeIter) -> bool: ...
    def reset_default_sort_func(self) -> None: ...

class TreeSelection(GObject.Object): 
    def count_selected_rows(self) -> int: ...
    def get_mode(self) -> SelectionMode: ...
    def get_select_function(self) -> TreeSelectionFunc: ...
    def get_selected(self, model: TreeModel, iter: TreeIter) -> bool: ...
    def get_selected_rows(self, model: TreeModel) -> GLib.List: ...
    def get_tree_view(self) -> TreeView: ...
    def get_user_data(self) -> object | None: ...
    def iter_is_selected(self, iter: TreeIter) -> bool: ...
    def path_is_selected(self, path: TreePath) -> bool: ...
    def select_all(self) -> None: ...
    def select_iter(self, iter: TreeIter) -> None: ...
    def select_path(self, path: TreePath) -> None: ...
    def select_range(self, start_path: TreePath, end_path: TreePath) -> None: ...
    def selected_foreach(self, func: TreeSelectionForeachFunc, data: object | None) -> None: ...
    def set_mode(self, type: SelectionMode) -> None: ...
    def set_select_function(self, func: TreeSelectionFunc | None, data: object | None, destroy: GLib.DestroyNotify) -> None: ...
    def unselect_all(self) -> None: ...
    def unselect_iter(self, iter: TreeIter) -> None: ...
    def unselect_path(self, path: TreePath) -> None: ...
    def unselect_range(self, start_path: TreePath, end_path: TreePath) -> None: ...

class TreeStore(GObject.Object, Buildable, TreeDragDest, TreeDragSource, TreeModel, TreeSortable): 
    @classmethod
    def new(cls, n_columns: int) -> TreeStore: ...
    def append(self, iter: TreeIter, parent: TreeIter | None) -> None: ...
    def clear(self) -> None: ...
    def insert(self, iter: TreeIter, parent: TreeIter | None, position: int) -> None: ...
    def insert_after(self, iter: TreeIter, parent: TreeIter | None, sibling: TreeIter | None) -> None: ...
    def insert_before(self, iter: TreeIter, parent: TreeIter | None, sibling: TreeIter | None) -> None: ...
    def insert_with_values(self, iter: TreeIter, parent: TreeIter | None, position: int) -> None: ...
    def insert_with_valuesv(self, iter: TreeIter, parent: TreeIter | None, position: int, columns: list[int], values: list[GObject.Value], n_values: int) -> None: ...
    def is_ancestor(self, iter: TreeIter, descendant: TreeIter) -> bool: ...
    def iter_depth(self, iter: TreeIter) -> int: ...
    def iter_is_valid(self, iter: TreeIter) -> bool: ...
    def move_after(self, iter: TreeIter, position: TreeIter | None) -> None: ...
    def move_before(self, iter: TreeIter, position: TreeIter | None) -> None: ...
    def prepend(self, iter: TreeIter, parent: TreeIter | None) -> None: ...
    def remove(self, iter: TreeIter) -> bool: ...
    def reorder(self, parent: TreeIter | None, new_order: list[int]) -> None: ...
    def set(self, iter: TreeIter) -> None: ...
    def set_column_types(self, n_columns: int, types: list[GObject.Type]) -> None: ...
    def set_valist(self, iter: TreeIter, var_args: va_list) -> None: ...
    def set_value(self, iter: TreeIter, column: int, value: GObject.Value) -> None: ...
    def set_valuesv(self, iter: TreeIter, columns: list[int], values: list[GObject.Value], n_values: int) -> None: ...
    def swap(self, a: TreeIter, b: TreeIter) -> None: ...

class TreeView(Widget, Accessible, Buildable, ConstraintTarget, Scrollable): 
    @classmethod
    def new(cls) -> Widget: ...
    def append_column(self, column: TreeViewColumn) -> int: ...
    def collapse_all(self) -> None: ...
    def collapse_row(self, path: TreePath) -> bool: ...
    def columns_autosize(self) -> None: ...
    def convert_bin_window_to_tree_coords(self, bx: int, by: int, tx: int, ty: int) -> None: ...
    def convert_bin_window_to_widget_coords(self, bx: int, by: int, wx: int, wy: int) -> None: ...
    def convert_tree_to_bin_window_coords(self, tx: int, ty: int, bx: int, by: int) -> None: ...
    def convert_tree_to_widget_coords(self, tx: int, ty: int, wx: int, wy: int) -> None: ...
    def convert_widget_to_bin_window_coords(self, wx: int, wy: int, bx: int, by: int) -> None: ...
    def convert_widget_to_tree_coords(self, wx: int, wy: int, tx: int, ty: int) -> None: ...
    def create_row_drag_icon(self, path: TreePath) -> Gdk.Paintable | None: ...
    def enable_model_drag_dest(self, formats: Gdk.ContentFormats, actions: Gdk.DragAction) -> None: ...
    def enable_model_drag_source(self, start_button_mask: Gdk.ModifierType, formats: Gdk.ContentFormats, actions: Gdk.DragAction) -> None: ...
    def expand_all(self) -> None: ...
    def expand_row(self, path: TreePath, open_all: bool) -> bool: ...
    def expand_to_path(self, path: TreePath) -> None: ...
    def get_activate_on_single_click(self) -> bool: ...
    def get_background_area(self, path: TreePath | None, column: TreeViewColumn | None, rect: Gdk.Rectangle) -> None: ...
    def get_cell_area(self, path: TreePath | None, column: TreeViewColumn | None, rect: Gdk.Rectangle) -> None: ...
    def get_column(self, n: int) -> TreeViewColumn | None: ...
    def get_columns(self) -> GLib.List: ...
    def get_cursor(self, path: TreePath | None, focus_column: TreeViewColumn | None) -> None: ...
    def get_dest_row_at_pos(self, drag_x: int, drag_y: int, path: TreePath | None, pos: TreeViewDropPosition) -> bool: ...
    def get_drag_dest_row(self, path: TreePath | None, pos: TreeViewDropPosition) -> None: ...
    def get_enable_search(self) -> bool: ...
    def get_enable_tree_lines(self) -> bool: ...
    def get_expander_column(self) -> TreeViewColumn | None: ...
    def get_fixed_height_mode(self) -> bool: ...
    def get_grid_lines(self) -> TreeViewGridLines: ...
    def get_headers_clickable(self) -> bool: ...
    def get_headers_visible(self) -> bool: ...
    def get_hover_expand(self) -> bool: ...
    def get_hover_selection(self) -> bool: ...
    def get_level_indentation(self) -> int: ...
    def get_model(self) -> TreeModel | None: ...
    def get_n_columns(self) -> int: ...
    def get_path_at_pos(self, x: int, y: int, path: TreePath | None, column: TreeViewColumn | None, cell_x: int, cell_y: int) -> bool: ...
    def get_reorderable(self) -> bool: ...
    def get_row_separator_func(self) -> TreeViewRowSeparatorFunc: ...
    def get_rubber_banding(self) -> bool: ...
    def get_search_column(self) -> int: ...
    def get_search_entry(self) -> Editable | None: ...
    def get_search_equal_func(self) -> TreeViewSearchEqualFunc: ...
    def get_selection(self) -> TreeSelection: ...
    def get_show_expanders(self) -> bool: ...
    def get_tooltip_column(self) -> int: ...
    def get_tooltip_context(self, x: int, y: int, keyboard_tip: bool, model: TreeModel | None, path: TreePath, iter: TreeIter) -> bool: ...
    def get_visible_range(self, start_path: TreePath, end_path: TreePath) -> bool: ...
    def get_visible_rect(self, visible_rect: Gdk.Rectangle) -> None: ...
    def insert_column(self, column: TreeViewColumn, position: int) -> int: ...
    def insert_column_with_attributes(self, position: int, title: str, cell: CellRenderer) -> int: ...
    def insert_column_with_data_func(self, position: int, title: str, cell: CellRenderer, func: TreeCellDataFunc, data: object | None, dnotify: GLib.DestroyNotify) -> int: ...
    def is_blank_at_pos(self, x: int, y: int, path: TreePath | None, column: TreeViewColumn | None, cell_x: int, cell_y: int) -> bool: ...
    def is_rubber_banding_active(self) -> bool: ...
    def map_expanded_rows(self, func: TreeViewMappingFunc, data: object | None) -> None: ...
    def move_column_after(self, column: TreeViewColumn, base_column: TreeViewColumn | None) -> None: ...
    def remove_column(self, column: TreeViewColumn) -> int: ...
    def row_activated(self, path: TreePath, column: TreeViewColumn | None) -> None: ...
    def row_expanded(self, path: TreePath) -> bool: ...
    def scroll_to_cell(self, path: TreePath | None, column: TreeViewColumn | None, use_align: bool, row_align: float, col_align: float) -> None: ...
    def scroll_to_point(self, tree_x: int, tree_y: int) -> None: ...
    def set_activate_on_single_click(self, single: bool) -> None: ...
    def set_column_drag_function(self, func: TreeViewColumnDropFunc | None, user_data: object | None, destroy: GLib.DestroyNotify | None) -> None: ...
    def set_cursor(self, path: TreePath, focus_column: TreeViewColumn | None, start_editing: bool) -> None: ...
    def set_cursor_on_cell(self, path: TreePath, focus_column: TreeViewColumn | None, focus_cell: CellRenderer | None, start_editing: bool) -> None: ...
    def set_drag_dest_row(self, path: TreePath | None, pos: TreeViewDropPosition) -> None: ...
    def set_enable_search(self, enable_search: bool) -> None: ...
    def set_enable_tree_lines(self, enabled: bool) -> None: ...
    def set_expander_column(self, column: TreeViewColumn | None) -> None: ...
    def set_fixed_height_mode(self, enable: bool) -> None: ...
    def set_grid_lines(self, grid_lines: TreeViewGridLines) -> None: ...
    def set_headers_clickable(self, setting: bool) -> None: ...
    def set_headers_visible(self, headers_visible: bool) -> None: ...
    def set_hover_expand(self, expand: bool) -> None: ...
    def set_hover_selection(self, hover: bool) -> None: ...
    def set_level_indentation(self, indentation: int) -> None: ...
    def set_model(self, model: TreeModel | None) -> None: ...
    def set_reorderable(self, reorderable: bool) -> None: ...
    def set_row_separator_func(self, func: TreeViewRowSeparatorFunc | None, data: object | None, destroy: GLib.DestroyNotify | None) -> None: ...
    def set_rubber_banding(self, enable: bool) -> None: ...
    def set_search_column(self, column: int) -> None: ...
    def set_search_entry(self, entry: Editable | None) -> None: ...
    def set_search_equal_func(self, search_equal_func: TreeViewSearchEqualFunc, search_user_data: object | None, search_destroy: GLib.DestroyNotify | None) -> None: ...
    def set_show_expanders(self, enabled: bool) -> None: ...
    def set_tooltip_cell(self, tooltip: Tooltip, path: TreePath | None, column: TreeViewColumn | None, cell: CellRenderer | None) -> None: ...
    def set_tooltip_column(self, column: int) -> None: ...
    def set_tooltip_row(self, tooltip: Tooltip, path: TreePath) -> None: ...
    def unset_rows_drag_dest(self) -> None: ...
    def unset_rows_drag_source(self) -> None: ...

class TreeViewColumn(GObject.InitiallyUnowned, Buildable, CellLayout): 
    @classmethod
    def new(cls) -> TreeViewColumn: ...
    def add_attribute(self, cell_renderer: CellRenderer, attribute: str, column: int) -> None: ...
    def cell_get_position(self, cell_renderer: CellRenderer, x_offset: int, width: int) -> bool: ...
    def cell_get_size(self, x_offset: int, y_offset: int, width: int, height: int) -> None: ...
    def cell_is_visible(self) -> bool: ...
    def cell_set_cell_data(self, tree_model: TreeModel, iter: TreeIter, is_expander: bool, is_expanded: bool) -> None: ...
    def clear(self) -> None: ...
    def clear_attributes(self, cell_renderer: CellRenderer) -> None: ...
    def clicked(self) -> None: ...
    def focus_cell(self, cell: CellRenderer) -> None: ...
    def get_alignment(self) -> float: ...
    def get_button(self) -> Widget: ...
    def get_clickable(self) -> bool: ...
    def get_expand(self) -> bool: ...
    def get_fixed_width(self) -> int: ...
    def get_max_width(self) -> int: ...
    def get_min_width(self) -> int: ...
    def get_reorderable(self) -> bool: ...
    def get_resizable(self) -> bool: ...
    def get_sizing(self) -> TreeViewColumnSizing: ...
    def get_sort_column_id(self) -> int: ...
    def get_sort_indicator(self) -> bool: ...
    def get_sort_order(self) -> SortType: ...
    def get_spacing(self) -> int: ...
    def get_title(self) -> str: ...
    def get_tree_view(self) -> Widget | None: ...
    def get_visible(self) -> bool: ...
    def get_widget(self) -> Widget | None: ...
    def get_width(self) -> int: ...
    def get_x_offset(self) -> int: ...
    def pack_end(self, cell: CellRenderer, expand: bool) -> None: ...
    def pack_start(self, cell: CellRenderer, expand: bool) -> None: ...
    def queue_resize(self) -> None: ...
    def set_alignment(self, xalign: float) -> None: ...
    def set_attributes(self, cell_renderer: CellRenderer) -> None: ...
    def set_cell_data_func(self, cell_renderer: CellRenderer, func: TreeCellDataFunc | None, func_data: object | None, destroy: GLib.DestroyNotify) -> None: ...
    def set_clickable(self, clickable: bool) -> None: ...
    def set_expand(self, expand: bool) -> None: ...
    def set_fixed_width(self, fixed_width: int) -> None: ...
    def set_max_width(self, max_width: int) -> None: ...
    def set_min_width(self, min_width: int) -> None: ...
    def set_reorderable(self, reorderable: bool) -> None: ...
    def set_resizable(self, resizable: bool) -> None: ...
    def set_sizing(self, type: TreeViewColumnSizing) -> None: ...
    def set_sort_column_id(self, sort_column_id: int) -> None: ...
    def set_sort_indicator(self, setting: bool) -> None: ...
    def set_sort_order(self, order: SortType) -> None: ...
    def set_spacing(self, spacing: int) -> None: ...
    def set_title(self, title: str) -> None: ...
    def set_visible(self, visible: bool) -> None: ...
    def set_widget(self, widget: Widget | None) -> None: ...

class Video(Widget, Accessible, Buildable, ConstraintTarget): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_autoplay(self) -> bool: ...
    def get_file(self) -> Gio.File | None: ...
    def get_loop(self) -> bool: ...
    def get_media_stream(self) -> MediaStream | None: ...
    def set_autoplay(self, autoplay: bool) -> None: ...
    def set_file(self, file: Gio.File | None) -> None: ...
    def set_filename(self, filename: filename | None) -> None: ...
    def set_loop(self, loop: bool) -> None: ...
    def set_media_stream(self, stream: MediaStream | None) -> None: ...
    def set_resource(self, resource_path: str | None) -> None: ...

class Viewport(Widget, Accessible, Buildable, ConstraintTarget, Scrollable): 
    @classmethod
    def new(cls, hadjustment: Adjustment | None, vadjustment: Adjustment | None) -> Widget: ...
    def get_child(self) -> Widget | None: ...
    def get_scroll_to_focus(self) -> bool: ...
    def set_child(self, child: Widget | None) -> None: ...
    def set_scroll_to_focus(self, scroll_to_focus: bool) -> None: ...

class VolumeButton(ScaleButton, Accessible, Buildable, ConstraintTarget, Orientable): 
    @classmethod
    def new(cls) -> Widget: ...

class Widget(GObject.InitiallyUnowned, Accessible, Buildable, ConstraintTarget): 
    @classmethod
    def get_default_direction(cls) -> TextDirection: ...
    @classmethod
    def set_default_direction(cls, dir: TextDirection) -> None: ...
    def action_set_enabled(self, action_name: str, enabled: bool) -> None: ...
    def activate(self) -> bool: ...
    def activate_action(self, name: str, format_string: str) -> bool: ...
    def activate_action_variant(self, name: str, args: GLib.Variant | None) -> bool: ...
    def activate_default(self) -> None: ...
    def add_controller(self, controller: EventController) -> None: ...
    def add_css_class(self, css_class: str) -> None: ...
    def add_mnemonic_label(self, label: Widget) -> None: ...
    def add_tick_callback(self, callback: TickCallback, user_data: object | None, notify: GLib.DestroyNotify) -> int: ...
    def allocate(self, width: int, height: int, baseline: int, transform: Gsk.Transform | None) -> None: ...
    def child_focus(self, direction: DirectionType) -> bool: ...
    def compute_bounds(self, target: Widget, out_bounds: Graphene.Rect) -> bool: ...
    def compute_expand(self, orientation: Orientation) -> bool: ...
    def compute_point(self, target: Widget, point: Graphene.Point, out_point: Graphene.Point) -> bool: ...
    def compute_transform(self, target: Widget, out_transform: Graphene.Matrix) -> bool: ...
    def contains(self, x: float, y: float) -> bool: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str | None) -> Pango.Layout: ...
    def dispose_template(self, widget_type: GObject.Type) -> None: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def error_bell(self) -> None: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self, allocation: Allocation) -> None: ...
    def get_ancestor(self, widget_type: GObject.Type) -> Widget | None: ...
    def get_can_focus(self) -> bool: ...
    def get_can_target(self) -> bool: ...
    def get_child_visible(self) -> bool: ...
    def get_clipboard(self) -> Gdk.Clipboard: ...
    def get_css_classes(self) -> list[str]: ...
    def get_css_name(self) -> str: ...
    def get_cursor(self) -> Gdk.Cursor | None: ...
    def get_direction(self) -> TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_first_child(self) -> Widget | None: ...
    def get_focus_child(self) -> Widget | None: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focusable(self) -> bool: ...
    def get_font_map(self) -> Pango.FontMap | None: ...
    def get_font_options(self) -> cairo.FontOptions | None: ...
    def get_frame_clock(self) -> Gdk.FrameClock | None: ...
    def get_halign(self) -> Align: ...
    def get_has_tooltip(self) -> bool: ...
    def get_height(self) -> int: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_last_child(self) -> Widget | None: ...
    def get_layout_manager(self) -> LayoutManager | None: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_name(self) -> str: ...
    def get_native(self) -> Native | None: ...
    def get_next_sibling(self) -> Widget | None: ...
    def get_opacity(self) -> float: ...
    def get_overflow(self) -> Overflow: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Widget | None: ...
    def get_preferred_size(self, minimum_size: Requisition, natural_size: Requisition) -> None: ...
    def get_prev_sibling(self) -> Widget | None: ...
    def get_primary_clipboard(self) -> Gdk.Clipboard: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> SizeRequestMode: ...
    def get_root(self) -> Root | None: ...
    def get_scale_factor(self) -> int: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Settings: ...
    def get_size(self, orientation: Orientation) -> int: ...
    def get_size_request(self, width: int, height: int) -> None: ...
    def get_state_flags(self) -> StateFlags: ...
    def get_style_context(self) -> StyleContext: ...
    def get_template_child(self, widget_type: GObject.Type, name: str) -> GObject.Object: ...
    def get_tooltip_markup(self) -> str | None: ...
    def get_tooltip_text(self) -> str | None: ...
    def get_valign(self) -> Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_width(self) -> int: ...
    def grab_focus(self) -> bool: ...
    def has_css_class(self, css_class: str) -> bool: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def in_destruction(self) -> bool: ...
    def init_template(self) -> None: ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup | None) -> None: ...
    def insert_after(self, parent: Widget, previous_sibling: Widget | None) -> None: ...
    def insert_before(self, parent: Widget, next_sibling: Widget | None) -> None: ...
    def is_ancestor(self, ancestor: Widget) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: DirectionType) -> bool: ...
    def list_mnemonic_labels(self) -> GLib.List: ...
    def map(self) -> None: ...
    def measure(self, orientation: Orientation, for_size: int, minimum: int, natural: int, minimum_baseline: int, natural_baseline: int) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def observe_children(self) -> Gio.ListModel: ...
    def observe_controllers(self) -> Gio.ListModel: ...
    def pick(self, x: float, y: float, flags: PickFlags) -> Widget | None: ...
    def queue_allocate(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_resize(self) -> None: ...
    def realize(self) -> None: ...
    def remove_controller(self, controller: EventController) -> None: ...
    def remove_css_class(self, css_class: str) -> None: ...
    def remove_mnemonic_label(self, label: Widget) -> None: ...
    def remove_tick_callback(self, id: int) -> None: ...
    def set_can_focus(self, can_focus: bool) -> None: ...
    def set_can_target(self, can_target: bool) -> None: ...
    def set_child_visible(self, child_visible: bool) -> None: ...
    def set_css_classes(self, classes: list[str]) -> None: ...
    def set_cursor(self, cursor: Gdk.Cursor | None) -> None: ...
    def set_cursor_from_name(self, name: str | None) -> None: ...
    def set_direction(self, dir: TextDirection) -> None: ...
    def set_focus_child(self, child: Widget | None) -> None: ...
    def set_focus_on_click(self, focus_on_click: bool) -> None: ...
    def set_focusable(self, focusable: bool) -> None: ...
    def set_font_map(self, font_map: Pango.FontMap | None) -> None: ...
    def set_font_options(self, options: cairo.FontOptions | None) -> None: ...
    def set_halign(self, align: Align) -> None: ...
    def set_has_tooltip(self, has_tooltip: bool) -> None: ...
    def set_hexpand(self, expand: bool) -> None: ...
    def set_hexpand_set(self, set: bool) -> None: ...
    def set_layout_manager(self, layout_manager: LayoutManager | None) -> None: ...
    def set_margin_bottom(self, margin: int) -> None: ...
    def set_margin_end(self, margin: int) -> None: ...
    def set_margin_start(self, margin: int) -> None: ...
    def set_margin_top(self, margin: int) -> None: ...
    def set_name(self, name: str) -> None: ...
    def set_opacity(self, opacity: float) -> None: ...
    def set_overflow(self, overflow: Overflow) -> None: ...
    def set_parent(self, parent: Widget) -> None: ...
    def set_receives_default(self, receives_default: bool) -> None: ...
    def set_sensitive(self, sensitive: bool) -> None: ...
    def set_size_request(self, width: int, height: int) -> None: ...
    def set_state_flags(self, flags: StateFlags, clear: bool) -> None: ...
    def set_tooltip_markup(self, markup: str | None) -> None: ...
    def set_tooltip_text(self, text: str | None) -> None: ...
    def set_valign(self, align: Align) -> None: ...
    def set_vexpand(self, expand: bool) -> None: ...
    def set_vexpand_set(self, set: bool) -> None: ...
    def set_visible(self, visible: bool) -> None: ...
    def should_layout(self) -> bool: ...
    def show(self) -> None: ...
    def size_allocate(self, allocation: Allocation, baseline: int) -> None: ...
    def snapshot_child(self, child: Widget, snapshot: Snapshot) -> None: ...
    def translate_coordinates(self, dest_widget: Widget, src_x: float, src_y: float, dest_x: float, dest_y: float) -> bool: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unset_state_flags(self, flags: StateFlags) -> None: ...

class WidgetPaintable(GObject.Object, Gdk.Paintable): 
    @classmethod
    def new(cls, widget: Widget | None) -> WidgetPaintable: ...
    def get_widget(self) -> Widget | None: ...
    def set_widget(self, widget: Widget | None) -> None: ...

class Window(Widget, Accessible, Buildable, ConstraintTarget, Native, Root, ShortcutManager): 
    @classmethod
    def new(cls) -> Widget: ...
    @classmethod
    def get_default_icon_name(cls) -> str | None: ...
    @classmethod
    def get_toplevels(cls) -> Gio.ListModel: ...
    @classmethod
    def list_toplevels(cls) -> GLib.List: ...
    @classmethod
    def set_auto_startup_notification(cls, setting: bool) -> None: ...
    @classmethod
    def set_default_icon_name(cls, name: str) -> None: ...
    @classmethod
    def set_interactive_debugging(cls, enable: bool) -> None: ...
    def close(self) -> None: ...
    def destroy(self) -> None: ...
    def fullscreen(self) -> None: ...
    def fullscreen_on_monitor(self, monitor: Gdk.Monitor) -> None: ...
    def get_application(self) -> Application | None: ...
    def get_child(self) -> Widget | None: ...
    def get_decorated(self) -> bool: ...
    def get_default_size(self, width: int, height: int) -> None: ...
    def get_default_widget(self) -> Widget | None: ...
    def get_deletable(self) -> bool: ...
    def get_destroy_with_parent(self) -> bool: ...
    def get_focus(self) -> Widget | None: ...
    def get_focus_visible(self) -> bool: ...
    def get_group(self) -> WindowGroup: ...
    def get_handle_menubar_accel(self) -> bool: ...
    def get_hide_on_close(self) -> bool: ...
    def get_icon_name(self) -> str | None: ...
    def get_mnemonics_visible(self) -> bool: ...
    def get_modal(self) -> bool: ...
    def get_resizable(self) -> bool: ...
    def get_title(self) -> str | None: ...
    def get_titlebar(self) -> Widget | None: ...
    def get_transient_for(self) -> Window | None: ...
    def has_group(self) -> bool: ...
    def is_active(self) -> bool: ...
    def is_fullscreen(self) -> bool: ...
    def is_maximized(self) -> bool: ...
    def maximize(self) -> None: ...
    def minimize(self) -> None: ...
    def present(self) -> None: ...
    def present_with_time(self, timestamp: int) -> None: ...
    def set_application(self, application: Application | None) -> None: ...
    def set_child(self, child: Widget | None) -> None: ...
    def set_decorated(self, setting: bool) -> None: ...
    def set_default_size(self, width: int, height: int) -> None: ...
    def set_default_widget(self, default_widget: Widget | None) -> None: ...
    def set_deletable(self, setting: bool) -> None: ...
    def set_destroy_with_parent(self, setting: bool) -> None: ...
    def set_display(self, display: Gdk.Display) -> None: ...
    def set_focus(self, focus: Widget | None) -> None: ...
    def set_focus_visible(self, setting: bool) -> None: ...
    def set_handle_menubar_accel(self, handle_menubar_accel: bool) -> None: ...
    def set_hide_on_close(self, setting: bool) -> None: ...
    def set_icon_name(self, name: str | None) -> None: ...
    def set_mnemonics_visible(self, setting: bool) -> None: ...
    def set_modal(self, modal: bool) -> None: ...
    def set_resizable(self, resizable: bool) -> None: ...
    def set_startup_id(self, startup_id: str) -> None: ...
    def set_title(self, title: str | None) -> None: ...
    def set_titlebar(self, titlebar: Widget | None) -> None: ...
    def set_transient_for(self, parent: Window | None) -> None: ...
    def unfullscreen(self) -> None: ...
    def unmaximize(self) -> None: ...
    def unminimize(self) -> None: ...

class WindowControls(Widget, Accessible, Buildable, ConstraintTarget): 
    @classmethod
    def new(cls, side: PackType) -> Widget: ...
    def get_decoration_layout(self) -> str | None: ...
    def get_empty(self) -> bool: ...
    def get_side(self) -> PackType: ...
    def set_decoration_layout(self, layout: str | None) -> None: ...
    def set_side(self, side: PackType) -> None: ...

class WindowGroup(GObject.Object): 
    @classmethod
    def new(cls) -> WindowGroup: ...
    def add_window(self, window: Window) -> None: ...
    def list_windows(self) -> GLib.List: ...
    def remove_window(self, window: Window) -> None: ...

class WindowHandle(Widget, Accessible, Buildable, ConstraintTarget): 
    @classmethod
    def new(cls) -> Widget: ...
    def get_child(self) -> Widget | None: ...
    def set_child(self, child: Widget | None) -> None: ...

class Accessible: 
    def get_accessible_role(self) -> AccessibleRole: ...
    def reset_property(self, property: AccessibleProperty) -> None: ...
    def reset_relation(self, relation: AccessibleRelation) -> None: ...
    def reset_state(self, state: AccessibleState) -> None: ...
    def update_property(self, first_property: AccessibleProperty) -> None: ...
    def update_property_value(self, n_properties: int, properties: list[AccessibleProperty], values: list[GObject.Value]) -> None: ...
    def update_relation(self, first_relation: AccessibleRelation) -> None: ...
    def update_relation_value(self, n_relations: int, relations: list[AccessibleRelation], values: list[GObject.Value]) -> None: ...
    def update_state(self, first_state: AccessibleState) -> None: ...
    def update_state_value(self, n_states: int, states: list[AccessibleState], values: list[GObject.Value]) -> None: ...
class Actionable(Widget): 
    def get_action_name(self) -> str | None: ...
    def get_action_target_value(self) -> GLib.Variant | None: ...
    def set_action_name(self, action_name: str | None) -> None: ...
    def set_action_target_value(self, target_value: GLib.Variant | None) -> None: ...
    def get_action_name(self) -> str | None: ...
    def get_action_target_value(self) -> GLib.Variant | None: ...
    def set_action_name(self, action_name: str | None) -> None: ...
    def set_action_target(self, format_string: str) -> None: ...
    def set_action_target_value(self, target_value: GLib.Variant | None) -> None: ...
    def set_detailed_action_name(self, detailed_action_name: str) -> None: ...
class AppChooser(Widget): 
    def get_app_info(self) -> Gio.AppInfo | None: ...
    def get_content_type(self) -> str: ...
    def refresh(self) -> None: ...
class Buildable: 
    def add_child(self, builder: Builder, child: GObject.Object, type: str | None) -> None: ...
    def construct_child(self, builder: Builder, name: str) -> GObject.Object: ...
    def custom_finished(self, builder: Builder, child: GObject.Object | None, tagname: str, data: object | None) -> None: ...
    def custom_tag_end(self, builder: Builder, child: GObject.Object | None, tagname: str, data: object | None) -> None: ...
    def custom_tag_start(self, builder: Builder, child: GObject.Object | None, tagname: str, parser: BuildableParser, data: object | None) -> bool: ...
    def get_id(self) -> str: ...
    def get_internal_child(self, builder: Builder, childname: str) -> GObject.Object: ...
    def parser_finished(self, builder: Builder) -> None: ...
    def set_buildable_property(self, builder: Builder, name: str, value: GObject.Value) -> None: ...
    def set_id(self, id: str) -> None: ...
    def get_buildable_id(self) -> str | None: ...
class BuilderScope: 
    def create_closure(self, builder: Builder, function_name: str, flags: BuilderClosureFlags, object: GObject.Object) -> GObject.Closure: ...
    def get_type_from_function(self, builder: Builder, function_name: str) -> GObject.Type: ...
    def get_type_from_name(self, builder: Builder, type_name: str) -> GObject.Type: ...
class CellEditable(Widget): 
    def editing_done(self) -> None: ...
    def remove_widget(self) -> None: ...
    def start_editing(self, event: Gdk.Event | None) -> None: ...
    def editing_done(self) -> None: ...
    def remove_widget(self) -> None: ...
    def start_editing(self, event: Gdk.Event | None) -> None: ...
class CellLayout: 
    def add_attribute(self, cell: CellRenderer, attribute: str, column: int) -> None: ...
    def clear(self) -> None: ...
    def clear_attributes(self, cell: CellRenderer) -> None: ...
    def get_area(self) -> CellArea | None: ...
    def get_cells(self) -> GLib.List: ...
    def pack_end(self, cell: CellRenderer, expand: bool) -> None: ...
    def pack_start(self, cell: CellRenderer, expand: bool) -> None: ...
    def reorder(self, cell: CellRenderer, position: int) -> None: ...
    def set_cell_data_func(self, cell: CellRenderer, func: CellLayoutDataFunc | None, func_data: object | None, destroy: GLib.DestroyNotify) -> None: ...
    def add_attribute(self, cell: CellRenderer, attribute: str, column: int) -> None: ...
    def clear(self) -> None: ...
    def clear_attributes(self, cell: CellRenderer) -> None: ...
    def get_area(self) -> CellArea | None: ...
    def get_cells(self) -> GLib.List: ...
    def pack_end(self, cell: CellRenderer, expand: bool) -> None: ...
    def pack_start(self, cell: CellRenderer, expand: bool) -> None: ...
    def reorder(self, cell: CellRenderer, position: int) -> None: ...
    def set_attributes(self, cell: CellRenderer) -> None: ...
    def set_cell_data_func(self, cell: CellRenderer, func: CellLayoutDataFunc | None, func_data: object | None, destroy: GLib.DestroyNotify) -> None: ...
class ColorChooser: 
    def add_palette(self, orientation: Orientation, colors_per_line: int, n_colors: int, colors: list[Gdk.RGBA] | None) -> None: ...
    def color_activated(self, color: Gdk.RGBA) -> None: ...
    def get_rgba(self, color: Gdk.RGBA) -> None: ...
    def set_rgba(self, color: Gdk.RGBA) -> None: ...
    def add_palette(self, orientation: Orientation, colors_per_line: int, n_colors: int, colors: list[Gdk.RGBA] | None) -> None: ...
    def get_rgba(self, color: Gdk.RGBA) -> None: ...
    def get_use_alpha(self) -> bool: ...
    def set_rgba(self, color: Gdk.RGBA) -> None: ...
    def set_use_alpha(self, use_alpha: bool) -> None: ...
class ConstraintTarget: ...
class Editable(Widget): 
    def changed(self) -> None: ...
    def delete_text(self, start_pos: int, end_pos: int) -> None: ...
    def do_delete_text(self, start_pos: int, end_pos: int) -> None: ...
    def do_insert_text(self, text: str, length: int, position: int) -> None: ...
    def get_delegate(self) -> Editable | None: ...
    def get_selection_bounds(self, start_pos: int, end_pos: int) -> bool: ...
    def get_text(self) -> str: ...
    def insert_text(self, text: str, length: int, position: int) -> None: ...
    def set_selection_bounds(self, start_pos: int, end_pos: int) -> None: ...
    def delete_selection(self) -> None: ...
    def delete_text(self, start_pos: int, end_pos: int) -> None: ...
    def finish_delegate(self) -> None: ...
    def get_alignment(self) -> float: ...
    def get_chars(self, start_pos: int, end_pos: int) -> str: ...
    def get_delegate(self) -> Editable | None: ...
    def get_editable(self) -> bool: ...
    def get_enable_undo(self) -> bool: ...
    def get_max_width_chars(self) -> int: ...
    def get_position(self) -> int: ...
    def get_selection_bounds(self, start_pos: int, end_pos: int) -> bool: ...
    def get_text(self) -> str: ...
    def get_width_chars(self) -> int: ...
    def init_delegate(self) -> None: ...
    def insert_text(self, text: str, length: int, position: int) -> None: ...
    def select_region(self, start_pos: int, end_pos: int) -> None: ...
    def set_alignment(self, xalign: float) -> None: ...
    def set_editable(self, is_editable: bool) -> None: ...
    def set_enable_undo(self, enable_undo: bool) -> None: ...
    def set_max_width_chars(self, n_chars: int) -> None: ...
    def set_position(self, position: int) -> None: ...
    def set_text(self, text: str) -> None: ...
    def set_width_chars(self, n_chars: int) -> None: ...
class FileChooser: 
    def add_choice(self, id: str, label: str, options: list[str] | None, option_labels: list[str] | None) -> None: ...
    def add_filter(self, filter: FileFilter) -> None: ...
    def add_shortcut_folder(self, folder: Gio.File) -> bool: ...
    def get_action(self) -> FileChooserAction: ...
    def get_choice(self, id: str) -> str | None: ...
    def get_create_folders(self) -> bool: ...
    def get_current_folder(self) -> Gio.File | None: ...
    def get_current_name(self) -> str | None: ...
    def get_file(self) -> Gio.File | None: ...
    def get_files(self) -> Gio.ListModel: ...
    def get_filter(self) -> FileFilter | None: ...
    def get_filters(self) -> Gio.ListModel: ...
    def get_select_multiple(self) -> bool: ...
    def get_shortcut_folders(self) -> Gio.ListModel: ...
    def remove_choice(self, id: str) -> None: ...
    def remove_filter(self, filter: FileFilter) -> None: ...
    def remove_shortcut_folder(self, folder: Gio.File) -> bool: ...
    def set_action(self, action: FileChooserAction) -> None: ...
    def set_choice(self, id: str, option: str) -> None: ...
    def set_create_folders(self, create_folders: bool) -> None: ...
    def set_current_folder(self, file: Gio.File | None) -> bool: ...
    def set_current_name(self, name: str) -> None: ...
    def set_file(self, file: Gio.File) -> bool: ...
    def set_filter(self, filter: FileFilter) -> None: ...
    def set_select_multiple(self, select_multiple: bool) -> None: ...
class FontChooser: 
    def font_activated(self, fontname: str) -> None: ...
    def get_font_face(self) -> Pango.FontFace | None: ...
    def get_font_family(self) -> Pango.FontFamily | None: ...
    def get_font_map(self) -> Pango.FontMap | None: ...
    def get_font_size(self) -> int: ...
    def set_filter_func(self, filter: FontFilterFunc | None, user_data: object | None, destroy: GLib.DestroyNotify) -> None: ...
    def set_font_map(self, fontmap: Pango.FontMap | None) -> None: ...
    def get_font(self) -> str | None: ...
    def get_font_desc(self) -> Pango.FontDescription | None: ...
    def get_font_face(self) -> Pango.FontFace | None: ...
    def get_font_family(self) -> Pango.FontFamily | None: ...
    def get_font_features(self) -> str: ...
    def get_font_map(self) -> Pango.FontMap | None: ...
    def get_font_size(self) -> int: ...
    def get_language(self) -> str: ...
    def get_level(self) -> FontChooserLevel: ...
    def get_preview_text(self) -> str: ...
    def get_show_preview_entry(self) -> bool: ...
    def set_filter_func(self, filter: FontFilterFunc | None, user_data: object | None, destroy: GLib.DestroyNotify) -> None: ...
    def set_font(self, fontname: str) -> None: ...
    def set_font_desc(self, font_desc: Pango.FontDescription) -> None: ...
    def set_font_map(self, fontmap: Pango.FontMap | None) -> None: ...
    def set_language(self, language: str) -> None: ...
    def set_level(self, level: FontChooserLevel) -> None: ...
    def set_preview_text(self, text: str) -> None: ...
    def set_show_preview_entry(self, show_preview_entry: bool) -> None: ...
class Native(Widget): 
    def get_renderer(self) -> Gsk.Renderer: ...
    def get_surface(self) -> Gdk.Surface: ...
    def get_surface_transform(self, x: float, y: float) -> None: ...
    def realize(self) -> None: ...
    def unrealize(self) -> None: ...
class Orientable: 
    def get_orientation(self) -> Orientation: ...
    def set_orientation(self, orientation: Orientation) -> None: ...
class PrintOperationPreview: 
    def end_preview(self) -> None: ...
    def got_page_size(self, context: PrintContext, page_setup: PageSetup) -> None: ...
    def is_selected(self, page_nr: int) -> bool: ...
    def ready(self, context: PrintContext) -> None: ...
    def render_page(self, page_nr: int) -> None: ...
    def end_preview(self) -> None: ...
    def is_selected(self, page_nr: int) -> bool: ...
    def render_page(self, page_nr: int) -> None: ...
class Root(Native): 
    def get_display(self) -> Gdk.Display: ...
    def get_focus(self) -> Widget | None: ...
    def set_focus(self, focus: Widget | None) -> None: ...
class Scrollable: 
    def get_border(self, border: Border) -> bool: ...
    def get_border(self, border: Border) -> bool: ...
    def get_hadjustment(self) -> Adjustment | None: ...
    def get_hscroll_policy(self) -> ScrollablePolicy: ...
    def get_vadjustment(self) -> Adjustment | None: ...
    def get_vscroll_policy(self) -> ScrollablePolicy: ...
    def set_hadjustment(self, hadjustment: Adjustment | None) -> None: ...
    def set_hscroll_policy(self, policy: ScrollablePolicy) -> None: ...
    def set_vadjustment(self, vadjustment: Adjustment | None) -> None: ...
    def set_vscroll_policy(self, policy: ScrollablePolicy) -> None: ...
class SelectionModel(Gio.ListModel): 
    def get_selection_in_range(self, position: int, n_items: int) -> Bitset: ...
    def is_selected(self, position: int) -> bool: ...
    def select_all(self) -> bool: ...
    def select_item(self, position: int, unselect_rest: bool) -> bool: ...
    def select_range(self, position: int, n_items: int, unselect_rest: bool) -> bool: ...
    def set_selection(self, selected: Bitset, mask: Bitset) -> bool: ...
    def unselect_all(self) -> bool: ...
    def unselect_item(self, position: int) -> bool: ...
    def unselect_range(self, position: int, n_items: int) -> bool: ...
    def get_selection(self) -> Bitset: ...
    def get_selection_in_range(self, position: int, n_items: int) -> Bitset: ...
    def is_selected(self, position: int) -> bool: ...
    def select_all(self) -> bool: ...
    def select_item(self, position: int, unselect_rest: bool) -> bool: ...
    def select_range(self, position: int, n_items: int, unselect_rest: bool) -> bool: ...
    def selection_changed(self, position: int, n_items: int) -> None: ...
    def set_selection(self, selected: Bitset, mask: Bitset) -> bool: ...
    def unselect_all(self) -> bool: ...
    def unselect_item(self, position: int) -> bool: ...
    def unselect_range(self, position: int, n_items: int) -> bool: ...
class ShortcutManager: 
    def add_controller(self, controller: ShortcutController) -> None: ...
    def remove_controller(self, controller: ShortcutController) -> None: ...
class StyleProvider: ...
class SymbolicPaintable(Gdk.Paintable): 
    def snapshot_symbolic(self, snapshot: Gdk.Snapshot, width: float, height: float, colors: list[Gdk.RGBA], n_colors: gsize) -> None: ...
    def snapshot_symbolic(self, snapshot: Gdk.Snapshot, width: float, height: float, colors: list[Gdk.RGBA], n_colors: gsize) -> None: ...
class TreeDragDest: 
    def drag_data_received(self, dest: TreePath, value: GObject.Value) -> bool: ...
    def row_drop_possible(self, dest_path: TreePath, value: GObject.Value) -> bool: ...
    def drag_data_received(self, dest: TreePath, value: GObject.Value) -> bool: ...
    def row_drop_possible(self, dest_path: TreePath, value: GObject.Value) -> bool: ...
class TreeDragSource: 
    def drag_data_delete(self, path: TreePath) -> bool: ...
    def drag_data_get(self, path: TreePath) -> Gdk.ContentProvider | None: ...
    def row_draggable(self, path: TreePath) -> bool: ...
    def drag_data_delete(self, path: TreePath) -> bool: ...
    def drag_data_get(self, path: TreePath) -> Gdk.ContentProvider | None: ...
    def row_draggable(self, path: TreePath) -> bool: ...
class TreeModel: 
    def get_column_type(self, index_: int) -> GObject.Type: ...
    def get_flags(self) -> TreeModelFlags: ...
    def get_iter(self, iter: TreeIter, path: TreePath) -> bool: ...
    def get_n_columns(self) -> int: ...
    def get_path(self, iter: TreeIter) -> TreePath: ...
    def get_value(self, iter: TreeIter, column: int, value: GObject.Value) -> None: ...
    def iter_children(self, iter: TreeIter, parent: TreeIter | None) -> bool: ...
    def iter_has_child(self, iter: TreeIter) -> bool: ...
    def iter_n_children(self, iter: TreeIter | None) -> int: ...
    def iter_next(self, iter: TreeIter) -> bool: ...
    def iter_nth_child(self, iter: TreeIter, parent: TreeIter | None, n: int) -> bool: ...
    def iter_parent(self, iter: TreeIter, child: TreeIter) -> bool: ...
    def iter_previous(self, iter: TreeIter) -> bool: ...
    def ref_node(self, iter: TreeIter) -> None: ...
    def row_changed(self, path: TreePath, iter: TreeIter) -> None: ...
    def row_deleted(self, path: TreePath) -> None: ...
    def row_has_child_toggled(self, path: TreePath, iter: TreeIter) -> None: ...
    def row_inserted(self, path: TreePath, iter: TreeIter) -> None: ...
    def rows_reordered(self, path: TreePath, iter: TreeIter, new_order: int) -> None: ...
    def unref_node(self, iter: TreeIter) -> None: ...
    def filter_new(self, root: TreePath | None) -> TreeModel: ...
    def foreach(self, func: TreeModelForeachFunc, user_data: object | None) -> None: ...
    def get(self, iter: TreeIter) -> None: ...
    def get_column_type(self, index_: int) -> GObject.Type: ...
    def get_flags(self) -> TreeModelFlags: ...
    def get_iter(self, iter: TreeIter, path: TreePath) -> bool: ...
    def get_iter_first(self, iter: TreeIter) -> bool: ...
    def get_iter_from_string(self, iter: TreeIter, path_string: str) -> bool: ...
    def get_n_columns(self) -> int: ...
    def get_path(self, iter: TreeIter) -> TreePath: ...
    def get_string_from_iter(self, iter: TreeIter) -> str | None: ...
    def get_valist(self, iter: TreeIter, var_args: va_list) -> None: ...
    def get_value(self, iter: TreeIter, column: int, value: GObject.Value) -> None: ...
    def iter_children(self, iter: TreeIter, parent: TreeIter | None) -> bool: ...
    def iter_has_child(self, iter: TreeIter) -> bool: ...
    def iter_n_children(self, iter: TreeIter | None) -> int: ...
    def iter_next(self, iter: TreeIter) -> bool: ...
    def iter_nth_child(self, iter: TreeIter, parent: TreeIter | None, n: int) -> bool: ...
    def iter_parent(self, iter: TreeIter, child: TreeIter) -> bool: ...
    def iter_previous(self, iter: TreeIter) -> bool: ...
    def ref_node(self, iter: TreeIter) -> None: ...
    def row_changed(self, path: TreePath, iter: TreeIter) -> None: ...
    def row_deleted(self, path: TreePath) -> None: ...
    def row_has_child_toggled(self, path: TreePath, iter: TreeIter) -> None: ...
    def row_inserted(self, path: TreePath, iter: TreeIter) -> None: ...
    def rows_reordered(self, path: TreePath, iter: TreeIter, new_order: int) -> None: ...
    def rows_reordered_with_length(self, path: TreePath, iter: TreeIter | None, new_order: list[int], length: int) -> None: ...
    def unref_node(self, iter: TreeIter) -> None: ...
class TreeSortable(TreeModel): 
    def get_sort_column_id(self, sort_column_id: int, order: SortType) -> bool: ...
    def has_default_sort_func(self) -> bool: ...
    def set_default_sort_func(self, sort_func: TreeIterCompareFunc, user_data: object | None, destroy: GLib.DestroyNotify | None) -> None: ...
    def set_sort_column_id(self, sort_column_id: int, order: SortType) -> None: ...
    def set_sort_func(self, sort_column_id: int, sort_func: TreeIterCompareFunc, user_data: object | None, destroy: GLib.DestroyNotify | None) -> None: ...
    def sort_column_changed(self) -> None: ...
    def get_sort_column_id(self, sort_column_id: int, order: SortType) -> bool: ...
    def has_default_sort_func(self) -> bool: ...
    def set_default_sort_func(self, sort_func: TreeIterCompareFunc, user_data: object | None, destroy: GLib.DestroyNotify | None) -> None: ...
    def set_sort_column_id(self, sort_column_id: int, order: SortType) -> None: ...
    def set_sort_func(self, sort_column_id: int, sort_func: TreeIterCompareFunc, user_data: object | None, destroy: GLib.DestroyNotify | None) -> None: ...
    def sort_column_changed(self) -> None: ...

class ApplicationInhibitFlags(GObject.GFlag): 
    LOGOUT = ...
    SWITCH = ...
    SUSPEND = ...
    IDLE = ...

class BuilderClosureFlags(GObject.GFlag): 
    SWAPPED = ...

class CellRendererState(GObject.GFlag): 
    SELECTED = ...
    PRELIT = ...
    INSENSITIVE = ...
    SORTED = ...
    FOCUSED = ...
    EXPANDABLE = ...
    EXPANDED = ...

class DebugFlags(GObject.GFlag): 
    TEXT = ...
    TREE = ...
    KEYBINDINGS = ...
    MODULES = ...
    GEOMETRY = ...
    ICONTHEME = ...
    PRINTING = ...
    BUILDER = ...
    SIZE_REQUEST = ...
    NO_CSS_CACHE = ...
    INTERACTIVE = ...
    TOUCHSCREEN = ...
    ACTIONS = ...
    LAYOUT = ...
    SNAPSHOT = ...
    CONSTRAINTS = ...
    BUILDER_OBJECTS = ...
    A11Y = ...
    ICONFALLBACK = ...
    INVERT_TEXT_DIR = ...

class DialogFlags(GObject.GFlag): 
    MODAL = ...
    DESTROY_WITH_PARENT = ...
    USE_HEADER_BAR = ...

class EventControllerScrollFlags(GObject.GFlag): 
    NONE = ...
    VERTICAL = ...
    HORIZONTAL = ...
    DISCRETE = ...
    KINETIC = ...
    BOTH_AXES = ...

class FontChooserLevel(GObject.GFlag): 
    FAMILY = ...
    STYLE = ...
    SIZE = ...
    VARIATIONS = ...
    FEATURES = ...

class IconLookupFlags(GObject.GFlag): 
    FORCE_REGULAR = ...
    FORCE_SYMBOLIC = ...
    PRELOAD = ...

class InputHints(GObject.GFlag): 
    NONE = ...
    SPELLCHECK = ...
    NO_SPELLCHECK = ...
    WORD_COMPLETION = ...
    LOWERCASE = ...
    UPPERCASE_CHARS = ...
    UPPERCASE_WORDS = ...
    UPPERCASE_SENTENCES = ...
    INHIBIT_OSK = ...
    VERTICAL_WRITING = ...
    EMOJI = ...
    NO_EMOJI = ...
    PRIVATE = ...

class PickFlags(GObject.GFlag): 
    DEFAULT = ...
    INSENSITIVE = ...
    NON_TARGETABLE = ...

class PopoverMenuFlags(GObject.GFlag): 
    NESTED = ...

class PrintCapabilities(GObject.GFlag): 
    PAGE_SET = ...
    COPIES = ...
    COLLATE = ...
    REVERSE = ...
    SCALE = ...
    GENERATE_PDF = ...
    GENERATE_PS = ...
    PREVIEW = ...
    NUMBER_UP = ...
    NUMBER_UP_LAYOUT = ...

class ShortcutActionFlags(GObject.GFlag): 
    EXCLUSIVE = ...

class StateFlags(GObject.GFlag): 
    NORMAL = ...
    ACTIVE = ...
    PRELIGHT = ...
    SELECTED = ...
    INSENSITIVE = ...
    INCONSISTENT = ...
    FOCUSED = ...
    BACKDROP = ...
    DIR_LTR = ...
    DIR_RTL = ...
    LINK = ...
    VISITED = ...
    CHECKED = ...
    DROP_ACTIVE = ...
    FOCUS_VISIBLE = ...
    FOCUS_WITHIN = ...

class StyleContextPrintFlags(GObject.GFlag): 
    NONE = ...
    RECURSE = ...
    SHOW_STYLE = ...
    SHOW_CHANGE = ...

class TextSearchFlags(GObject.GFlag): 
    VISIBLE_ONLY = ...
    TEXT_ONLY = ...
    CASE_INSENSITIVE = ...

class TreeModelFlags(GObject.GFlag): 
    ITERS_PERSIST = ...
    LIST_ONLY = ...

class AccessibleAutocomplete(GObject.GEnum): 
    NONE = ...
    INLINE = ...
    LIST = ...
    BOTH = ...

class AccessibleInvalidState(GObject.GEnum): 
    FALSE = ...
    TRUE = ...
    GRAMMAR = ...
    SPELLING = ...

class AccessibleProperty(GObject.GEnum): 
    AUTOCOMPLETE = ...
    DESCRIPTION = ...
    HAS_POPUP = ...
    KEY_SHORTCUTS = ...
    LABEL = ...
    LEVEL = ...
    MODAL = ...
    MULTI_LINE = ...
    MULTI_SELECTABLE = ...
    ORIENTATION = ...
    PLACEHOLDER = ...
    READ_ONLY = ...
    REQUIRED = ...
    ROLE_DESCRIPTION = ...
    SORT = ...
    VALUE_MAX = ...
    VALUE_MIN = ...
    VALUE_NOW = ...
    VALUE_TEXT = ...

class AccessibleRelation(GObject.GEnum): 
    ACTIVE_DESCENDANT = ...
    COL_COUNT = ...
    COL_INDEX = ...
    COL_INDEX_TEXT = ...
    COL_SPAN = ...
    CONTROLS = ...
    DESCRIBED_BY = ...
    DETAILS = ...
    ERROR_MESSAGE = ...
    FLOW_TO = ...
    LABELLED_BY = ...
    OWNS = ...
    POS_IN_SET = ...
    ROW_COUNT = ...
    ROW_INDEX = ...
    ROW_INDEX_TEXT = ...
    ROW_SPAN = ...
    SET_SIZE = ...

class AccessibleRole(GObject.GEnum): 
    ALERT = ...
    ALERT_DIALOG = ...
    BANNER = ...
    BUTTON = ...
    CAPTION = ...
    CELL = ...
    CHECKBOX = ...
    COLUMN_HEADER = ...
    COMBO_BOX = ...
    COMMAND = ...
    COMPOSITE = ...
    DIALOG = ...
    DOCUMENT = ...
    FEED = ...
    FORM = ...
    GENERIC = ...
    GRID = ...
    GRID_CELL = ...
    GROUP = ...
    HEADING = ...
    IMG = ...
    INPUT = ...
    LABEL = ...
    LANDMARK = ...
    LEGEND = ...
    LINK = ...
    LIST = ...
    LIST_BOX = ...
    LIST_ITEM = ...
    LOG = ...
    MAIN = ...
    MARQUEE = ...
    MATH = ...
    METER = ...
    MENU = ...
    MENU_BAR = ...
    MENU_ITEM = ...
    MENU_ITEM_CHECKBOX = ...
    MENU_ITEM_RADIO = ...
    NAVIGATION = ...
    NONE = ...
    NOTE = ...
    OPTION = ...
    PRESENTATION = ...
    PROGRESS_BAR = ...
    RADIO = ...
    RADIO_GROUP = ...
    RANGE = ...
    REGION = ...
    ROW = ...
    ROW_GROUP = ...
    ROW_HEADER = ...
    SCROLLBAR = ...
    SEARCH = ...
    SEARCH_BOX = ...
    SECTION = ...
    SECTION_HEAD = ...
    SELECT = ...
    SEPARATOR = ...
    SLIDER = ...
    SPIN_BUTTON = ...
    STATUS = ...
    STRUCTURE = ...
    SWITCH = ...
    TAB = ...
    TABLE = ...
    TAB_LIST = ...
    TAB_PANEL = ...
    TEXT_BOX = ...
    TIME = ...
    TIMER = ...
    TOOLBAR = ...
    TOOLTIP = ...
    TREE = ...
    TREE_GRID = ...
    TREE_ITEM = ...
    WIDGET = ...
    WINDOW = ...

class AccessibleSort(GObject.GEnum): 
    NONE = ...
    ASCENDING = ...
    DESCENDING = ...
    OTHER = ...

class AccessibleState(GObject.GEnum): 
    BUSY = ...
    CHECKED = ...
    DISABLED = ...
    EXPANDED = ...
    HIDDEN = ...
    INVALID = ...
    PRESSED = ...
    SELECTED = ...

class AccessibleTristate(GObject.GEnum): 
    FALSE = ...
    TRUE = ...
    MIXED = ...

class Align(GObject.GEnum): 
    FILL = ...
    START = ...
    END = ...
    CENTER = ...
    BASELINE = ...

class ArrowType(GObject.GEnum): 
    UP = ...
    DOWN = ...
    LEFT = ...
    RIGHT = ...
    NONE = ...

class AssistantPageType(GObject.GEnum): 
    CONTENT = ...
    INTRO = ...
    CONFIRM = ...
    SUMMARY = ...
    PROGRESS = ...
    CUSTOM = ...

class BaselinePosition(GObject.GEnum): 
    TOP = ...
    CENTER = ...
    BOTTOM = ...

class BorderStyle(GObject.GEnum): 
    NONE = ...
    HIDDEN = ...
    SOLID = ...
    INSET = ...
    OUTSET = ...
    DOTTED = ...
    DASHED = ...
    DOUBLE = ...
    GROOVE = ...
    RIDGE = ...

class BuilderError(GObject.GEnum): 
    INVALID_TYPE_FUNCTION = ...
    UNHANDLED_TAG = ...
    MISSING_ATTRIBUTE = ...
    INVALID_ATTRIBUTE = ...
    INVALID_TAG = ...
    MISSING_PROPERTY_VALUE = ...
    INVALID_VALUE = ...
    VERSION_MISMATCH = ...
    DUPLICATE_ID = ...
    OBJECT_TYPE_REFUSED = ...
    TEMPLATE_MISMATCH = ...
    INVALID_PROPERTY = ...
    INVALID_SIGNAL = ...
    INVALID_ID = ...
    INVALID_FUNCTION = ...

class ButtonsType(GObject.GEnum): 
    NONE = ...
    OK = ...
    CLOSE = ...
    CANCEL = ...
    YES_NO = ...
    OK_CANCEL = ...

class CellRendererAccelMode(GObject.GEnum): 
    GTK = ...
    OTHER = ...

class CellRendererMode(GObject.GEnum): 
    INERT = ...
    ACTIVATABLE = ...
    EDITABLE = ...

class ConstraintAttribute(GObject.GEnum): 
    NONE = ...
    LEFT = ...
    RIGHT = ...
    TOP = ...
    BOTTOM = ...
    START = ...
    END = ...
    WIDTH = ...
    HEIGHT = ...
    CENTER_X = ...
    CENTER_Y = ...
    BASELINE = ...

class ConstraintRelation(GObject.GEnum): 
    LE = ...
    EQ = ...
    GE = ...

class ConstraintStrength(GObject.GEnum): 
    REQUIRED = ...
    STRONG = ...
    MEDIUM = ...
    WEAK = ...

class ConstraintVflParserError(GObject.GEnum): 
    SYMBOL = ...
    ATTRIBUTE = ...
    VIEW = ...
    METRIC = ...
    PRIORITY = ...
    RELATION = ...

class ContentFit(GObject.GEnum): 
    FILL = ...
    CONTAIN = ...
    COVER = ...
    SCALE_DOWN = ...

class CornerType(GObject.GEnum): 
    TOP_LEFT = ...
    BOTTOM_LEFT = ...
    TOP_RIGHT = ...
    BOTTOM_RIGHT = ...

class CssParserError(GObject.GEnum): 
    FAILED = ...
    SYNTAX = ...
    IMPORT = ...
    NAME = ...
    UNKNOWN_VALUE = ...

class CssParserWarning(GObject.GEnum): 
    DEPRECATED = ...
    SYNTAX = ...
    UNIMPLEMENTED = ...

class DeleteType(GObject.GEnum): 
    CHARS = ...
    WORD_ENDS = ...
    WORDS = ...
    DISPLAY_LINES = ...
    DISPLAY_LINE_ENDS = ...
    PARAGRAPH_ENDS = ...
    PARAGRAPHS = ...
    WHITESPACE = ...

class DirectionType(GObject.GEnum): 
    TAB_FORWARD = ...
    TAB_BACKWARD = ...
    UP = ...
    DOWN = ...
    LEFT = ...
    RIGHT = ...

class EditableProperties(GObject.GEnum): 
    PROP_TEXT = ...
    PROP_CURSOR_POSITION = ...
    PROP_SELECTION_BOUND = ...
    PROP_EDITABLE = ...
    PROP_WIDTH_CHARS = ...
    PROP_MAX_WIDTH_CHARS = ...
    PROP_XALIGN = ...
    PROP_ENABLE_UNDO = ...
    NUM_PROPERTIES = ...

class EntryIconPosition(GObject.GEnum): 
    PRIMARY = ...
    SECONDARY = ...

class EventSequenceState(GObject.GEnum): 
    NONE = ...
    CLAIMED = ...
    DENIED = ...

class FileChooserAction(GObject.GEnum): 
    OPEN = ...
    SAVE = ...
    SELECT_FOLDER = ...

class FileChooserError(GObject.GEnum): 
    NONEXISTENT = ...
    BAD_FILENAME = ...
    ALREADY_EXISTS = ...
    INCOMPLETE_HOSTNAME = ...

class FilterChange(GObject.GEnum): 
    DIFFERENT = ...
    LESS_STRICT = ...
    MORE_STRICT = ...

class FilterMatch(GObject.GEnum): 
    SOME = ...
    NONE = ...
    ALL = ...

class IconSize(GObject.GEnum): 
    INHERIT = ...
    NORMAL = ...
    LARGE = ...

class IconThemeError(GObject.GEnum): 
    NOT_FOUND = ...
    FAILED = ...

class IconViewDropPosition(GObject.GEnum): 
    NO_DROP = ...
    DROP_INTO = ...
    DROP_LEFT = ...
    DROP_RIGHT = ...
    DROP_ABOVE = ...
    DROP_BELOW = ...

class ImageType(GObject.GEnum): 
    EMPTY = ...
    ICON_NAME = ...
    GICON = ...
    PAINTABLE = ...

class InputPurpose(GObject.GEnum): 
    FREE_FORM = ...
    ALPHA = ...
    DIGITS = ...
    NUMBER = ...
    PHONE = ...
    URL = ...
    EMAIL = ...
    NAME = ...
    PASSWORD = ...
    PIN = ...
    TERMINAL = ...

class InscriptionOverflow(GObject.GEnum): 
    CLIP = ...
    ELLIPSIZE_START = ...
    ELLIPSIZE_MIDDLE = ...
    ELLIPSIZE_END = ...

class Justification(GObject.GEnum): 
    LEFT = ...
    RIGHT = ...
    CENTER = ...
    FILL = ...

class LevelBarMode(GObject.GEnum): 
    CONTINUOUS = ...
    DISCRETE = ...

class License(GObject.GEnum): 
    UNKNOWN = ...
    CUSTOM = ...
    GPL_2_0 = ...
    GPL_3_0 = ...
    LGPL_2_1 = ...
    LGPL_3_0 = ...
    BSD = ...
    MIT_X11 = ...
    ARTISTIC = ...
    GPL_2_0_ONLY = ...
    GPL_3_0_ONLY = ...
    LGPL_2_1_ONLY = ...
    LGPL_3_0_ONLY = ...
    AGPL_3_0 = ...
    AGPL_3_0_ONLY = ...
    BSD_3 = ...
    APACHE_2_0 = ...
    MPL_2_0 = ...

class MessageType(GObject.GEnum): 
    INFO = ...
    WARNING = ...
    QUESTION = ...
    ERROR = ...
    OTHER = ...

class MovementStep(GObject.GEnum): 
    LOGICAL_POSITIONS = ...
    VISUAL_POSITIONS = ...
    WORDS = ...
    DISPLAY_LINES = ...
    DISPLAY_LINE_ENDS = ...
    PARAGRAPHS = ...
    PARAGRAPH_ENDS = ...
    PAGES = ...
    BUFFER_ENDS = ...
    HORIZONTAL_PAGES = ...

class NaturalWrapMode(GObject.GEnum): 
    INHERIT = ...
    NONE = ...
    WORD = ...

class NotebookTab(GObject.GEnum): 
    FIRST = ...
    LAST = ...

class NumberUpLayout(GObject.GEnum): 
    LRTB = ...
    LRBT = ...
    RLTB = ...
    RLBT = ...
    TBLR = ...
    TBRL = ...
    BTLR = ...
    BTRL = ...

class Ordering(GObject.GEnum): 
    SMALLER = ...
    EQUAL = ...
    LARGER = ...

class Orientation(GObject.GEnum): 
    HORIZONTAL = ...
    VERTICAL = ...

class Overflow(GObject.GEnum): 
    VISIBLE = ...
    HIDDEN = ...

class PackType(GObject.GEnum): 
    START = ...
    END = ...

class PadActionType(GObject.GEnum): 
    BUTTON = ...
    RING = ...
    STRIP = ...

class PageOrientation(GObject.GEnum): 
    PORTRAIT = ...
    LANDSCAPE = ...
    REVERSE_PORTRAIT = ...
    REVERSE_LANDSCAPE = ...

class PageSet(GObject.GEnum): 
    ALL = ...
    EVEN = ...
    ODD = ...

class PanDirection(GObject.GEnum): 
    LEFT = ...
    RIGHT = ...
    UP = ...
    DOWN = ...

class PolicyType(GObject.GEnum): 
    ALWAYS = ...
    AUTOMATIC = ...
    NEVER = ...
    EXTERNAL = ...

class PositionType(GObject.GEnum): 
    LEFT = ...
    RIGHT = ...
    TOP = ...
    BOTTOM = ...

class PrintDuplex(GObject.GEnum): 
    SIMPLEX = ...
    HORIZONTAL = ...
    VERTICAL = ...

class PrintError(GObject.GEnum): 
    GENERAL = ...
    INTERNAL_ERROR = ...
    NOMEM = ...
    INVALID_FILE = ...

class PrintOperationAction(GObject.GEnum): 
    PRINT_DIALOG = ...
    PRINT = ...
    PREVIEW = ...
    EXPORT = ...

class PrintOperationResult(GObject.GEnum): 
    ERROR = ...
    APPLY = ...
    CANCEL = ...
    IN_PROGRESS = ...

class PrintPages(GObject.GEnum): 
    ALL = ...
    CURRENT = ...
    RANGES = ...
    SELECTION = ...

class PrintQuality(GObject.GEnum): 
    LOW = ...
    NORMAL = ...
    HIGH = ...
    DRAFT = ...

class PrintStatus(GObject.GEnum): 
    INITIAL = ...
    PREPARING = ...
    GENERATING_DATA = ...
    SENDING_DATA = ...
    PENDING = ...
    PENDING_ISSUE = ...
    PRINTING = ...
    FINISHED = ...
    FINISHED_ABORTED = ...

class PropagationLimit(GObject.GEnum): 
    NONE = ...
    SAME_NATIVE = ...

class PropagationPhase(GObject.GEnum): 
    NONE = ...
    CAPTURE = ...
    BUBBLE = ...
    TARGET = ...

class RecentManagerError(GObject.GEnum): 
    NOT_FOUND = ...
    INVALID_URI = ...
    INVALID_ENCODING = ...
    NOT_REGISTERED = ...
    READ = ...
    WRITE = ...
    UNKNOWN = ...

class ResponseType(GObject.GEnum): 
    NONE = ...
    REJECT = ...
    ACCEPT = ...
    DELETE_EVENT = ...
    OK = ...
    CANCEL = ...
    CLOSE = ...
    YES = ...
    NO = ...
    APPLY = ...
    HELP = ...

class RevealerTransitionType(GObject.GEnum): 
    NONE = ...
    CROSSFADE = ...
    SLIDE_RIGHT = ...
    SLIDE_LEFT = ...
    SLIDE_UP = ...
    SLIDE_DOWN = ...
    SWING_RIGHT = ...
    SWING_LEFT = ...
    SWING_UP = ...
    SWING_DOWN = ...

class ScrollStep(GObject.GEnum): 
    STEPS = ...
    PAGES = ...
    ENDS = ...
    HORIZONTAL_STEPS = ...
    HORIZONTAL_PAGES = ...
    HORIZONTAL_ENDS = ...

class ScrollType(GObject.GEnum): 
    NONE = ...
    JUMP = ...
    STEP_BACKWARD = ...
    STEP_FORWARD = ...
    PAGE_BACKWARD = ...
    PAGE_FORWARD = ...
    STEP_UP = ...
    STEP_DOWN = ...
    PAGE_UP = ...
    PAGE_DOWN = ...
    STEP_LEFT = ...
    STEP_RIGHT = ...
    PAGE_LEFT = ...
    PAGE_RIGHT = ...
    START = ...
    END = ...

class ScrollablePolicy(GObject.GEnum): 
    MINIMUM = ...
    NATURAL = ...

class SelectionMode(GObject.GEnum): 
    NONE = ...
    SINGLE = ...
    BROWSE = ...
    MULTIPLE = ...

class SensitivityType(GObject.GEnum): 
    AUTO = ...
    ON = ...
    OFF = ...

class ShortcutScope(GObject.GEnum): 
    LOCAL = ...
    MANAGED = ...
    GLOBAL = ...

class ShortcutType(GObject.GEnum): 
    ACCELERATOR = ...
    GESTURE_PINCH = ...
    GESTURE_STRETCH = ...
    GESTURE_ROTATE_CLOCKWISE = ...
    GESTURE_ROTATE_COUNTERCLOCKWISE = ...
    GESTURE_TWO_FINGER_SWIPE_LEFT = ...
    GESTURE_TWO_FINGER_SWIPE_RIGHT = ...
    GESTURE = ...
    GESTURE_SWIPE_LEFT = ...
    GESTURE_SWIPE_RIGHT = ...

class SizeGroupMode(GObject.GEnum): 
    NONE = ...
    HORIZONTAL = ...
    VERTICAL = ...
    BOTH = ...

class SizeRequestMode(GObject.GEnum): 
    HEIGHT_FOR_WIDTH = ...
    WIDTH_FOR_HEIGHT = ...
    CONSTANT_SIZE = ...

class SortType(GObject.GEnum): 
    ASCENDING = ...
    DESCENDING = ...

class SorterChange(GObject.GEnum): 
    DIFFERENT = ...
    INVERTED = ...
    LESS_STRICT = ...
    MORE_STRICT = ...

class SorterOrder(GObject.GEnum): 
    PARTIAL = ...
    NONE = ...
    TOTAL = ...

class SpinButtonUpdatePolicy(GObject.GEnum): 
    ALWAYS = ...
    IF_VALID = ...

class SpinType(GObject.GEnum): 
    STEP_FORWARD = ...
    STEP_BACKWARD = ...
    PAGE_FORWARD = ...
    PAGE_BACKWARD = ...
    HOME = ...
    END = ...
    USER_DEFINED = ...

class StackTransitionType(GObject.GEnum): 
    NONE = ...
    CROSSFADE = ...
    SLIDE_RIGHT = ...
    SLIDE_LEFT = ...
    SLIDE_UP = ...
    SLIDE_DOWN = ...
    SLIDE_LEFT_RIGHT = ...
    SLIDE_UP_DOWN = ...
    OVER_UP = ...
    OVER_DOWN = ...
    OVER_LEFT = ...
    OVER_RIGHT = ...
    UNDER_UP = ...
    UNDER_DOWN = ...
    UNDER_LEFT = ...
    UNDER_RIGHT = ...
    OVER_UP_DOWN = ...
    OVER_DOWN_UP = ...
    OVER_LEFT_RIGHT = ...
    OVER_RIGHT_LEFT = ...
    ROTATE_LEFT = ...
    ROTATE_RIGHT = ...
    ROTATE_LEFT_RIGHT = ...

class StringFilterMatchMode(GObject.GEnum): 
    EXACT = ...
    SUBSTRING = ...
    PREFIX = ...

class SymbolicColor(GObject.GEnum): 
    FOREGROUND = ...
    ERROR = ...
    WARNING = ...
    SUCCESS = ...

class SystemSetting(GObject.GEnum): 
    DPI = ...
    FONT_NAME = ...
    FONT_CONFIG = ...
    DISPLAY = ...
    ICON_THEME = ...

class TextDirection(GObject.GEnum): 
    NONE = ...
    LTR = ...
    RTL = ...

class TextExtendSelection(GObject.GEnum): 
    WORD = ...
    LINE = ...

class TextViewLayer(GObject.GEnum): 
    BELOW_TEXT = ...
    ABOVE_TEXT = ...

class TextWindowType(GObject.GEnum): 
    WIDGET = ...
    TEXT = ...
    LEFT = ...
    RIGHT = ...
    TOP = ...
    BOTTOM = ...

class TreeViewColumnSizing(GObject.GEnum): 
    GROW_ONLY = ...
    AUTOSIZE = ...
    FIXED = ...

class TreeViewDropPosition(GObject.GEnum): 
    BEFORE = ...
    AFTER = ...
    INTO_OR_BEFORE = ...
    INTO_OR_AFTER = ...

class TreeViewGridLines(GObject.GEnum): 
    NONE = ...
    HORIZONTAL = ...
    VERTICAL = ...
    BOTH = ...

class Unit(GObject.GEnum): 
    NONE = ...
    POINTS = ...
    INCH = ...
    MM = ...

class WrapMode(GObject.GEnum): 
    NONE = ...
    CHAR = ...
    WORD = ...
    WORD_CHAR = ...

