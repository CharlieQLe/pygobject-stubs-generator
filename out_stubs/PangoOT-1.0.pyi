from gi.repository import Pango, freetype2, PangoFc, freetype2, GObject

ALL_GLYPHS: int
DEFAULT_LANGUAGE: int
NO_FEATURE: int
NO_SCRIPT: int

def tag_from_language(language: Pango.Language) -> Tag: ...
def tag_from_script(script: Pango.Script) -> Tag: ...
def tag_to_language(language_tag: Tag) -> Pango.Language: ...
def tag_to_script(script_tag: Tag) -> Pango.Script: ...

class Info(GObject.Object): 
    @classmethod
    def get(cls, face: freetype2.Face) -> Info: ...
    def find_feature(self, table_type: TableType, feature_tag: Tag, script_index: int, language_index: int, feature_index: int) -> bool: ...
    def find_language(self, table_type: TableType, script_index: int, language_tag: Tag, language_index: int, required_feature_index: int) -> bool: ...
    def find_script(self, table_type: TableType, script_tag: Tag, script_index: int) -> bool: ...
    def list_features(self, table_type: TableType, tag: Tag, script_index: int, language_index: int) -> Tag: ...
    def list_languages(self, table_type: TableType, script_index: int, language_tag: Tag) -> Tag: ...
    def list_scripts(self, table_type: TableType) -> Tag: ...

class Ruleset(GObject.Object): 
    @classmethod
    def new(cls, info: Info) -> Ruleset: ...
    @classmethod
    def get_for_description(cls, info: Info, desc: RulesetDescription) -> Ruleset: ...
    def add_feature(self, table_type: TableType, feature_index: int, property_bit: int) -> None: ...
    def get_feature_count(self, n_gsub_features: int, n_gpos_features: int) -> int: ...
    def maybe_add_feature(self, table_type: TableType, feature_tag: Tag, property_bit: int) -> bool: ...
    def maybe_add_features(self, table_type: TableType, features: FeatureMap, n_features: int) -> int: ...
    def position(self, buffer: Buffer) -> None: ...
    def substitute(self, buffer: Buffer) -> None: ...

class TableType(GObject.GEnum): 
    GSUB = ...
    GPOS = ...

