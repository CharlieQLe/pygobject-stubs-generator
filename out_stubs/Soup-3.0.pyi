from gi.repository import GLib, GObject, Gio, Gio

COOKIE_MAX_AGE_ONE_DAY: int
COOKIE_MAX_AGE_ONE_HOUR: int
COOKIE_MAX_AGE_ONE_WEEK: int
COOKIE_MAX_AGE_ONE_YEAR: int
FORM_MIME_TYPE_MULTIPART: str
FORM_MIME_TYPE_URLENCODED: str
HSTS_POLICY_MAX_AGE_PAST: int
HTTP_URI_FLAGS: int
MAJOR_VERSION: int
MICRO_VERSION: int
MINOR_VERSION: int
VERSION_MIN_REQUIRED: int

def check_version(major: int, minor: int, micro: int) -> bool: ...
def cookie_parse(header: str, origin: GLib.Uri) -> Cookie: ...
def cookies_free(cookies: GLib.SList) -> None: ...
def cookies_from_request(msg: Message) -> GLib.SList: ...
def cookies_from_response(msg: Message) -> GLib.SList: ...
def cookies_to_cookie_header(cookies: GLib.SList) -> str: ...
def cookies_to_request(cookies: GLib.SList, msg: Message) -> None: ...
def cookies_to_response(cookies: GLib.SList, msg: Message) -> None: ...
def date_time_new_from_http_string(date_string: str) -> GLib.DateTime: ...
def date_time_to_string(date: GLib.DateTime, format: DateFormat) -> str: ...
def form_decode(encoded_form: str) -> GLib.HashTable: ...
def form_decode_multipart(multipart: Multipart, file_control_name: str, filename: str, content_type: str, file: GLib.Bytes) -> GLib.HashTable: ...
def form_encode(first_field: str) -> str: ...
def form_encode_datalist(form_data_set: GLib.Data) -> str: ...
def form_encode_hash(form_data_set: GLib.HashTable) -> str: ...
def form_encode_valist(first_field: str, args: va_list) -> str: ...
def get_major_version() -> int: ...
def get_micro_version() -> int: ...
def get_minor_version() -> int: ...
def header_contains(header: str, token: str) -> bool: ...
def header_free_list(list: GLib.SList) -> None: ...
def header_free_param_list(param_list: GLib.HashTable) -> None: ...
def header_g_string_append_param(string: GLib.String, name: str, value: str) -> None: ...
def header_g_string_append_param_quoted(string: GLib.String, name: str, value: str) -> None: ...
def header_parse_list(header: str) -> GLib.SList: ...
def header_parse_param_list(header: str) -> GLib.HashTable: ...
def header_parse_param_list_strict(header: str) -> GLib.HashTable: ...
def header_parse_quality_list(header: str, unacceptable: GLib.SList) -> GLib.SList: ...
def header_parse_semi_param_list(header: str) -> GLib.HashTable: ...
def header_parse_semi_param_list_strict(header: str) -> GLib.HashTable: ...
def headers_parse(str: str, len: int, dest: MessageHeaders) -> bool: ...
def headers_parse_request(str: str, len: int, req_headers: MessageHeaders, req_method: str, req_path: str, ver: HTTPVersion) -> int: ...
def headers_parse_response(str: str, len: int, headers: MessageHeaders, ver: HTTPVersion, status_code: int, reason_phrase: str) -> bool: ...
def headers_parse_status_line(status_line: str, ver: HTTPVersion, status_code: int, reason_phrase: str) -> bool: ...
def message_headers_iter_init(iter: MessageHeadersIter, hdrs: MessageHeaders) -> None: ...
def session_error_quark() -> GLib.Quark: ...
def status_get_phrase(status_code: int) -> str: ...
def tld_domain_is_public_suffix(domain: str) -> bool: ...
def tld_error_quark() -> GLib.Quark: ...
def tld_get_base_domain(hostname: str) -> str: ...
def uri_copy(uri: GLib.Uri, first_component: URIComponent) -> GLib.Uri: ...
def uri_decode_data_uri(uri: str, content_type: str) -> GLib.Bytes: ...
def uri_equal(uri1: GLib.Uri, uri2: GLib.Uri) -> bool: ...
def websocket_client_prepare_handshake(msg: Message, origin: str, protocols: list[str], supported_extensions: list[GObject.TypeClass]) -> None: ...
def websocket_client_verify_handshake(msg: Message, supported_extensions: list[GObject.TypeClass], accepted_extensions: GLib.List) -> bool: ...
def websocket_error_quark() -> GLib.Quark: ...
def websocket_server_check_handshake(msg: ServerMessage, origin: str, protocols: list[str], supported_extensions: list[GObject.TypeClass]) -> bool: ...
def websocket_server_process_handshake(msg: ServerMessage, expected_origin: str, protocols: list[str], supported_extensions: list[GObject.TypeClass], accepted_extensions: GLib.List) -> bool: ...

class Auth(GObject.Object): 
    @classmethod
    def new(cls, type: GObject.Type, msg: Message, auth_header: str) -> Auth: ...
    def authenticate(self, username: str, password: str) -> None: ...
    def can_authenticate(self) -> bool: ...
    def cancel(self) -> None: ...
    def free_protection_space(self, space: GLib.SList) -> None: ...
    def get_authority(self) -> str: ...
    def get_authorization(self, msg: Message) -> str: ...
    def get_info(self) -> str: ...
    def get_protection_space(self, source_uri: GLib.Uri) -> GLib.SList: ...
    def get_realm(self) -> str: ...
    def get_scheme_name(self) -> str: ...
    def is_authenticated(self) -> bool: ...
    def is_cancelled(self) -> bool: ...
    def is_for_proxy(self) -> bool: ...
    def is_ready(self, msg: Message) -> bool: ...
    def update(self, msg: Message, auth_header: str) -> bool: ...

class AuthBasic(Auth): ...

class AuthDigest(Auth): ...

class AuthDomain(GObject.Object): 
    def accepts(self, msg: ServerMessage) -> str: ...
    def add_path(self, path: str) -> None: ...
    def challenge(self, msg: ServerMessage) -> None: ...
    def check_password(self, msg: ServerMessage, username: str, password: str) -> bool: ...
    def covers(self, msg: ServerMessage) -> bool: ...
    def get_realm(self) -> str: ...
    def remove_path(self, path: str) -> None: ...
    def set_filter(self, filter: AuthDomainFilter, filter_data: object, dnotify: GLib.DestroyNotify) -> None: ...
    def set_generic_auth_callback(self, auth_callback: AuthDomainGenericAuthCallback, auth_data: object, dnotify: GLib.DestroyNotify) -> None: ...

class AuthDomainBasic(AuthDomain): 
    @classmethod
    def new(cls, optname1: str) -> AuthDomain: ...
    def set_auth_callback(self, callback: AuthDomainBasicAuthCallback, user_data: object, dnotify: GLib.DestroyNotify) -> None: ...

class AuthDomainDigest(AuthDomain): 
    @classmethod
    def new(cls, optname1: str) -> AuthDomain: ...
    @classmethod
    def encode_password(cls, username: str, realm: str, password: str) -> str: ...
    def set_auth_callback(self, callback: AuthDomainDigestAuthCallback, user_data: object, dnotify: GLib.DestroyNotify) -> None: ...

class AuthManager(GObject.Object, SessionFeature): 
    def clear_cached_credentials(self) -> None: ...
    def use_auth(self, uri: GLib.Uri, auth: Auth) -> None: ...

class AuthNTLM(Auth): ...

class AuthNegotiate(Auth): 
    @classmethod
    def supported(cls) -> bool: ...

class Cache(GObject.Object, SessionFeature): 
    @classmethod
    def new(cls, cache_dir: str, cache_type: CacheType) -> Cache: ...
    def clear(self) -> None: ...
    def dump(self) -> None: ...
    def flush(self) -> None: ...
    def get_max_size(self) -> int: ...
    def load(self) -> None: ...
    def set_max_size(self, max_size: int) -> None: ...

class ContentDecoder(GObject.Object, SessionFeature): ...

class ContentSniffer(GObject.Object, SessionFeature): 
    @classmethod
    def new(cls) -> ContentSniffer: ...
    def sniff(self, msg: Message, buffer: GLib.Bytes, params: GLib.HashTable) -> str: ...

class CookieJar(GObject.Object, SessionFeature): 
    @classmethod
    def new(cls) -> CookieJar: ...
    def add_cookie(self, cookie: Cookie) -> None: ...
    def add_cookie_full(self, cookie: Cookie, uri: GLib.Uri, first_party: GLib.Uri) -> None: ...
    def add_cookie_with_first_party(self, first_party: GLib.Uri, cookie: Cookie) -> None: ...
    def all_cookies(self) -> GLib.SList: ...
    def delete_cookie(self, cookie: Cookie) -> None: ...
    def get_accept_policy(self) -> CookieJarAcceptPolicy: ...
    def get_cookie_list(self, uri: GLib.Uri, for_http: bool) -> GLib.SList: ...
    def get_cookie_list_with_same_site_info(self, uri: GLib.Uri, top_level: GLib.Uri, site_for_cookies: GLib.Uri, for_http: bool, is_safe_method: bool, is_top_level_navigation: bool) -> GLib.SList: ...
    def get_cookies(self, uri: GLib.Uri, for_http: bool) -> str: ...
    def is_persistent(self) -> bool: ...
    def set_accept_policy(self, policy: CookieJarAcceptPolicy) -> None: ...
    def set_cookie(self, uri: GLib.Uri, cookie: str) -> None: ...
    def set_cookie_with_first_party(self, uri: GLib.Uri, first_party: GLib.Uri, cookie: str) -> None: ...

class CookieJarDB(CookieJar, SessionFeature): 
    @classmethod
    def new(cls, filename: str, read_only: bool) -> CookieJar: ...

class CookieJarText(CookieJar, SessionFeature): 
    @classmethod
    def new(cls, filename: str, read_only: bool) -> CookieJar: ...

class HSTSEnforcer(GObject.Object, SessionFeature): 
    @classmethod
    def new(cls) -> HSTSEnforcer: ...
    def get_domains(self, session_policies: bool) -> GLib.List: ...
    def get_policies(self, session_policies: bool) -> GLib.List: ...
    def has_valid_policy(self, domain: str) -> bool: ...
    def is_persistent(self) -> bool: ...
    def set_policy(self, policy: HSTSPolicy) -> None: ...
    def set_session_policy(self, domain: str, include_subdomains: bool) -> None: ...

class HSTSEnforcerDB(HSTSEnforcer, SessionFeature): 
    @classmethod
    def new(cls, filename: str) -> HSTSEnforcer: ...

class Logger(GObject.Object, SessionFeature): 
    @classmethod
    def new(cls, level: LoggerLogLevel) -> Logger: ...
    def get_max_body_size(self) -> int: ...
    def set_max_body_size(self, max_body_size: int) -> None: ...
    def set_printer(self, printer: LoggerPrinter, printer_data: object, destroy: GLib.DestroyNotify) -> None: ...
    def set_request_filter(self, request_filter: LoggerFilter, filter_data: object, destroy: GLib.DestroyNotify) -> None: ...
    def set_response_filter(self, response_filter: LoggerFilter, filter_data: object, destroy: GLib.DestroyNotify) -> None: ...

class Message(GObject.Object): 
    @classmethod
    def new(cls, method: str, uri_string: str) -> Message: ...
    def add_flags(self, flags: MessageFlags) -> None: ...
    def add_header_handler(self, signal: str, header: str, callback: GObject.Callback, user_data: object) -> int: ...
    def add_status_code_handler(self, signal: str, status_code: int, callback: GObject.Callback, user_data: object) -> int: ...
    def disable_feature(self, feature_type: GObject.Type) -> None: ...
    def get_connection_id(self) -> int: ...
    def get_first_party(self) -> GLib.Uri: ...
    def get_flags(self) -> MessageFlags: ...
    def get_http_version(self) -> HTTPVersion: ...
    def get_is_options_ping(self) -> bool: ...
    def get_is_top_level_navigation(self) -> bool: ...
    def get_method(self) -> str: ...
    def get_metrics(self) -> MessageMetrics: ...
    def get_priority(self) -> MessagePriority: ...
    def get_reason_phrase(self) -> str: ...
    def get_remote_address(self) -> Gio.SocketAddress: ...
    def get_request_headers(self) -> MessageHeaders: ...
    def get_response_headers(self) -> MessageHeaders: ...
    def get_site_for_cookies(self) -> GLib.Uri: ...
    def get_status(self) -> Status: ...
    def get_tls_ciphersuite_name(self) -> str: ...
    def get_tls_peer_certificate(self) -> Gio.TlsCertificate: ...
    def get_tls_peer_certificate_errors(self) -> Gio.TlsCertificateFlags: ...
    def get_tls_protocol_version(self) -> Gio.TlsProtocolVersion: ...
    def get_uri(self) -> GLib.Uri: ...
    def is_feature_disabled(self, feature_type: GObject.Type) -> bool: ...
    def is_keepalive(self) -> bool: ...
    def query_flags(self, flags: MessageFlags) -> bool: ...
    def remove_flags(self, flags: MessageFlags) -> None: ...
    def set_first_party(self, first_party: GLib.Uri) -> None: ...
    def set_flags(self, flags: MessageFlags) -> None: ...
    def set_is_options_ping(self, is_options_ping: bool) -> None: ...
    def set_is_top_level_navigation(self, is_top_level_navigation: bool) -> None: ...
    def set_method(self, method: str) -> None: ...
    def set_priority(self, priority: MessagePriority) -> None: ...
    def set_request_body(self, content_type: str, stream: Gio.InputStream, content_length: gssize) -> None: ...
    def set_request_body_from_bytes(self, content_type: str, bytes: GLib.Bytes) -> None: ...
    def set_site_for_cookies(self, site_for_cookies: GLib.Uri) -> None: ...
    def set_tls_client_certificate(self, certificate: Gio.TlsCertificate) -> None: ...
    def set_uri(self, uri: GLib.Uri) -> None: ...
    def tls_client_certificate_password_request_complete(self) -> None: ...

class MultipartInputStream(Gio.FilterInputStream, Gio.PollableInputStream): 
    @classmethod
    def new(cls, msg: Message, base_stream: Gio.InputStream) -> MultipartInputStream: ...
    def get_headers(self) -> MessageHeaders: ...
    def next_part(self, cancellable: Gio.Cancellable) -> Gio.InputStream: ...
    def next_part_async(self, io_priority: int, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, data: object) -> None: ...
    def next_part_finish(self, result: Gio.AsyncResult) -> Gio.InputStream: ...

class Server(GObject.Object): 
    @classmethod
    def new(cls, optname1: str) -> Server: ...
    def accept_iostream(self, stream: Gio.IOStream, local_addr: Gio.SocketAddress, remote_addr: Gio.SocketAddress) -> bool: ...
    def add_auth_domain(self, auth_domain: AuthDomain) -> None: ...
    def add_early_handler(self, path: str, callback: ServerCallback, user_data: object, destroy: GLib.DestroyNotify) -> None: ...
    def add_handler(self, path: str, callback: ServerCallback, user_data: object, destroy: GLib.DestroyNotify) -> None: ...
    def add_websocket_extension(self, extension_type: GObject.Type) -> None: ...
    def add_websocket_handler(self, path: str, origin: str, protocols: list[str], callback: ServerWebsocketCallback, user_data: object, destroy: GLib.DestroyNotify) -> None: ...
    def disconnect(self) -> None: ...
    def get_listeners(self) -> GLib.SList: ...
    def get_tls_auth_mode(self) -> Gio.TlsAuthenticationMode: ...
    def get_tls_certificate(self) -> Gio.TlsCertificate: ...
    def get_tls_database(self) -> Gio.TlsDatabase: ...
    def get_uris(self) -> GLib.SList: ...
    def is_https(self) -> bool: ...
    def listen(self, address: Gio.SocketAddress, options: ServerListenOptions) -> bool: ...
    def listen_all(self, port: int, options: ServerListenOptions) -> bool: ...
    def listen_local(self, port: int, options: ServerListenOptions) -> bool: ...
    def listen_socket(self, socket: Gio.Socket, options: ServerListenOptions) -> bool: ...
    def pause_message(self, msg: ServerMessage) -> None: ...
    def remove_auth_domain(self, auth_domain: AuthDomain) -> None: ...
    def remove_handler(self, path: str) -> None: ...
    def remove_websocket_extension(self, extension_type: GObject.Type) -> None: ...
    def set_tls_auth_mode(self, mode: Gio.TlsAuthenticationMode) -> None: ...
    def set_tls_certificate(self, certificate: Gio.TlsCertificate) -> None: ...
    def set_tls_database(self, tls_database: Gio.TlsDatabase) -> None: ...
    def unpause_message(self, msg: ServerMessage) -> None: ...

class ServerMessage(GObject.Object): 
    def get_http_version(self) -> HTTPVersion: ...
    def get_local_address(self) -> Gio.SocketAddress: ...
    def get_method(self) -> str: ...
    def get_reason_phrase(self) -> str: ...
    def get_remote_address(self) -> Gio.SocketAddress: ...
    def get_remote_host(self) -> str: ...
    def get_request_body(self) -> MessageBody: ...
    def get_request_headers(self) -> MessageHeaders: ...
    def get_response_body(self) -> MessageBody: ...
    def get_response_headers(self) -> MessageHeaders: ...
    def get_socket(self) -> Gio.Socket: ...
    def get_status(self) -> int: ...
    def get_tls_peer_certificate(self) -> Gio.TlsCertificate: ...
    def get_tls_peer_certificate_errors(self) -> Gio.TlsCertificateFlags: ...
    def get_uri(self) -> GLib.Uri: ...
    def is_options_ping(self) -> bool: ...
    def pause(self) -> None: ...
    def set_http_version(self, version: HTTPVersion) -> None: ...
    def set_redirect(self, status_code: int, redirect_uri: str) -> None: ...
    def set_response(self, content_type: str, resp_use: MemoryUse, resp_body: list[int], resp_length: gsize) -> None: ...
    def set_status(self, status_code: int, reason_phrase: str) -> None: ...
    def steal_connection(self) -> Gio.IOStream: ...
    def unpause(self) -> None: ...

class Session(GObject.Object): 
    @classmethod
    def new(cls) -> Session: ...
    def abort(self) -> None: ...
    def add_feature(self, feature: SessionFeature) -> None: ...
    def add_feature_by_type(self, feature_type: GObject.Type) -> None: ...
    def get_accept_language(self) -> str: ...
    def get_accept_language_auto(self) -> bool: ...
    def get_async_result_message(self, result: Gio.AsyncResult) -> Message: ...
    def get_feature(self, feature_type: GObject.Type) -> SessionFeature: ...
    def get_feature_for_message(self, feature_type: GObject.Type, msg: Message) -> SessionFeature: ...
    def get_idle_timeout(self) -> int: ...
    def get_local_address(self) -> Gio.InetSocketAddress: ...
    def get_max_conns(self) -> int: ...
    def get_max_conns_per_host(self) -> int: ...
    def get_proxy_resolver(self) -> Gio.ProxyResolver: ...
    def get_remote_connectable(self) -> Gio.SocketConnectable: ...
    def get_timeout(self) -> int: ...
    def get_tls_database(self) -> Gio.TlsDatabase: ...
    def get_tls_interaction(self) -> Gio.TlsInteraction: ...
    def get_user_agent(self) -> str: ...
    def has_feature(self, feature_type: GObject.Type) -> bool: ...
    def preconnect_async(self, msg: Message, io_priority: int, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: object) -> None: ...
    def preconnect_finish(self, result: Gio.AsyncResult) -> bool: ...
    def remove_feature(self, feature: SessionFeature) -> None: ...
    def remove_feature_by_type(self, feature_type: GObject.Type) -> None: ...
    def send(self, msg: Message, cancellable: Gio.Cancellable) -> Gio.InputStream: ...
    def send_and_read(self, msg: Message, cancellable: Gio.Cancellable) -> GLib.Bytes: ...
    def send_and_read_async(self, msg: Message, io_priority: int, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: object) -> None: ...
    def send_and_read_finish(self, result: Gio.AsyncResult) -> GLib.Bytes: ...
    def send_async(self, msg: Message, io_priority: int, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: object) -> None: ...
    def send_finish(self, result: Gio.AsyncResult) -> Gio.InputStream: ...
    def set_accept_language(self, accept_language: str) -> None: ...
    def set_accept_language_auto(self, accept_language_auto: bool) -> None: ...
    def set_idle_timeout(self, timeout: int) -> None: ...
    def set_proxy_resolver(self, proxy_resolver: Gio.ProxyResolver) -> None: ...
    def set_timeout(self, timeout: int) -> None: ...
    def set_tls_database(self, tls_database: Gio.TlsDatabase) -> None: ...
    def set_tls_interaction(self, tls_interaction: Gio.TlsInteraction) -> None: ...
    def set_user_agent(self, user_agent: str) -> None: ...
    def websocket_connect_async(self, msg: Message, origin: str, protocols: list[str], io_priority: int, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: object) -> None: ...
    def websocket_connect_finish(self, result: Gio.AsyncResult) -> WebsocketConnection: ...

class WebsocketConnection(GObject.Object): 
    @classmethod
    def new(cls, stream: Gio.IOStream, uri: GLib.Uri, type: WebsocketConnectionType, origin: str, protocol: str, extensions: GLib.List) -> WebsocketConnection: ...
    def close(self, code: gushort, data: str) -> None: ...
    def get_close_code(self) -> gushort: ...
    def get_close_data(self) -> str: ...
    def get_connection_type(self) -> WebsocketConnectionType: ...
    def get_extensions(self) -> GLib.List: ...
    def get_io_stream(self) -> Gio.IOStream: ...
    def get_keepalive_interval(self) -> int: ...
    def get_max_incoming_payload_size(self) -> int: ...
    def get_origin(self) -> str: ...
    def get_protocol(self) -> str: ...
    def get_state(self) -> WebsocketState: ...
    def get_uri(self) -> GLib.Uri: ...
    def send_binary(self, data: list[int], length: gsize) -> None: ...
    def send_message(self, type: WebsocketDataType, message: GLib.Bytes) -> None: ...
    def send_text(self, text: str) -> None: ...
    def set_keepalive_interval(self, interval: int) -> None: ...
    def set_max_incoming_payload_size(self, max_incoming_payload_size: int) -> None: ...

class WebsocketExtension(GObject.Object): 
    def configure(self, connection_type: WebsocketConnectionType, params: GLib.HashTable) -> bool: ...
    def get_request_params(self) -> str: ...
    def get_response_params(self) -> str: ...
    def process_incoming_message(self, header: int, payload: GLib.Bytes) -> GLib.Bytes: ...
    def process_outgoing_message(self, header: int, payload: GLib.Bytes) -> GLib.Bytes: ...

class WebsocketExtensionDeflate(WebsocketExtension): ...

class WebsocketExtensionManager(GObject.Object, SessionFeature): ...

class SessionFeature: ...

class Cacheability(GObject.GFlag): 
    CACHEABLE = ...
    UNCACHEABLE = ...
    INVALIDATES = ...
    VALIDATES = ...

class Expectation(GObject.GFlag): 
    UNRECOGNIZED = ...
    CONTINUE = ...

class MessageFlags(GObject.GFlag): 
    NO_REDIRECT = ...
    NEW_CONNECTION = ...
    IDEMPOTENT = ...
    DO_NOT_USE_AUTH_CACHE = ...
    COLLECT_METRICS = ...

class ServerListenOptions(GObject.GFlag): 
    HTTPS = ...
    IPV4_ONLY = ...
    IPV6_ONLY = ...

class CacheType(GObject.GEnum): 
    SINGLE_USER = ...
    SHARED = ...

class CookieJarAcceptPolicy(GObject.GEnum): 
    ALWAYS = ...
    NEVER = ...
    NO_THIRD_PARTY = ...
    GRANDFATHERED_THIRD_PARTY = ...

class DateFormat(GObject.GEnum): 
    HTTP = ...
    COOKIE = ...

class Encoding(GObject.GEnum): 
    UNRECOGNIZED = ...
    NONE = ...
    CONTENT_LENGTH = ...
    EOF = ...
    CHUNKED = ...
    BYTERANGES = ...

class HTTPVersion(GObject.GEnum): 
    HTTP_1_0 = ...
    HTTP_1_1 = ...
    HTTP_2_0 = ...

class LoggerLogLevel(GObject.GEnum): 
    NONE = ...
    MINIMAL = ...
    HEADERS = ...
    BODY = ...

class MemoryUse(GObject.GEnum): 
    STATIC = ...
    TAKE = ...
    COPY = ...

class MessageHeadersType(GObject.GEnum): 
    REQUEST = ...
    RESPONSE = ...
    MULTIPART = ...

class MessagePriority(GObject.GEnum): 
    VERY_LOW = ...
    LOW = ...
    NORMAL = ...
    HIGH = ...
    VERY_HIGH = ...

class SameSitePolicy(GObject.GEnum): 
    NONE = ...
    LAX = ...
    STRICT = ...

class SessionError(GObject.GEnum): 
    PARSING = ...
    ENCODING = ...
    TOO_MANY_REDIRECTS = ...
    TOO_MANY_RESTARTS = ...
    REDIRECT_NO_LOCATION = ...
    REDIRECT_BAD_URI = ...
    MESSAGE_ALREADY_IN_QUEUE = ...

class Status(GObject.GEnum): 
    NONE = ...
    CONTINUE = ...
    SWITCHING_PROTOCOLS = ...
    PROCESSING = ...
    OK = ...
    CREATED = ...
    ACCEPTED = ...
    NON_AUTHORITATIVE = ...
    NO_CONTENT = ...
    RESET_CONTENT = ...
    PARTIAL_CONTENT = ...
    MULTI_STATUS = ...
    MULTIPLE_CHOICES = ...
    MOVED_PERMANENTLY = ...
    FOUND = ...
    MOVED_TEMPORARILY = ...
    SEE_OTHER = ...
    NOT_MODIFIED = ...
    USE_PROXY = ...
    NOT_APPEARING_IN_THIS_PROTOCOL = ...
    TEMPORARY_REDIRECT = ...
    PERMANENT_REDIRECT = ...
    BAD_REQUEST = ...
    UNAUTHORIZED = ...
    PAYMENT_REQUIRED = ...
    FORBIDDEN = ...
    NOT_FOUND = ...
    METHOD_NOT_ALLOWED = ...
    NOT_ACCEPTABLE = ...
    PROXY_AUTHENTICATION_REQUIRED = ...
    PROXY_UNAUTHORIZED = ...
    REQUEST_TIMEOUT = ...
    CONFLICT = ...
    GONE = ...
    LENGTH_REQUIRED = ...
    PRECONDITION_FAILED = ...
    REQUEST_ENTITY_TOO_LARGE = ...
    REQUEST_URI_TOO_LONG = ...
    UNSUPPORTED_MEDIA_TYPE = ...
    REQUESTED_RANGE_NOT_SATISFIABLE = ...
    INVALID_RANGE = ...
    EXPECTATION_FAILED = ...
    MISDIRECTED_REQUEST = ...
    UNPROCESSABLE_ENTITY = ...
    LOCKED = ...
    FAILED_DEPENDENCY = ...
    INTERNAL_SERVER_ERROR = ...
    NOT_IMPLEMENTED = ...
    BAD_GATEWAY = ...
    SERVICE_UNAVAILABLE = ...
    GATEWAY_TIMEOUT = ...
    HTTP_VERSION_NOT_SUPPORTED = ...
    INSUFFICIENT_STORAGE = ...
    NOT_EXTENDED = ...

class TLDError(GObject.GEnum): 
    INVALID_HOSTNAME = ...
    IS_IP_ADDRESS = ...
    NOT_ENOUGH_DOMAINS = ...
    NO_BASE_DOMAIN = ...
    NO_PSL_DATA = ...

class URIComponent(GObject.GEnum): 
    NONE = ...
    SCHEME = ...
    USER = ...
    PASSWORD = ...
    AUTH_PARAMS = ...
    HOST = ...
    PORT = ...
    PATH = ...
    QUERY = ...
    FRAGMENT = ...

class WebsocketCloseCode(GObject.GEnum): 
    NORMAL = ...
    GOING_AWAY = ...
    PROTOCOL_ERROR = ...
    UNSUPPORTED_DATA = ...
    NO_STATUS = ...
    ABNORMAL = ...
    BAD_DATA = ...
    POLICY_VIOLATION = ...
    TOO_BIG = ...
    NO_EXTENSION = ...
    SERVER_ERROR = ...
    TLS_HANDSHAKE = ...

class WebsocketConnectionType(GObject.GEnum): 
    UNKNOWN = ...
    CLIENT = ...
    SERVER = ...

class WebsocketDataType(GObject.GEnum): 
    TEXT = ...
    BINARY = ...

class WebsocketError(GObject.GEnum): 
    FAILED = ...
    NOT_WEBSOCKET = ...
    BAD_HANDSHAKE = ...
    BAD_ORIGIN = ...

class WebsocketState(GObject.GEnum): 
    OPEN = ...
    CLOSING = ...
    CLOSED = ...

